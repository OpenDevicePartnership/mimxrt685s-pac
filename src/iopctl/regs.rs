#[doc = "Special Registers (No GPIO Function)"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Fc15I2cScl(pub u32);
impl Fc15I2cScl {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Fc15I2cSclFsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Fc15I2cSclFsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Fc15I2cSclFsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Fc15I2cSclPupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Fc15I2cSclPupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Fc15I2cSclPupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Fc15I2cSclPupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Fc15I2cSclPupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Fc15I2cSclPupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Fc15I2cSclIbena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Fc15I2cSclIbena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Fc15I2cSclIbena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Fc15I2cSclSlewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Fc15I2cSclSlewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Fc15I2cSclSlewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Fc15I2cSclFulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Fc15I2cSclFulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Fc15I2cSclFulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Fc15I2cSclAmena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Fc15I2cSclAmena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Fc15I2cSclAmena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Fc15I2cSclOdena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Fc15I2cSclOdena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Fc15I2cSclOdena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Fc15I2cSclIiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Fc15I2cSclIiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Fc15I2cSclIiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Fc15I2cScl {
    #[inline(always)]
    fn default() -> Fc15I2cScl {
        Fc15I2cScl(0)
    }
}
#[doc = "Special Registers (No GPIO Function)"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Fc15I2cSda(pub u32);
impl Fc15I2cSda {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Fc15I2cSdaFsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Fc15I2cSdaFsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Fc15I2cSdaFsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Fc15I2cSdaPupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Fc15I2cSdaPupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Fc15I2cSdaPupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Fc15I2cSdaPupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Fc15I2cSdaPupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Fc15I2cSdaPupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Fc15I2cSdaIbena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Fc15I2cSdaIbena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Fc15I2cSdaIbena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Fc15I2cSdaSlewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Fc15I2cSdaSlewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Fc15I2cSdaSlewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Fc15I2cSdaFulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Fc15I2cSdaFulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Fc15I2cSdaFulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Fc15I2cSdaAmena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Fc15I2cSdaAmena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Fc15I2cSdaAmena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Fc15I2cSdaOdena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Fc15I2cSdaOdena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Fc15I2cSdaOdena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Fc15I2cSdaIiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Fc15I2cSdaIiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Fc15I2cSdaIiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Fc15I2cSda {
    #[inline(always)]
    fn default() -> Fc15I2cSda {
        Fc15I2cSda(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio00(pub u32);
impl Pio00 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio00Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio00Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio00Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio00Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio00Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio00Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio00Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio00Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio00Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio00Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio00Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio00Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio00Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio00Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio00Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio00Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio00Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio00Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio00Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio00Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio00Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio00Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio00Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio00Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio00Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio00Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio00Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio00 {
    #[inline(always)]
    fn default() -> Pio00 {
        Pio00(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio01(pub u32);
impl Pio01 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio01Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio01Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio01Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio01Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio01Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio01Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio01Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio01Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio01Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio01Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio01Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio01Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio01Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio01Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio01Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio01Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio01Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio01Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio01Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio01Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio01Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio01Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio01Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio01Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio01Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio01Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio01Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio01 {
    #[inline(always)]
    fn default() -> Pio01 {
        Pio01(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio010(pub u32);
impl Pio010 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio010Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio010Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio010Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio010Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio010Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio010Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio010Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio010Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio010Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio010Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio010Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio010Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio010Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio010Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio010Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio010Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio010Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio010Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio010Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio010Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio010Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio010Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio010Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio010Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio010Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio010Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio010Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio010 {
    #[inline(always)]
    fn default() -> Pio010 {
        Pio010(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio011(pub u32);
impl Pio011 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio011Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio011Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio011Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio011Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio011Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio011Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio011Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio011Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio011Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio011Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio011Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio011Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio011Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio011Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio011Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio011Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio011Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio011Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio011Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio011Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio011Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio011Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio011Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio011Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio011Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio011Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio011Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio011 {
    #[inline(always)]
    fn default() -> Pio011 {
        Pio011(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio012(pub u32);
impl Pio012 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio012Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio012Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio012Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio012Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio012Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio012Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio012Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio012Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio012Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio012Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio012Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio012Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio012Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio012Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio012Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio012Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio012Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio012Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio012Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio012Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio012Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio012Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio012Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio012Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio012Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio012Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio012Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio012 {
    #[inline(always)]
    fn default() -> Pio012 {
        Pio012(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio013(pub u32);
impl Pio013 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio013Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio013Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio013Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio013Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio013Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio013Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio013Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio013Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio013Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio013Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio013Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio013Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio013Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio013Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio013Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio013Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio013Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio013Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio013Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio013Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio013Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio013Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio013Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio013Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio013Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio013Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio013Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio013 {
    #[inline(always)]
    fn default() -> Pio013 {
        Pio013(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio014(pub u32);
impl Pio014 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio014Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio014Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio014Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio014Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio014Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio014Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio014Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio014Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio014Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio014Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio014Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio014Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio014Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio014Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio014Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio014Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio014Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio014Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio014Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio014Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio014Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio014Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio014Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio014Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio014Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio014Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio014Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio014 {
    #[inline(always)]
    fn default() -> Pio014 {
        Pio014(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio015(pub u32);
impl Pio015 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio015Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio015Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio015Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio015Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio015Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio015Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio015Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio015Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio015Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio015Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio015Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio015Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio015Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio015Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio015Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio015Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio015Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio015Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio015Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio015Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio015Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio015Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio015Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio015Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio015Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio015Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio015Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio015 {
    #[inline(always)]
    fn default() -> Pio015 {
        Pio015(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio016(pub u32);
impl Pio016 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio016Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio016Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio016Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio016Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio016Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio016Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio016Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio016Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio016Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio016Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio016Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio016Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio016Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio016Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio016Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio016Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio016Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio016Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio016Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio016Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio016Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio016Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio016Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio016Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio016Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio016Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio016Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio016 {
    #[inline(always)]
    fn default() -> Pio016 {
        Pio016(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio017(pub u32);
impl Pio017 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio017Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio017Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio017Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio017Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio017Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio017Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio017Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio017Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio017Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio017Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio017Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio017Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio017Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio017Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio017Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio017Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio017Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio017Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio017Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio017Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio017Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio017Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio017Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio017Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio017Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio017Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio017Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio017 {
    #[inline(always)]
    fn default() -> Pio017 {
        Pio017(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio018(pub u32);
impl Pio018 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio018Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio018Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio018Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio018Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio018Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio018Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio018Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio018Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio018Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio018Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio018Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio018Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio018Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio018Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio018Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio018Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio018Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio018Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio018Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio018Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio018Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio018Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio018Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio018Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio018Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio018Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio018Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio018 {
    #[inline(always)]
    fn default() -> Pio018 {
        Pio018(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio019(pub u32);
impl Pio019 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio019Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio019Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio019Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio019Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio019Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio019Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio019Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio019Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio019Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio019Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio019Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio019Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio019Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio019Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio019Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio019Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio019Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio019Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio019Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio019Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio019Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio019Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio019Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio019Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio019Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio019Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio019Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio019 {
    #[inline(always)]
    fn default() -> Pio019 {
        Pio019(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio02(pub u32);
impl Pio02 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio02Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio02Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio02Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio02Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio02Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio02Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio02Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio02Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio02Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio02Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio02Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio02Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio02Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio02Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio02Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio02Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio02Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio02Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio02Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio02Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio02Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio02Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio02Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio02Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio02Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio02Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio02Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio02 {
    #[inline(always)]
    fn default() -> Pio02 {
        Pio02(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio020(pub u32);
impl Pio020 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio020Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio020Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio020Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio020Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio020Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio020Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio020Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio020Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio020Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio020Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio020Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio020Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio020Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio020Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio020Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio020Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio020Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio020Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio020Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio020Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio020Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio020Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio020Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio020Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio020Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio020Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio020Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio020 {
    #[inline(always)]
    fn default() -> Pio020 {
        Pio020(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio021(pub u32);
impl Pio021 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio021Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio021Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio021Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio021Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio021Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio021Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio021Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio021Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio021Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio021Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio021Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio021Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio021Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio021Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio021Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio021Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio021Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio021Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio021Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio021Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio021Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio021Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio021Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio021Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio021Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio021Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio021Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio021 {
    #[inline(always)]
    fn default() -> Pio021 {
        Pio021(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio022(pub u32);
impl Pio022 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio022Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio022Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio022Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio022Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio022Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio022Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio022Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio022Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio022Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio022Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio022Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio022Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio022Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio022Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio022Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio022Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio022Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio022Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio022Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio022Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio022Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio022Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio022Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio022Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio022Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio022Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio022Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio022 {
    #[inline(always)]
    fn default() -> Pio022 {
        Pio022(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio023(pub u32);
impl Pio023 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio023Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio023Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio023Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio023Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio023Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio023Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio023Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio023Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio023Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio023Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio023Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio023Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio023Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio023Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio023Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio023Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio023Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio023Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio023Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio023Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio023Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio023Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio023Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio023Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio023Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio023Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio023Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio023 {
    #[inline(always)]
    fn default() -> Pio023 {
        Pio023(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio024(pub u32);
impl Pio024 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio024Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio024Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio024Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio024Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio024Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio024Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio024Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio024Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio024Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio024Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio024Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio024Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio024Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio024Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio024Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio024Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio024Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio024Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio024Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio024Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio024Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio024Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio024Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio024Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio024Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio024Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio024Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio024 {
    #[inline(always)]
    fn default() -> Pio024 {
        Pio024(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio025(pub u32);
impl Pio025 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio025Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio025Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio025Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio025Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio025Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio025Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio025Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio025Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio025Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio025Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio025Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio025Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio025Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio025Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio025Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio025Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio025Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio025Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio025Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio025Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio025Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio025Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio025Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio025Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio025Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio025Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio025Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio025 {
    #[inline(always)]
    fn default() -> Pio025 {
        Pio025(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio026(pub u32);
impl Pio026 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio026Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio026Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio026Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio026Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio026Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio026Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio026Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio026Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio026Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio026Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio026Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio026Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio026Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio026Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio026Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio026Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio026Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio026Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio026Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio026Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio026Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio026Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio026Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio026Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio026Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio026Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio026Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio026 {
    #[inline(always)]
    fn default() -> Pio026 {
        Pio026(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio027(pub u32);
impl Pio027 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio027Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio027Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio027Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio027Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio027Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio027Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio027Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio027Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio027Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio027Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio027Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio027Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio027Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio027Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio027Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio027Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio027Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio027Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio027Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio027Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio027Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio027Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio027Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio027Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio027Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio027Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio027Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio027 {
    #[inline(always)]
    fn default() -> Pio027 {
        Pio027(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio028(pub u32);
impl Pio028 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio028Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio028Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio028Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio028Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio028Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio028Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio028Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio028Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio028Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio028Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio028Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio028Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio028Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio028Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio028Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio028Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio028Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio028Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio028Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio028Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio028Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio028Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio028Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio028Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio028Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio028Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio028Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio028 {
    #[inline(always)]
    fn default() -> Pio028 {
        Pio028(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio029(pub u32);
impl Pio029 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio029Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio029Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio029Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio029Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio029Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio029Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio029Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio029Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio029Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio029Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio029Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio029Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio029Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio029Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio029Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio029Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio029Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio029Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio029Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio029Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio029Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio029Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio029Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio029Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio029Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio029Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio029Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio029 {
    #[inline(always)]
    fn default() -> Pio029 {
        Pio029(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio03(pub u32);
impl Pio03 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio03Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio03Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio03Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio03Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio03Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio03Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio03Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio03Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio03Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio03Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio03Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio03Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio03Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio03Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio03Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio03Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio03Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio03Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio03Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio03Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio03Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio03Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio03Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio03Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio03Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio03Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio03Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio03 {
    #[inline(always)]
    fn default() -> Pio03 {
        Pio03(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio030(pub u32);
impl Pio030 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio030Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio030Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio030Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio030Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio030Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio030Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio030Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio030Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio030Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio030Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio030Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio030Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio030Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio030Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio030Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio030Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio030Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio030Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio030Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio030Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio030Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio030Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio030Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio030Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio030Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio030Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio030Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio030 {
    #[inline(always)]
    fn default() -> Pio030 {
        Pio030(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio031(pub u32);
impl Pio031 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio031Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio031Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio031Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio031Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio031Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio031Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio031Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio031Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio031Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio031Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio031Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio031Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio031Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio031Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio031Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio031Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio031Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio031Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio031Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio031Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio031Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio031Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio031Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio031Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio031Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio031Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio031Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio031 {
    #[inline(always)]
    fn default() -> Pio031 {
        Pio031(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio04(pub u32);
impl Pio04 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio04Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio04Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio04Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio04Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio04Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio04Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio04Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio04Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio04Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio04Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio04Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio04Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio04Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio04Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio04Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio04Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio04Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio04Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio04Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio04Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio04Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio04Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio04Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio04Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio04Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio04Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio04Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio04 {
    #[inline(always)]
    fn default() -> Pio04 {
        Pio04(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio05(pub u32);
impl Pio05 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio05Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio05Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio05Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio05Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio05Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio05Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio05Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio05Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio05Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio05Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio05Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio05Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio05Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio05Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio05Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio05Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio05Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio05Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio05Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio05Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio05Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio05Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio05Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio05Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio05Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio05Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio05Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio05 {
    #[inline(always)]
    fn default() -> Pio05 {
        Pio05(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio06(pub u32);
impl Pio06 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio06Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio06Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio06Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio06Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio06Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio06Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio06Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio06Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio06Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio06Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio06Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio06Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio06Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio06Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio06Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio06Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio06Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio06Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio06Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio06Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio06Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio06Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio06Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio06Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio06Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio06Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio06Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio06 {
    #[inline(always)]
    fn default() -> Pio06 {
        Pio06(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio07(pub u32);
impl Pio07 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio07Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio07Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio07Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio07Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio07Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio07Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio07Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio07Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio07Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio07Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio07Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio07Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio07Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio07Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio07Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio07Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio07Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio07Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio07Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio07Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio07Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio07Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio07Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio07Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio07Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio07Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio07Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio07 {
    #[inline(always)]
    fn default() -> Pio07 {
        Pio07(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio08(pub u32);
impl Pio08 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio08Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio08Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio08Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio08Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio08Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio08Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio08Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio08Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio08Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio08Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio08Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio08Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio08Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio08Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio08Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio08Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio08Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio08Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio08Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio08Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio08Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio08Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio08Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio08Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio08Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio08Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio08Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio08 {
    #[inline(always)]
    fn default() -> Pio08 {
        Pio08(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio09(pub u32);
impl Pio09 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio09Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio09Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio09Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio09Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio09Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio09Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio09Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio09Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio09Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio09Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio09Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio09Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio09Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio09Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio09Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio09Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio09Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio09Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio09Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio09Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio09Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio09Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio09Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio09Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio09Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio09Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio09Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio09 {
    #[inline(always)]
    fn default() -> Pio09 {
        Pio09(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio10(pub u32);
impl Pio10 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio10Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio10Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio10Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio10Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio10Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio10Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio10Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio10Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio10Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio10Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio10Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio10Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio10Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio10Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio10Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio10Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio10Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio10Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio10Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio10Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio10Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio10Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio10Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio10Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio10Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio10Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio10Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio10 {
    #[inline(always)]
    fn default() -> Pio10 {
        Pio10(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio11(pub u32);
impl Pio11 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio11Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio11Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio11Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio11Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio11Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio11Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio11Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio11Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio11Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio11Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio11Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio11Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio11Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio11Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio11Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio11Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio11Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio11Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio11Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio11Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio11Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio11Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio11Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio11Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio11Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio11Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio11Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio11 {
    #[inline(always)]
    fn default() -> Pio11 {
        Pio11(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio110(pub u32);
impl Pio110 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio110Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio110Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio110Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio110Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio110Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio110Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio110Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio110Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio110Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio110Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio110Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio110Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio110Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio110Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio110Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio110Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio110Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio110Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio110Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio110Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio110Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio110Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio110Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio110Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio110Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio110Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio110Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio110 {
    #[inline(always)]
    fn default() -> Pio110 {
        Pio110(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio111(pub u32);
impl Pio111 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio111Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio111Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio111Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio111Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio111Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio111Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio111Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio111Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio111Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio111Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio111Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio111Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio111Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio111Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio111Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio111Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio111Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio111Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio111Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio111Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio111Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio111Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio111Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio111Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio111Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio111Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio111Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio111 {
    #[inline(always)]
    fn default() -> Pio111 {
        Pio111(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio112(pub u32);
impl Pio112 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio112Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio112Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio112Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio112Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio112Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio112Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio112Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio112Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio112Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio112Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio112Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio112Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio112Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio112Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio112Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio112Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio112Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio112Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio112Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio112Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio112Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio112Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio112Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio112Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio112Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio112Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio112Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio112 {
    #[inline(always)]
    fn default() -> Pio112 {
        Pio112(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio113(pub u32);
impl Pio113 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio113Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio113Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio113Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio113Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio113Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio113Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio113Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio113Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio113Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio113Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio113Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio113Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio113Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio113Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio113Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio113Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio113Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio113Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio113Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio113Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio113Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio113Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio113Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio113Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio113Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio113Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio113Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio113 {
    #[inline(always)]
    fn default() -> Pio113 {
        Pio113(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio114(pub u32);
impl Pio114 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio114Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio114Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio114Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio114Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio114Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio114Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio114Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio114Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio114Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio114Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio114Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio114Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio114Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio114Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio114Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio114Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio114Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio114Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio114Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio114Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio114Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio114Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio114Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio114Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio114Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio114Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio114Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio114 {
    #[inline(always)]
    fn default() -> Pio114 {
        Pio114(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio115(pub u32);
impl Pio115 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio115Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio115Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio115Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio115Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio115Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio115Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio115Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio115Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio115Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio115Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio115Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio115Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio115Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio115Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio115Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio115Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio115Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio115Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio115Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio115Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio115Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio115Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio115Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio115Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio115Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio115Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio115Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio115 {
    #[inline(always)]
    fn default() -> Pio115 {
        Pio115(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio116(pub u32);
impl Pio116 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio116Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio116Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio116Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio116Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio116Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio116Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio116Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio116Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio116Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio116Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio116Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio116Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio116Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio116Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio116Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio116Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio116Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio116Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio116Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio116Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio116Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio116Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio116Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio116Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio116Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio116Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio116Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio116 {
    #[inline(always)]
    fn default() -> Pio116 {
        Pio116(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio117(pub u32);
impl Pio117 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio117Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio117Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio117Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio117Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio117Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio117Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio117Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio117Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio117Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio117Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio117Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio117Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio117Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio117Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio117Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio117Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio117Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio117Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio117Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio117Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio117Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio117Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio117Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio117Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio117Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio117Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio117Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio117 {
    #[inline(always)]
    fn default() -> Pio117 {
        Pio117(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio118(pub u32);
impl Pio118 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio118Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio118Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio118Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio118Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio118Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio118Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio118Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio118Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio118Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio118Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio118Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio118Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio118Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio118Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio118Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio118Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio118Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio118Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio118Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio118Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio118Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio118Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio118Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio118Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio118Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio118Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio118Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio118 {
    #[inline(always)]
    fn default() -> Pio118 {
        Pio118(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio119(pub u32);
impl Pio119 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio119Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio119Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio119Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio119Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio119Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio119Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio119Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio119Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio119Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio119Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio119Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio119Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio119Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio119Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio119Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio119Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio119Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio119Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio119Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio119Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio119Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio119Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio119Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio119Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio119Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio119Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio119Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio119 {
    #[inline(always)]
    fn default() -> Pio119 {
        Pio119(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio12(pub u32);
impl Pio12 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio12Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio12Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio12Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio12Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio12Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio12Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio12Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio12Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio12Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio12Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio12Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio12Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio12Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio12Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio12Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio12Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio12Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio12Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio12Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio12Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio12Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio12Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio12Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio12Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio12Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio12Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio12Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio12 {
    #[inline(always)]
    fn default() -> Pio12 {
        Pio12(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio120(pub u32);
impl Pio120 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio120Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio120Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio120Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio120Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio120Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio120Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio120Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio120Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio120Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio120Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio120Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio120Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio120Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio120Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio120Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio120Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio120Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio120Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio120Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio120Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio120Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio120Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio120Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio120Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio120Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio120Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio120Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio120 {
    #[inline(always)]
    fn default() -> Pio120 {
        Pio120(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio121(pub u32);
impl Pio121 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio121Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio121Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio121Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio121Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio121Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio121Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio121Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio121Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio121Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio121Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio121Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio121Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio121Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio121Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio121Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio121Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio121Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio121Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio121Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio121Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio121Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio121Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio121Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio121Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio121Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio121Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio121Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio121 {
    #[inline(always)]
    fn default() -> Pio121 {
        Pio121(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio122(pub u32);
impl Pio122 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio122Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio122Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio122Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio122Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio122Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio122Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio122Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio122Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio122Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio122Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio122Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio122Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio122Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio122Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio122Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio122Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio122Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio122Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio122Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio122Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio122Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio122Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio122Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio122Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio122Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio122Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio122Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio122 {
    #[inline(always)]
    fn default() -> Pio122 {
        Pio122(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio123(pub u32);
impl Pio123 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio123Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio123Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio123Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio123Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio123Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio123Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio123Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio123Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio123Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio123Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio123Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio123Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio123Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio123Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio123Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio123Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio123Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio123Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio123Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio123Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio123Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio123Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio123Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio123Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio123Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio123Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio123Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio123 {
    #[inline(always)]
    fn default() -> Pio123 {
        Pio123(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio124(pub u32);
impl Pio124 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio124Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio124Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio124Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio124Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio124Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio124Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio124Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio124Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio124Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio124Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio124Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio124Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio124Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio124Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio124Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio124Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio124Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio124Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio124Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio124Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio124Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio124Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio124Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio124Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio124Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio124Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio124Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio124 {
    #[inline(always)]
    fn default() -> Pio124 {
        Pio124(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio125(pub u32);
impl Pio125 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio125Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio125Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio125Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio125Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio125Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio125Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio125Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio125Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio125Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio125Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio125Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio125Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio125Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio125Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio125Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio125Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio125Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio125Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio125Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio125Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio125Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio125Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio125Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio125Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio125Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio125Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio125Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio125 {
    #[inline(always)]
    fn default() -> Pio125 {
        Pio125(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio126(pub u32);
impl Pio126 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio126Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio126Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio126Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio126Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio126Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio126Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio126Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio126Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio126Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio126Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio126Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio126Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio126Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio126Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio126Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio126Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio126Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio126Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio126Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio126Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio126Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio126Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio126Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio126Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio126Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio126Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio126Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio126 {
    #[inline(always)]
    fn default() -> Pio126 {
        Pio126(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio127(pub u32);
impl Pio127 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio127Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio127Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio127Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio127Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio127Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio127Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio127Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio127Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio127Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio127Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio127Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio127Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio127Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio127Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio127Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio127Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio127Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio127Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio127Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio127Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio127Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio127Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio127Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio127Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio127Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio127Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio127Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio127 {
    #[inline(always)]
    fn default() -> Pio127 {
        Pio127(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio128(pub u32);
impl Pio128 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio128Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio128Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio128Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio128Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio128Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio128Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio128Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio128Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio128Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio128Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio128Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio128Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio128Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio128Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio128Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio128Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio128Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio128Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio128Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio128Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio128Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio128Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio128Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio128Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio128Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio128Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio128Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio128 {
    #[inline(always)]
    fn default() -> Pio128 {
        Pio128(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio129(pub u32);
impl Pio129 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio129Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio129Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio129Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio129Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio129Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio129Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio129Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio129Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio129Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio129Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio129Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio129Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio129Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio129Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio129Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio129Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio129Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio129Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio129Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio129Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio129Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio129Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio129Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio129Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio129Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio129Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio129Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio129 {
    #[inline(always)]
    fn default() -> Pio129 {
        Pio129(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio13(pub u32);
impl Pio13 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio13Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio13Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio13Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio13Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio13Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio13Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio13Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio13Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio13Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio13Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio13Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio13Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio13Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio13Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio13Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio13Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio13Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio13Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio13Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio13Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio13Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio13Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio13Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio13Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio13Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio13Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio13Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio13 {
    #[inline(always)]
    fn default() -> Pio13 {
        Pio13(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio130(pub u32);
impl Pio130 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio130Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio130Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio130Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio130Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio130Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio130Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio130Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio130Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio130Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio130Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio130Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio130Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio130Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio130Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio130Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio130Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio130Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio130Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio130Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio130Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio130Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio130Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio130Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio130Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio130Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio130Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio130Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio130 {
    #[inline(always)]
    fn default() -> Pio130 {
        Pio130(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio131(pub u32);
impl Pio131 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio131Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio131Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio131Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio131Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio131Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio131Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio131Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio131Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio131Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio131Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio131Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio131Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio131Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio131Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio131Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio131Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio131Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio131Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio131Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio131Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio131Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio131Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio131Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio131Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio131Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio131Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio131Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio131 {
    #[inline(always)]
    fn default() -> Pio131 {
        Pio131(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio14(pub u32);
impl Pio14 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio14Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio14Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio14Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio14Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio14Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio14Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio14Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio14Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio14Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio14Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio14Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio14Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio14Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio14Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio14Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio14Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio14Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio14Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio14Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio14Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio14Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio14Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio14Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio14Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio14Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio14Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio14Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio14 {
    #[inline(always)]
    fn default() -> Pio14 {
        Pio14(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio15(pub u32);
impl Pio15 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio15Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio15Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio15Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio15Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio15Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio15Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio15Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio15Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio15Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio15Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio15Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio15Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio15Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio15Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio15Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio15Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio15Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio15Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio15Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio15Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio15Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio15Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio15Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio15Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio15Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio15Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio15Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio15 {
    #[inline(always)]
    fn default() -> Pio15 {
        Pio15(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio16(pub u32);
impl Pio16 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio16Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio16Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio16Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio16Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio16Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio16Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio16Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio16Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio16Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio16Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio16Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio16Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio16Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio16Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio16Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio16Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio16Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio16Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio16Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio16Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio16Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio16Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio16Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio16Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio16Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio16Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio16Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio16 {
    #[inline(always)]
    fn default() -> Pio16 {
        Pio16(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio17(pub u32);
impl Pio17 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio17Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio17Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio17Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio17Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio17Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio17Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio17Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio17Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio17Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio17Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio17Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio17Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio17Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio17Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio17Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio17Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio17Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio17Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio17Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio17Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio17Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio17Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio17Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio17Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio17Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio17Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio17Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio17 {
    #[inline(always)]
    fn default() -> Pio17 {
        Pio17(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio18(pub u32);
impl Pio18 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio18Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio18Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio18Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio18Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio18Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio18Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio18Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio18Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio18Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio18Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio18Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio18Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio18Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio18Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio18Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio18Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio18Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio18Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio18Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio18Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio18Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio18Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio18Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio18Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio18Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio18Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio18Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio18 {
    #[inline(always)]
    fn default() -> Pio18 {
        Pio18(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio19(pub u32);
impl Pio19 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio19Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio19Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio19Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio19Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio19Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio19Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio19Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio19Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio19Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio19Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio19Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio19Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio19Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio19Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio19Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio19Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio19Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio19Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio19Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio19Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio19Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio19Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio19Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio19Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio19Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio19Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio19Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio19 {
    #[inline(always)]
    fn default() -> Pio19 {
        Pio19(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio20(pub u32);
impl Pio20 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio20Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio20Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio20Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio20Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio20Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio20Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio20Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio20Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio20Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio20Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio20Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio20Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio20Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio20Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio20Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio20Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio20Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio20Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio20Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio20Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio20Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio20Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio20Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio20Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio20Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio20Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio20Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio20 {
    #[inline(always)]
    fn default() -> Pio20 {
        Pio20(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio21(pub u32);
impl Pio21 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio21Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio21Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio21Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio21Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio21Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio21Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio21Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio21Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio21Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio21Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio21Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio21Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio21Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio21Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio21Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio21Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio21Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio21Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio21Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio21Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio21Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio21Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio21Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio21Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio21Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio21Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio21Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio21 {
    #[inline(always)]
    fn default() -> Pio21 {
        Pio21(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio210(pub u32);
impl Pio210 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio210Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio210Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio210Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio210Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio210Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio210Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio210Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio210Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio210Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio210Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio210Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio210Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio210Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio210Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio210Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio210Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio210Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio210Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio210Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio210Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio210Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio210Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio210Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio210Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio210Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio210Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio210Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio210 {
    #[inline(always)]
    fn default() -> Pio210 {
        Pio210(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio211(pub u32);
impl Pio211 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio211Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio211Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio211Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio211Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio211Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio211Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio211Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio211Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio211Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio211Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio211Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio211Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio211Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio211Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio211Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio211Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio211Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio211Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio211Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio211Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio211Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio211Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio211Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio211Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio211Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio211Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio211Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio211 {
    #[inline(always)]
    fn default() -> Pio211 {
        Pio211(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio212(pub u32);
impl Pio212 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio212Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio212Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio212Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio212Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio212Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio212Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio212Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio212Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio212Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio212Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio212Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio212Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio212Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio212Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio212Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio212Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio212Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio212Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio212Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio212Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio212Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio212Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio212Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio212Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio212Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio212Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio212Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio212 {
    #[inline(always)]
    fn default() -> Pio212 {
        Pio212(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio213(pub u32);
impl Pio213 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio213Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio213Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio213Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio213Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio213Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio213Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio213Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio213Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio213Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio213Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio213Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio213Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio213Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio213Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio213Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio213Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio213Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio213Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio213Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio213Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio213Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio213Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio213Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio213Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio213Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio213Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio213Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio213 {
    #[inline(always)]
    fn default() -> Pio213 {
        Pio213(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio214(pub u32);
impl Pio214 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio214Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio214Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio214Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio214Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio214Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio214Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio214Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio214Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio214Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio214Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio214Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio214Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio214Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio214Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio214Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio214Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio214Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio214Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio214Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio214Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio214Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio214Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio214Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio214Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio214Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio214Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio214Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio214 {
    #[inline(always)]
    fn default() -> Pio214 {
        Pio214(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio215(pub u32);
impl Pio215 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio215Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio215Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio215Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio215Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio215Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio215Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio215Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio215Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio215Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio215Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio215Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio215Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio215Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio215Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio215Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio215Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio215Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio215Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio215Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio215Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio215Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio215Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio215Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio215Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio215Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio215Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio215Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio215 {
    #[inline(always)]
    fn default() -> Pio215 {
        Pio215(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio216(pub u32);
impl Pio216 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio216Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio216Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio216Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio216Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio216Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio216Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio216Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio216Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio216Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio216Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio216Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio216Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio216Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio216Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio216Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio216Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio216Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio216Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio216Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio216Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio216Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio216Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio216Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio216Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio216Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio216Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio216Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio216 {
    #[inline(always)]
    fn default() -> Pio216 {
        Pio216(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio217(pub u32);
impl Pio217 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio217Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio217Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio217Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio217Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio217Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio217Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio217Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio217Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio217Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio217Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio217Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio217Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio217Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio217Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio217Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio217Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio217Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio217Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio217Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio217Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio217Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio217Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio217Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio217Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio217Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio217Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio217Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio217 {
    #[inline(always)]
    fn default() -> Pio217 {
        Pio217(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio218(pub u32);
impl Pio218 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio218Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio218Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio218Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio218Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio218Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio218Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio218Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio218Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio218Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio218Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio218Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio218Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio218Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio218Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio218Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio218Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio218Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio218Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio218Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio218Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio218Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio218Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio218Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio218Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio218Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio218Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio218Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio218 {
    #[inline(always)]
    fn default() -> Pio218 {
        Pio218(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio219(pub u32);
impl Pio219 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio219Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio219Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio219Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio219Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio219Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio219Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio219Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio219Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio219Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio219Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio219Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio219Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio219Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio219Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio219Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio219Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio219Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio219Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio219Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio219Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio219Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio219Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio219Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio219Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio219Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio219Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio219Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio219 {
    #[inline(always)]
    fn default() -> Pio219 {
        Pio219(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio22(pub u32);
impl Pio22 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio22Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio22Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio22Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio22Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio22Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio22Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio22Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio22Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio22Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio22Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio22Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio22Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio22Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio22Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio22Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio22Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio22Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio22Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio22Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio22Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio22Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio22Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio22Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio22Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio22Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio22Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio22Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio22 {
    #[inline(always)]
    fn default() -> Pio22 {
        Pio22(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio220(pub u32);
impl Pio220 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio220Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio220Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio220Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio220Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio220Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio220Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio220Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio220Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio220Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio220Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio220Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio220Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio220Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio220Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio220Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio220Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio220Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio220Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio220Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio220Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio220Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio220Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio220Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio220Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio220Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio220Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio220Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio220 {
    #[inline(always)]
    fn default() -> Pio220 {
        Pio220(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio221(pub u32);
impl Pio221 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio221Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio221Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio221Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio221Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio221Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio221Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio221Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio221Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio221Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio221Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio221Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio221Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio221Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio221Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio221Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio221Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio221Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio221Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio221Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio221Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio221Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio221Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio221Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio221Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio221Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio221Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio221Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio221 {
    #[inline(always)]
    fn default() -> Pio221 {
        Pio221(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio222(pub u32);
impl Pio222 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio222Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio222Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio222Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio222Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio222Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio222Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio222Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio222Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio222Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio222Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio222Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio222Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio222Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio222Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio222Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio222Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio222Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio222Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio222Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio222Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio222Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio222Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio222Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio222Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio222Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio222Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio222Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio222 {
    #[inline(always)]
    fn default() -> Pio222 {
        Pio222(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio223(pub u32);
impl Pio223 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio223Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio223Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio223Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio223Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio223Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio223Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio223Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio223Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio223Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio223Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio223Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio223Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio223Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio223Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio223Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio223Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio223Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio223Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio223Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio223Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio223Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio223Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio223Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio223Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio223Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio223Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio223Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio223 {
    #[inline(always)]
    fn default() -> Pio223 {
        Pio223(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio224(pub u32);
impl Pio224 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio224Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio224Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio224Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio224Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio224Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio224Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio224Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio224Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio224Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio224Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio224Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio224Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio224Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio224Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio224Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio224Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio224Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio224Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio224Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio224Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio224Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio224Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio224Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio224Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio224Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio224Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio224Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio224 {
    #[inline(always)]
    fn default() -> Pio224 {
        Pio224(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio225(pub u32);
impl Pio225 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio225Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio225Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio225Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio225Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio225Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio225Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio225Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio225Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio225Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio225Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio225Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio225Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio225Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio225Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio225Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio225Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio225Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio225Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio225Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio225Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio225Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio225Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio225Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio225Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio225Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio225Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio225Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio225 {
    #[inline(always)]
    fn default() -> Pio225 {
        Pio225(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio226(pub u32);
impl Pio226 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio226Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio226Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio226Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio226Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio226Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio226Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio226Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio226Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio226Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio226Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio226Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio226Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio226Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio226Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio226Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio226Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio226Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio226Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio226Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio226Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio226Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio226Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio226Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio226Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio226Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio226Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio226Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio226 {
    #[inline(always)]
    fn default() -> Pio226 {
        Pio226(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio227(pub u32);
impl Pio227 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio227Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio227Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio227Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio227Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio227Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio227Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio227Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio227Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio227Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio227Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio227Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio227Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio227Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio227Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio227Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio227Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio227Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio227Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio227Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio227Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio227Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio227Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio227Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio227Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio227Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio227Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio227Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio227 {
    #[inline(always)]
    fn default() -> Pio227 {
        Pio227(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio228(pub u32);
impl Pio228 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio228Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio228Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio228Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio228Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio228Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio228Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio228Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio228Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio228Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio228Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio228Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio228Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio228Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio228Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio228Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio228Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio228Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio228Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio228Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio228Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio228Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio228Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio228Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio228Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio228Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio228Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio228Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio228 {
    #[inline(always)]
    fn default() -> Pio228 {
        Pio228(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio229(pub u32);
impl Pio229 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio229Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio229Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio229Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio229Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio229Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio229Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio229Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio229Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio229Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio229Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio229Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio229Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio229Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio229Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio229Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio229Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio229Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio229Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio229Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio229Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio229Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio229Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio229Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio229Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio229Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio229Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio229Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio229 {
    #[inline(always)]
    fn default() -> Pio229 {
        Pio229(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio23(pub u32);
impl Pio23 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio23Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio23Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio23Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio23Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio23Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio23Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio23Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio23Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio23Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio23Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio23Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio23Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio23Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio23Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio23Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio23Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio23Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio23Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio23Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio23Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio23Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio23Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio23Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio23Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio23Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio23Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio23Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio23 {
    #[inline(always)]
    fn default() -> Pio23 {
        Pio23(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio230(pub u32);
impl Pio230 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio230Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio230Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio230Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio230Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio230Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio230Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio230Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio230Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio230Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio230Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio230Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio230Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio230Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio230Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio230Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio230Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio230Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio230Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio230Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio230Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio230Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio230Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio230Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio230Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio230Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio230Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio230Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio230 {
    #[inline(always)]
    fn default() -> Pio230 {
        Pio230(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio231(pub u32);
impl Pio231 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio231Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio231Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio231Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio231Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio231Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio231Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio231Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio231Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio231Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio231Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio231Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio231Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio231Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio231Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio231Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio231Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio231Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio231Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio231Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio231Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio231Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio231Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio231Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio231Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio231Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio231Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio231Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio231 {
    #[inline(always)]
    fn default() -> Pio231 {
        Pio231(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio24(pub u32);
impl Pio24 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio24Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio24Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio24Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio24Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio24Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio24Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio24Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio24Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio24Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio24Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio24Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio24Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio24Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio24Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio24Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio24Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio24Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio24Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio24Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio24Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio24Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio24Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio24Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio24Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio24Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio24Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio24Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio24 {
    #[inline(always)]
    fn default() -> Pio24 {
        Pio24(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio25(pub u32);
impl Pio25 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio25Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio25Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio25Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio25Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio25Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio25Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio25Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio25Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio25Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio25Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio25Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio25Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio25Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio25Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio25Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio25Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio25Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio25Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio25Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio25Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio25Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio25Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio25Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio25Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio25Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio25Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio25Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio25 {
    #[inline(always)]
    fn default() -> Pio25 {
        Pio25(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio26(pub u32);
impl Pio26 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio26Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio26Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio26Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio26Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio26Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio26Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio26Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio26Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio26Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio26Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio26Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio26Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio26Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio26Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio26Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio26Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio26Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio26Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio26Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio26Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio26Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio26Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio26Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio26Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio26Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio26Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio26Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio26 {
    #[inline(always)]
    fn default() -> Pio26 {
        Pio26(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio27(pub u32);
impl Pio27 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio27Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio27Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio27Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio27Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio27Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio27Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio27Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio27Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio27Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio27Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio27Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio27Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio27Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio27Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio27Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio27Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio27Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio27Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio27Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio27Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio27Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio27Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio27Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio27Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio27Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio27Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio27Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio27 {
    #[inline(always)]
    fn default() -> Pio27 {
        Pio27(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio28(pub u32);
impl Pio28 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio28Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio28Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio28Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio28Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio28Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio28Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio28Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio28Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio28Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio28Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio28Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio28Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio28Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio28Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio28Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio28Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio28Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio28Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio28Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio28Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio28Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio28Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio28Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio28Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio28Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio28Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio28Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio28 {
    #[inline(always)]
    fn default() -> Pio28 {
        Pio28(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio29(pub u32);
impl Pio29 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio29Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio29Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio29Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio29Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio29Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio29Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio29Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio29Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio29Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio29Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio29Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio29Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio29Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio29Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio29Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio29Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio29Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio29Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio29Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio29Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio29Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio29Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio29Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio29Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio29Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio29Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio29Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio29 {
    #[inline(always)]
    fn default() -> Pio29 {
        Pio29(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio30(pub u32);
impl Pio30 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio30Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio30Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio30Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio30Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio30Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio30Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio30Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio30Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio30Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio30Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio30Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio30Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio30Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio30Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio30Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio30Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio30Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio30Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio30Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio30Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio30Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio30Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio30Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio30Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio30Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio30Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio30Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio30 {
    #[inline(always)]
    fn default() -> Pio30 {
        Pio30(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio31(pub u32);
impl Pio31 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio31Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio31Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio31Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio31Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio31Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio31Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio31Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio31Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio31Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio31Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio31Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio31Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio31Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio31Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio31Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio31Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio31Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio31Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio31Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio31Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio31Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio31Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio31Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio31Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio31Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio31Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio31Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio31 {
    #[inline(always)]
    fn default() -> Pio31 {
        Pio31(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio310(pub u32);
impl Pio310 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio310Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio310Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio310Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio310Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio310Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio310Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio310Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio310Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio310Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio310Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio310Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio310Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio310Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio310Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio310Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio310Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio310Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio310Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio310Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio310Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio310Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio310Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio310Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio310Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio310Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio310Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio310Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio310 {
    #[inline(always)]
    fn default() -> Pio310 {
        Pio310(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio311(pub u32);
impl Pio311 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio311Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio311Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio311Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio311Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio311Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio311Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio311Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio311Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio311Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio311Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio311Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio311Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio311Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio311Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio311Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio311Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio311Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio311Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio311Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio311Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio311Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio311Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio311Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio311Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio311Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio311Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio311Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio311 {
    #[inline(always)]
    fn default() -> Pio311 {
        Pio311(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio312(pub u32);
impl Pio312 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio312Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio312Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio312Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio312Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio312Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio312Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio312Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio312Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio312Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio312Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio312Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio312Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio312Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio312Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio312Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio312Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio312Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio312Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio312Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio312Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio312Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio312Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio312Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio312Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio312Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio312Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio312Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio312 {
    #[inline(always)]
    fn default() -> Pio312 {
        Pio312(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio313(pub u32);
impl Pio313 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio313Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio313Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio313Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio313Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio313Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio313Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio313Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio313Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio313Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio313Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio313Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio313Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio313Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio313Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio313Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio313Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio313Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio313Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio313Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio313Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio313Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio313Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio313Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio313Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio313Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio313Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio313Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio313 {
    #[inline(always)]
    fn default() -> Pio313 {
        Pio313(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio314(pub u32);
impl Pio314 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio314Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio314Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio314Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio314Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio314Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio314Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio314Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio314Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio314Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio314Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio314Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio314Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio314Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio314Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio314Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio314Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio314Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio314Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio314Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio314Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio314Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio314Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio314Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio314Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio314Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio314Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio314Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio314 {
    #[inline(always)]
    fn default() -> Pio314 {
        Pio314(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio315(pub u32);
impl Pio315 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio315Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio315Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio315Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio315Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio315Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio315Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio315Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio315Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio315Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio315Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio315Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio315Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio315Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio315Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio315Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio315Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio315Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio315Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio315Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio315Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio315Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio315Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio315Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio315Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio315Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio315Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio315Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio315 {
    #[inline(always)]
    fn default() -> Pio315 {
        Pio315(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio316(pub u32);
impl Pio316 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio316Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio316Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio316Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio316Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio316Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio316Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio316Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio316Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio316Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio316Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio316Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio316Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio316Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio316Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio316Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio316Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio316Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio316Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio316Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio316Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio316Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio316Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio316Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio316Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio316Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio316Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio316Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio316 {
    #[inline(always)]
    fn default() -> Pio316 {
        Pio316(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio317(pub u32);
impl Pio317 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio317Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio317Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio317Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio317Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio317Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio317Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio317Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio317Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio317Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio317Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio317Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio317Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio317Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio317Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio317Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio317Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio317Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio317Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio317Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio317Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio317Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio317Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio317Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio317Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio317Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio317Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio317Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio317 {
    #[inline(always)]
    fn default() -> Pio317 {
        Pio317(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio318(pub u32);
impl Pio318 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio318Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio318Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio318Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio318Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio318Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio318Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio318Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio318Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio318Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio318Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio318Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio318Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio318Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio318Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio318Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio318Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio318Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio318Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio318Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio318Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio318Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio318Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio318Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio318Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio318Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio318Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio318Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio318 {
    #[inline(always)]
    fn default() -> Pio318 {
        Pio318(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio319(pub u32);
impl Pio319 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio319Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio319Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio319Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio319Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio319Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio319Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio319Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio319Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio319Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio319Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio319Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio319Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio319Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio319Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio319Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio319Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio319Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio319Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio319Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio319Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio319Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio319Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio319Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio319Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio319Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio319Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio319Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio319 {
    #[inline(always)]
    fn default() -> Pio319 {
        Pio319(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio32(pub u32);
impl Pio32 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio32Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio32Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio32Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio32Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio32Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio32Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio32Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio32Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio32Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio32Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio32Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio32Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio32Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio32Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio32Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio32Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio32Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio32Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio32Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio32Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio32Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio32Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio32Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio32Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio32Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio32Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio32Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio32 {
    #[inline(always)]
    fn default() -> Pio32 {
        Pio32(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio320(pub u32);
impl Pio320 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio320Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio320Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio320Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio320Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio320Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio320Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio320Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio320Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio320Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio320Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio320Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio320Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio320Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio320Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio320Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio320Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio320Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio320Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio320Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio320Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio320Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio320Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio320Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio320Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio320Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio320Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio320Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio320 {
    #[inline(always)]
    fn default() -> Pio320 {
        Pio320(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio321(pub u32);
impl Pio321 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio321Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio321Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio321Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio321Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio321Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio321Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio321Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio321Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio321Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio321Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio321Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio321Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio321Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio321Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio321Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio321Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio321Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio321Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio321Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio321Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio321Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio321Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio321Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio321Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio321Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio321Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio321Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio321 {
    #[inline(always)]
    fn default() -> Pio321 {
        Pio321(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio322(pub u32);
impl Pio322 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio322Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio322Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio322Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio322Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio322Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio322Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio322Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio322Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio322Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio322Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio322Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio322Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio322Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio322Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio322Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio322Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio322Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio322Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio322Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio322Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio322Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio322Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio322Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio322Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio322Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio322Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio322Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio322 {
    #[inline(always)]
    fn default() -> Pio322 {
        Pio322(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio323(pub u32);
impl Pio323 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio323Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio323Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio323Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio323Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio323Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio323Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio323Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio323Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio323Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio323Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio323Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio323Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio323Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio323Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio323Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio323Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio323Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio323Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio323Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio323Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio323Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio323Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio323Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio323Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio323Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio323Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio323Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio323 {
    #[inline(always)]
    fn default() -> Pio323 {
        Pio323(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio324(pub u32);
impl Pio324 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio324Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio324Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio324Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio324Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio324Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio324Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio324Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio324Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio324Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio324Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio324Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio324Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio324Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio324Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio324Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio324Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio324Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio324Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio324Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio324Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio324Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio324Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio324Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio324Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio324Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio324Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio324Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio324 {
    #[inline(always)]
    fn default() -> Pio324 {
        Pio324(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio325(pub u32);
impl Pio325 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio325Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio325Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio325Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio325Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio325Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio325Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio325Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio325Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio325Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio325Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio325Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio325Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio325Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio325Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio325Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio325Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio325Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio325Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio325Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio325Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio325Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio325Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio325Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio325Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio325Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio325Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio325Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio325 {
    #[inline(always)]
    fn default() -> Pio325 {
        Pio325(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio326(pub u32);
impl Pio326 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio326Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio326Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio326Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio326Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio326Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio326Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio326Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio326Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio326Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio326Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio326Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio326Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio326Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio326Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio326Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio326Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio326Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio326Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio326Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio326Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio326Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio326Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio326Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio326Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio326Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio326Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio326Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio326 {
    #[inline(always)]
    fn default() -> Pio326 {
        Pio326(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio327(pub u32);
impl Pio327 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio327Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio327Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio327Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio327Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio327Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio327Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio327Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio327Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio327Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio327Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio327Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio327Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio327Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio327Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio327Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio327Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio327Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio327Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio327Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio327Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio327Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio327Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio327Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio327Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio327Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio327Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio327Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio327 {
    #[inline(always)]
    fn default() -> Pio327 {
        Pio327(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio328(pub u32);
impl Pio328 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio328Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio328Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio328Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio328Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio328Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio328Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio328Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio328Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio328Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio328Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio328Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio328Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio328Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio328Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio328Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio328Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio328Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio328Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio328Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio328Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio328Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio328Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio328Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio328Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio328Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio328Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio328Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio328 {
    #[inline(always)]
    fn default() -> Pio328 {
        Pio328(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio329(pub u32);
impl Pio329 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio329Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio329Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio329Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio329Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio329Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio329Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio329Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio329Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio329Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio329Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio329Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio329Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio329Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio329Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio329Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio329Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio329Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio329Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio329Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio329Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio329Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio329Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio329Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio329Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio329Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio329Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio329Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio329 {
    #[inline(always)]
    fn default() -> Pio329 {
        Pio329(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio33(pub u32);
impl Pio33 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio33Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio33Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio33Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio33Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio33Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio33Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio33Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio33Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio33Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio33Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio33Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio33Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio33Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio33Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio33Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio33Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio33Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio33Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio33Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio33Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio33Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio33Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio33Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio33Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio33Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio33Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio33Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio33 {
    #[inline(always)]
    fn default() -> Pio33 {
        Pio33(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio330(pub u32);
impl Pio330 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio330Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio330Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio330Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio330Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio330Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio330Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio330Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio330Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio330Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio330Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio330Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio330Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio330Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio330Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio330Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio330Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio330Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio330Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio330Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio330Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio330Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio330Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio330Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio330Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio330Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio330Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio330Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio330 {
    #[inline(always)]
    fn default() -> Pio330 {
        Pio330(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio331(pub u32);
impl Pio331 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio331Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio331Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio331Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio331Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio331Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio331Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio331Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio331Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio331Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio331Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio331Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio331Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio331Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio331Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio331Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio331Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio331Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio331Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio331Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio331Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio331Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio331Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio331Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio331Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio331Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio331Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio331Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio331 {
    #[inline(always)]
    fn default() -> Pio331 {
        Pio331(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio34(pub u32);
impl Pio34 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio34Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio34Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio34Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio34Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio34Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio34Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio34Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio34Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio34Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio34Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio34Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio34Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio34Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio34Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio34Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio34Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio34Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio34Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio34Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio34Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio34Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio34Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio34Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio34Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio34Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio34Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio34Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio34 {
    #[inline(always)]
    fn default() -> Pio34 {
        Pio34(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio35(pub u32);
impl Pio35 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio35Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio35Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio35Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio35Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio35Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio35Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio35Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio35Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio35Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio35Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio35Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio35Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio35Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio35Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio35Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio35Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio35Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio35Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio35Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio35Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio35Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio35Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio35Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio35Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio35Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio35Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio35Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio35 {
    #[inline(always)]
    fn default() -> Pio35 {
        Pio35(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio36(pub u32);
impl Pio36 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio36Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio36Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio36Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio36Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio36Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio36Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio36Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio36Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio36Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio36Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio36Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio36Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio36Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio36Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio36Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio36Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio36Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio36Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio36Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio36Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio36Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio36Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio36Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio36Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio36Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio36Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio36Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio36 {
    #[inline(always)]
    fn default() -> Pio36 {
        Pio36(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio37(pub u32);
impl Pio37 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio37Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio37Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio37Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio37Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio37Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio37Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio37Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio37Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio37Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio37Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio37Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio37Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio37Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio37Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio37Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio37Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio37Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio37Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio37Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio37Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio37Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio37Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio37Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio37Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio37Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio37Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio37Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio37 {
    #[inline(always)]
    fn default() -> Pio37 {
        Pio37(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio38(pub u32);
impl Pio38 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio38Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio38Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio38Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio38Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio38Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio38Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio38Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio38Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio38Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio38Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio38Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio38Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio38Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio38Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio38Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio38Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio38Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio38Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio38Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio38Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio38Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio38Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio38Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio38Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio38Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio38Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio38Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio38 {
    #[inline(always)]
    fn default() -> Pio38 {
        Pio38(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio39(pub u32);
impl Pio39 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio39Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio39Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio39Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio39Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio39Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio39Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio39Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio39Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio39Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio39Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio39Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio39Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio39Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio39Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio39Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio39Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio39Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio39Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio39Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio39Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio39Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio39Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio39Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio39Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio39Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio39Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio39Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio39 {
    #[inline(always)]
    fn default() -> Pio39 {
        Pio39(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio40(pub u32);
impl Pio40 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio40Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio40Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio40Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio40Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio40Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio40Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio40Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio40Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio40Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio40Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio40Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio40Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio40Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio40Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio40Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio40Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio40Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio40Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio40Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio40Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio40Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio40Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio40Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio40Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio40Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio40Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio40Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio40 {
    #[inline(always)]
    fn default() -> Pio40 {
        Pio40(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio41(pub u32);
impl Pio41 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio41Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio41Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio41Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio41Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio41Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio41Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio41Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio41Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio41Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio41Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio41Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio41Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio41Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio41Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio41Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio41Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio41Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio41Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio41Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio41Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio41Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio41Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio41Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio41Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio41Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio41Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio41Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio41 {
    #[inline(always)]
    fn default() -> Pio41 {
        Pio41(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio410(pub u32);
impl Pio410 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio410Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio410Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio410Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio410Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio410Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio410Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio410Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio410Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio410Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio410Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio410Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio410Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio410Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio410Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio410Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio410Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio410Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio410Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio410Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio410Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio410Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio410Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio410Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio410Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio410Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio410Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio410Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio410 {
    #[inline(always)]
    fn default() -> Pio410 {
        Pio410(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio411(pub u32);
impl Pio411 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio411Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio411Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio411Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio411Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio411Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio411Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio411Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio411Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio411Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio411Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio411Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio411Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio411Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio411Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio411Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio411Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio411Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio411Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio411Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio411Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio411Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio411Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio411Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio411Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio411Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio411Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio411Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio411 {
    #[inline(always)]
    fn default() -> Pio411 {
        Pio411(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio412(pub u32);
impl Pio412 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio412Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio412Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio412Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio412Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio412Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio412Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio412Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio412Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio412Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio412Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio412Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio412Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio412Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio412Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio412Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio412Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio412Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio412Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio412Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio412Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio412Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio412Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio412Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio412Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio412Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio412Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio412Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio412 {
    #[inline(always)]
    fn default() -> Pio412 {
        Pio412(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio413(pub u32);
impl Pio413 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio413Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio413Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio413Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio413Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio413Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio413Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio413Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio413Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio413Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio413Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio413Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio413Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio413Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio413Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio413Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio413Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio413Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio413Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio413Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio413Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio413Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio413Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio413Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio413Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio413Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio413Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio413Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio413 {
    #[inline(always)]
    fn default() -> Pio413 {
        Pio413(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio414(pub u32);
impl Pio414 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio414Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio414Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio414Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio414Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio414Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio414Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio414Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio414Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio414Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio414Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio414Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio414Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio414Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio414Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio414Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio414Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio414Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio414Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio414Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio414Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio414Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio414Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio414Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio414Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio414Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio414Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio414Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio414 {
    #[inline(always)]
    fn default() -> Pio414 {
        Pio414(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio415(pub u32);
impl Pio415 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio415Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio415Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio415Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio415Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio415Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio415Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio415Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio415Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio415Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio415Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio415Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio415Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio415Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio415Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio415Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio415Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio415Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio415Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio415Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio415Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio415Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio415Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio415Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio415Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio415Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio415Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio415Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio415 {
    #[inline(always)]
    fn default() -> Pio415 {
        Pio415(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio416(pub u32);
impl Pio416 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio416Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio416Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio416Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio416Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio416Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio416Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio416Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio416Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio416Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio416Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio416Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio416Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio416Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio416Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio416Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio416Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio416Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio416Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio416Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio416Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio416Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio416Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio416Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio416Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio416Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio416Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio416Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio416 {
    #[inline(always)]
    fn default() -> Pio416 {
        Pio416(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio417(pub u32);
impl Pio417 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio417Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio417Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio417Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio417Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio417Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio417Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio417Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio417Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio417Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio417Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio417Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio417Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio417Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio417Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio417Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio417Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio417Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio417Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio417Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio417Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio417Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio417Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio417Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio417Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio417Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio417Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio417Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio417 {
    #[inline(always)]
    fn default() -> Pio417 {
        Pio417(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio418(pub u32);
impl Pio418 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio418Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio418Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio418Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio418Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio418Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio418Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio418Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio418Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio418Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio418Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio418Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio418Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio418Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio418Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio418Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio418Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio418Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio418Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio418Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio418Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio418Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio418Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio418Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio418Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio418Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio418Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio418Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio418 {
    #[inline(always)]
    fn default() -> Pio418 {
        Pio418(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio419(pub u32);
impl Pio419 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio419Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio419Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio419Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio419Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio419Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio419Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio419Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio419Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio419Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio419Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio419Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio419Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio419Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio419Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio419Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio419Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio419Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio419Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio419Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio419Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio419Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio419Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio419Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio419Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio419Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio419Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio419Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio419 {
    #[inline(always)]
    fn default() -> Pio419 {
        Pio419(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio42(pub u32);
impl Pio42 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio42Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio42Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio42Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio42Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio42Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio42Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio42Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio42Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio42Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio42Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio42Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio42Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio42Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio42Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio42Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio42Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio42Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio42Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio42Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio42Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio42Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio42Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio42Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio42Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio42Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio42Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio42Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio42 {
    #[inline(always)]
    fn default() -> Pio42 {
        Pio42(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio420(pub u32);
impl Pio420 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio420Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio420Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio420Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio420Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio420Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio420Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio420Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio420Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio420Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio420Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio420Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio420Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio420Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio420Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio420Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio420Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio420Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio420Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio420Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio420Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio420Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio420Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio420Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio420Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio420Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio420Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio420Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio420 {
    #[inline(always)]
    fn default() -> Pio420 {
        Pio420(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio421(pub u32);
impl Pio421 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio421Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio421Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio421Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio421Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio421Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio421Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio421Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio421Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio421Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio421Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio421Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio421Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio421Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio421Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio421Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio421Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio421Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio421Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio421Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio421Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio421Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio421Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio421Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio421Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio421Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio421Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio421Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio421 {
    #[inline(always)]
    fn default() -> Pio421 {
        Pio421(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio422(pub u32);
impl Pio422 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio422Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio422Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio422Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio422Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio422Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio422Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio422Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio422Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio422Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio422Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio422Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio422Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio422Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio422Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio422Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio422Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio422Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio422Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio422Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio422Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio422Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio422Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio422Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio422Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio422Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio422Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio422Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio422 {
    #[inline(always)]
    fn default() -> Pio422 {
        Pio422(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio423(pub u32);
impl Pio423 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio423Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio423Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio423Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio423Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio423Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio423Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio423Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio423Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio423Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio423Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio423Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio423Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio423Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio423Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio423Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio423Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio423Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio423Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio423Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio423Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio423Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio423Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio423Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio423Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio423Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio423Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio423Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio423 {
    #[inline(always)]
    fn default() -> Pio423 {
        Pio423(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio424(pub u32);
impl Pio424 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio424Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio424Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio424Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio424Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio424Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio424Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio424Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio424Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio424Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio424Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio424Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio424Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio424Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio424Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio424Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio424Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio424Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio424Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio424Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio424Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio424Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio424Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio424Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio424Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio424Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio424Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio424Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio424 {
    #[inline(always)]
    fn default() -> Pio424 {
        Pio424(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio425(pub u32);
impl Pio425 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio425Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio425Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio425Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio425Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio425Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio425Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio425Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio425Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio425Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio425Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio425Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio425Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio425Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio425Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio425Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio425Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio425Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio425Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio425Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio425Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio425Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio425Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio425Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio425Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio425Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio425Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio425Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio425 {
    #[inline(always)]
    fn default() -> Pio425 {
        Pio425(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio426(pub u32);
impl Pio426 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio426Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio426Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio426Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio426Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio426Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio426Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio426Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio426Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio426Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio426Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio426Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio426Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio426Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio426Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio426Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio426Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio426Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio426Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio426Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio426Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio426Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio426Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio426Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio426Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio426Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio426Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio426Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio426 {
    #[inline(always)]
    fn default() -> Pio426 {
        Pio426(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio427(pub u32);
impl Pio427 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio427Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio427Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio427Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio427Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio427Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio427Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio427Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio427Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio427Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio427Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio427Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio427Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio427Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio427Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio427Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio427Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio427Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio427Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio427Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio427Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio427Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio427Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio427Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio427Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio427Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio427Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio427Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio427 {
    #[inline(always)]
    fn default() -> Pio427 {
        Pio427(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio428(pub u32);
impl Pio428 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio428Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio428Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio428Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio428Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio428Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio428Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio428Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio428Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio428Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio428Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio428Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio428Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio428Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio428Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio428Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio428Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio428Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio428Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio428Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio428Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio428Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio428Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio428Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio428Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio428Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio428Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio428Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio428 {
    #[inline(always)]
    fn default() -> Pio428 {
        Pio428(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio429(pub u32);
impl Pio429 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio429Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio429Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio429Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio429Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio429Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio429Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio429Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio429Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio429Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio429Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio429Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio429Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio429Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio429Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio429Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio429Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio429Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio429Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio429Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio429Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio429Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio429Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio429Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio429Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio429Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio429Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio429Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio429 {
    #[inline(always)]
    fn default() -> Pio429 {
        Pio429(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio43(pub u32);
impl Pio43 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio43Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio43Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio43Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio43Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio43Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio43Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio43Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio43Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio43Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio43Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio43Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio43Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio43Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio43Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio43Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio43Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio43Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio43Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio43Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio43Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio43Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio43Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio43Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio43Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio43Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio43Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio43Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio43 {
    #[inline(always)]
    fn default() -> Pio43 {
        Pio43(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio430(pub u32);
impl Pio430 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio430Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio430Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio430Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio430Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio430Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio430Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio430Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio430Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio430Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio430Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio430Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio430Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio430Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio430Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio430Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio430Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio430Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio430Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio430Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio430Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio430Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio430Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio430Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio430Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio430Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio430Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio430Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio430 {
    #[inline(always)]
    fn default() -> Pio430 {
        Pio430(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio431(pub u32);
impl Pio431 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio431Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio431Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio431Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio431Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio431Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio431Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio431Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio431Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio431Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio431Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio431Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio431Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio431Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio431Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio431Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio431Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio431Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio431Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio431Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio431Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio431Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio431Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio431Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio431Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio431Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio431Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio431Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio431 {
    #[inline(always)]
    fn default() -> Pio431 {
        Pio431(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio44(pub u32);
impl Pio44 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio44Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio44Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio44Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio44Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio44Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio44Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio44Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio44Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio44Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio44Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio44Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio44Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio44Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio44Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio44Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio44Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio44Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio44Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio44Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio44Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio44Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio44Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio44Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio44Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio44Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio44Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio44Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio44 {
    #[inline(always)]
    fn default() -> Pio44 {
        Pio44(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio45(pub u32);
impl Pio45 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio45Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio45Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio45Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio45Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio45Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio45Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio45Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio45Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio45Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio45Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio45Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio45Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio45Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio45Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio45Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio45Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio45Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio45Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio45Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio45Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio45Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio45Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio45Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio45Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio45Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio45Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio45Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio45 {
    #[inline(always)]
    fn default() -> Pio45 {
        Pio45(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio46(pub u32);
impl Pio46 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio46Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio46Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio46Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio46Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio46Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio46Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio46Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio46Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio46Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio46Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio46Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio46Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio46Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio46Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio46Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio46Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio46Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio46Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio46Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio46Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio46Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio46Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio46Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio46Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio46Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio46Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio46Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio46 {
    #[inline(always)]
    fn default() -> Pio46 {
        Pio46(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio47(pub u32);
impl Pio47 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio47Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio47Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio47Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio47Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio47Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio47Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio47Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio47Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio47Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio47Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio47Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio47Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio47Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio47Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio47Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio47Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio47Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio47Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio47Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio47Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio47Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio47Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio47Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio47Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio47Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio47Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio47Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio47 {
    #[inline(always)]
    fn default() -> Pio47 {
        Pio47(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio48(pub u32);
impl Pio48 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio48Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio48Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio48Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio48Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio48Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio48Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio48Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio48Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio48Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio48Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio48Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio48Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio48Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio48Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio48Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio48Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio48Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio48Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio48Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio48Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio48Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio48Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio48Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio48Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio48Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio48Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio48Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio48 {
    #[inline(always)]
    fn default() -> Pio48 {
        Pio48(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio49(pub u32);
impl Pio49 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio49Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio49Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio49Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio49Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio49Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio49Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio49Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio49Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio49Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio49Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio49Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio49Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio49Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio49Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio49Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio49Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio49Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio49Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio49Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio49Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio49Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio49Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio49Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio49Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio49Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio49Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio49Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio49 {
    #[inline(always)]
    fn default() -> Pio49 {
        Pio49(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio50(pub u32);
impl Pio50 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio50Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio50Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio50Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio50Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio50Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio50Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio50Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio50Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio50Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio50Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio50Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio50Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio50Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio50Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio50Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio50Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio50Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio50Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio50Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio50Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio50Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio50Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio50Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio50Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio50Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio50Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio50Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio50 {
    #[inline(always)]
    fn default() -> Pio50 {
        Pio50(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio51(pub u32);
impl Pio51 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio51Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio51Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio51Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio51Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio51Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio51Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio51Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio51Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio51Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio51Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio51Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio51Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio51Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio51Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio51Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio51Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio51Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio51Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio51Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio51Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio51Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio51Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio51Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio51Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio51Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio51Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio51Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio51 {
    #[inline(always)]
    fn default() -> Pio51 {
        Pio51(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio510(pub u32);
impl Pio510 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio510Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio510Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio510Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio510Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio510Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio510Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio510Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio510Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio510Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio510Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio510Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio510Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio510Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio510Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio510Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio510Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio510Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio510Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio510Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio510Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio510Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio510Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio510Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio510Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio510Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio510Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio510Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio510 {
    #[inline(always)]
    fn default() -> Pio510 {
        Pio510(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio511(pub u32);
impl Pio511 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio511Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio511Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio511Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio511Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio511Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio511Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio511Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio511Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio511Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio511Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio511Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio511Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio511Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio511Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio511Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio511Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio511Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio511Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio511Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio511Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio511Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio511Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio511Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio511Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio511Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio511Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio511Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio511 {
    #[inline(always)]
    fn default() -> Pio511 {
        Pio511(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio512(pub u32);
impl Pio512 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio512Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio512Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio512Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio512Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio512Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio512Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio512Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio512Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio512Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio512Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio512Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio512Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio512Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio512Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio512Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio512Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio512Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio512Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio512Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio512Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio512Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio512Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio512Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio512Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio512Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio512Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio512Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio512 {
    #[inline(always)]
    fn default() -> Pio512 {
        Pio512(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio513(pub u32);
impl Pio513 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio513Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio513Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio513Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio513Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio513Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio513Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio513Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio513Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio513Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio513Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio513Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio513Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio513Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio513Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio513Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio513Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio513Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio513Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio513Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio513Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio513Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio513Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio513Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio513Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio513Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio513Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio513Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio513 {
    #[inline(always)]
    fn default() -> Pio513 {
        Pio513(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio514(pub u32);
impl Pio514 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio514Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio514Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio514Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio514Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio514Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio514Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio514Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio514Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio514Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio514Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio514Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio514Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio514Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio514Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio514Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio514Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio514Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio514Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio514Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio514Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio514Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio514Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio514Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio514Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio514Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio514Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio514Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio514 {
    #[inline(always)]
    fn default() -> Pio514 {
        Pio514(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio515(pub u32);
impl Pio515 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio515Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio515Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio515Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio515Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio515Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio515Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio515Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio515Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio515Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio515Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio515Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio515Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio515Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio515Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio515Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio515Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio515Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio515Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio515Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio515Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio515Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio515Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio515Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio515Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio515Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio515Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio515Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio515 {
    #[inline(always)]
    fn default() -> Pio515 {
        Pio515(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio516(pub u32);
impl Pio516 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio516Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio516Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio516Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio516Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio516Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio516Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio516Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio516Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio516Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio516Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio516Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio516Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio516Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio516Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio516Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio516Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio516Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio516Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio516Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio516Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio516Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio516Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio516Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio516Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio516Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio516Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio516Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio516 {
    #[inline(always)]
    fn default() -> Pio516 {
        Pio516(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio517(pub u32);
impl Pio517 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio517Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio517Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio517Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio517Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio517Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio517Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio517Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio517Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio517Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio517Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio517Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio517Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio517Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio517Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio517Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio517Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio517Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio517Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio517Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio517Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio517Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio517Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio517Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio517Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio517Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio517Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio517Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio517 {
    #[inline(always)]
    fn default() -> Pio517 {
        Pio517(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio518(pub u32);
impl Pio518 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio518Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio518Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio518Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio518Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio518Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio518Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio518Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio518Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio518Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio518Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio518Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio518Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio518Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio518Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio518Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio518Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio518Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio518Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio518Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio518Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio518Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio518Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio518Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio518Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio518Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio518Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio518Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio518 {
    #[inline(always)]
    fn default() -> Pio518 {
        Pio518(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio519(pub u32);
impl Pio519 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio519Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio519Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio519Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio519Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio519Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio519Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio519Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio519Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio519Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio519Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio519Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio519Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio519Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio519Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio519Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio519Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio519Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio519Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio519Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio519Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio519Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio519Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio519Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio519Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio519Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio519Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio519Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio519 {
    #[inline(always)]
    fn default() -> Pio519 {
        Pio519(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio52(pub u32);
impl Pio52 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio52Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio52Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio52Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio52Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio52Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio52Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio52Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio52Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio52Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio52Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio52Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio52Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio52Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio52Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio52Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio52Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio52Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio52Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio52Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio52Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio52Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio52Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio52Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio52Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio52Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio52Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio52Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio52 {
    #[inline(always)]
    fn default() -> Pio52 {
        Pio52(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio520(pub u32);
impl Pio520 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio520Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio520Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio520Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio520Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio520Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio520Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio520Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio520Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio520Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio520Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio520Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio520Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio520Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio520Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio520Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio520Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio520Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio520Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio520Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio520Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio520Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio520Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio520Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio520Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio520Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio520Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio520Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio520 {
    #[inline(always)]
    fn default() -> Pio520 {
        Pio520(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio521(pub u32);
impl Pio521 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio521Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio521Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio521Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio521Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio521Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio521Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio521Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio521Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio521Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio521Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio521Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio521Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio521Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio521Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio521Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio521Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio521Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio521Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio521Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio521Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio521Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio521Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio521Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio521Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio521Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio521Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio521Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio521 {
    #[inline(always)]
    fn default() -> Pio521 {
        Pio521(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio522(pub u32);
impl Pio522 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio522Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio522Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio522Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio522Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio522Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio522Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio522Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio522Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio522Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio522Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio522Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio522Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio522Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio522Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio522Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio522Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio522Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio522Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio522Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio522Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio522Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio522Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio522Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio522Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio522Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio522Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio522Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio522 {
    #[inline(always)]
    fn default() -> Pio522 {
        Pio522(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio523(pub u32);
impl Pio523 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio523Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio523Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio523Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio523Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio523Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio523Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio523Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio523Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio523Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio523Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio523Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio523Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio523Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio523Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio523Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio523Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio523Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio523Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio523Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio523Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio523Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio523Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio523Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio523Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio523Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio523Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio523Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio523 {
    #[inline(always)]
    fn default() -> Pio523 {
        Pio523(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio524(pub u32);
impl Pio524 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio524Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio524Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio524Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio524Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio524Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio524Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio524Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio524Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio524Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio524Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio524Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio524Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio524Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio524Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio524Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio524Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio524Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio524Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio524Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio524Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio524Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio524Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio524Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio524Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio524Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio524Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio524Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio524 {
    #[inline(always)]
    fn default() -> Pio524 {
        Pio524(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio525(pub u32);
impl Pio525 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio525Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio525Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio525Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio525Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio525Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio525Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio525Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio525Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio525Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio525Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio525Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio525Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio525Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio525Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio525Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio525Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio525Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio525Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio525Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio525Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio525Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio525Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio525Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio525Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio525Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio525Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio525Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio525 {
    #[inline(always)]
    fn default() -> Pio525 {
        Pio525(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio526(pub u32);
impl Pio526 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio526Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio526Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio526Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio526Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio526Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio526Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio526Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio526Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio526Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio526Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio526Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio526Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio526Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio526Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio526Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio526Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio526Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio526Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio526Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio526Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio526Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio526Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio526Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio526Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio526Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio526Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio526Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio526 {
    #[inline(always)]
    fn default() -> Pio526 {
        Pio526(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio527(pub u32);
impl Pio527 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio527Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio527Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio527Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio527Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio527Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio527Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio527Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio527Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio527Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio527Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio527Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio527Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio527Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio527Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio527Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio527Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio527Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio527Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio527Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio527Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio527Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio527Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio527Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio527Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio527Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio527Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio527Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio527 {
    #[inline(always)]
    fn default() -> Pio527 {
        Pio527(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio528(pub u32);
impl Pio528 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio528Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio528Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio528Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio528Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio528Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio528Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio528Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio528Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio528Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio528Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio528Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio528Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio528Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio528Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio528Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio528Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio528Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio528Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio528Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio528Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio528Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio528Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio528Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio528Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio528Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio528Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio528Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio528 {
    #[inline(always)]
    fn default() -> Pio528 {
        Pio528(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio529(pub u32);
impl Pio529 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio529Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio529Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio529Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio529Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio529Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio529Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio529Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio529Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio529Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio529Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio529Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio529Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio529Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio529Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio529Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio529Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio529Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio529Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio529Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio529Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio529Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio529Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio529Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio529Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio529Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio529Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio529Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio529 {
    #[inline(always)]
    fn default() -> Pio529 {
        Pio529(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio53(pub u32);
impl Pio53 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio53Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio53Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio53Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio53Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio53Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio53Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio53Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio53Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio53Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio53Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio53Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio53Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio53Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio53Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio53Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio53Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio53Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio53Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio53Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio53Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio53Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio53Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio53Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio53Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio53Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio53Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio53Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio53 {
    #[inline(always)]
    fn default() -> Pio53 {
        Pio53(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio530(pub u32);
impl Pio530 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio530Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio530Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio530Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio530Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio530Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio530Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio530Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio530Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio530Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio530Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio530Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio530Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio530Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio530Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio530Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio530Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio530Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio530Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio530Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio530Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio530Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio530Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio530Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio530Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio530Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio530Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio530Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio530 {
    #[inline(always)]
    fn default() -> Pio530 {
        Pio530(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio531(pub u32);
impl Pio531 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio531Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio531Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio531Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio531Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio531Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio531Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio531Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio531Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio531Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio531Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio531Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio531Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio531Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio531Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio531Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio531Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio531Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio531Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio531Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio531Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio531Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio531Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio531Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio531Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio531Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio531Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio531Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio531 {
    #[inline(always)]
    fn default() -> Pio531 {
        Pio531(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio54(pub u32);
impl Pio54 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio54Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio54Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio54Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio54Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio54Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio54Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio54Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio54Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio54Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio54Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio54Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio54Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio54Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio54Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio54Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio54Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio54Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio54Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio54Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio54Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio54Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio54Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio54Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio54Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio54Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio54Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio54Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio54 {
    #[inline(always)]
    fn default() -> Pio54 {
        Pio54(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio55(pub u32);
impl Pio55 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio55Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio55Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio55Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio55Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio55Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio55Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio55Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio55Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio55Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio55Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio55Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio55Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio55Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio55Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio55Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio55Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio55Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio55Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio55Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio55Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio55Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio55Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio55Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio55Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio55Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio55Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio55Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio55 {
    #[inline(always)]
    fn default() -> Pio55 {
        Pio55(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio56(pub u32);
impl Pio56 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio56Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio56Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio56Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio56Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio56Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio56Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio56Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio56Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio56Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio56Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio56Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio56Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio56Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio56Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio56Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio56Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio56Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio56Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio56Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio56Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio56Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio56Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio56Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio56Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio56Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio56Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio56Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio56 {
    #[inline(always)]
    fn default() -> Pio56 {
        Pio56(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio57(pub u32);
impl Pio57 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio57Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio57Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio57Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio57Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio57Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio57Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio57Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio57Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio57Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio57Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio57Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio57Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio57Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio57Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio57Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio57Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio57Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio57Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio57Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio57Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio57Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio57Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio57Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio57Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio57Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio57Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio57Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio57 {
    #[inline(always)]
    fn default() -> Pio57 {
        Pio57(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio58(pub u32);
impl Pio58 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio58Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio58Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio58Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio58Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio58Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio58Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio58Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio58Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio58Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio58Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio58Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio58Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio58Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio58Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio58Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio58Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio58Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio58Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio58Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio58Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio58Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio58Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio58Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio58Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio58Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio58Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio58Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio58 {
    #[inline(always)]
    fn default() -> Pio58 {
        Pio58(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio59(pub u32);
impl Pio59 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio59Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio59Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio59Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio59Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio59Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio59Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio59Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio59Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio59Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio59Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio59Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio59Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio59Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio59Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio59Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio59Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio59Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio59Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio59Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio59Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio59Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio59Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio59Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio59Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio59Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio59Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio59Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio59 {
    #[inline(always)]
    fn default() -> Pio59 {
        Pio59(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio60(pub u32);
impl Pio60 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio60Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio60Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio60Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio60Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio60Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio60Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio60Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio60Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio60Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio60Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio60Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio60Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio60Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio60Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio60Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio60Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio60Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio60Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio60Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio60Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio60Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio60Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio60Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio60Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio60Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio60Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio60Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio60 {
    #[inline(always)]
    fn default() -> Pio60 {
        Pio60(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio61(pub u32);
impl Pio61 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio61Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio61Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio61Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio61Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio61Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio61Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio61Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio61Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio61Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio61Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio61Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio61Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio61Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio61Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio61Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio61Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio61Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio61Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio61Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio61Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio61Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio61Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio61Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio61Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio61Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio61Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio61Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio61 {
    #[inline(always)]
    fn default() -> Pio61 {
        Pio61(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio610(pub u32);
impl Pio610 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio610Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio610Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio610Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio610Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio610Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio610Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio610Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio610Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio610Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio610Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio610Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio610Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio610Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio610Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio610Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio610Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio610Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio610Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio610Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio610Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio610Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio610Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio610Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio610Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio610Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio610Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio610Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio610 {
    #[inline(always)]
    fn default() -> Pio610 {
        Pio610(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio611(pub u32);
impl Pio611 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio611Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio611Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio611Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio611Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio611Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio611Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio611Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio611Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio611Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio611Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio611Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio611Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio611Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio611Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio611Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio611Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio611Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio611Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio611Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio611Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio611Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio611Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio611Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio611Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio611Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio611Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio611Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio611 {
    #[inline(always)]
    fn default() -> Pio611 {
        Pio611(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio612(pub u32);
impl Pio612 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio612Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio612Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio612Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio612Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio612Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio612Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio612Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio612Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio612Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio612Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio612Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio612Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio612Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio612Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio612Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio612Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio612Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio612Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio612Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio612Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio612Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio612Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio612Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio612Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio612Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio612Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio612Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio612 {
    #[inline(always)]
    fn default() -> Pio612 {
        Pio612(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio613(pub u32);
impl Pio613 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio613Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio613Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio613Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio613Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio613Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio613Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio613Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio613Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio613Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio613Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio613Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio613Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio613Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio613Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio613Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio613Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio613Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio613Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio613Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio613Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio613Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio613Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio613Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio613Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio613Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio613Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio613Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio613 {
    #[inline(always)]
    fn default() -> Pio613 {
        Pio613(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio614(pub u32);
impl Pio614 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio614Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio614Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio614Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio614Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio614Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio614Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio614Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio614Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio614Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio614Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio614Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio614Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio614Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio614Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio614Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio614Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio614Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio614Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio614Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio614Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio614Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio614Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio614Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio614Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio614Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio614Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio614Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio614 {
    #[inline(always)]
    fn default() -> Pio614 {
        Pio614(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio615(pub u32);
impl Pio615 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio615Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio615Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio615Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio615Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio615Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio615Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio615Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio615Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio615Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio615Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio615Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio615Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio615Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio615Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio615Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio615Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio615Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio615Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio615Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio615Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio615Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio615Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio615Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio615Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio615Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio615Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio615Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio615 {
    #[inline(always)]
    fn default() -> Pio615 {
        Pio615(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio616(pub u32);
impl Pio616 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio616Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio616Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio616Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio616Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio616Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio616Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio616Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio616Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio616Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio616Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio616Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio616Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio616Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio616Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio616Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio616Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio616Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio616Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio616Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio616Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio616Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio616Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio616Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio616Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio616Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio616Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio616Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio616 {
    #[inline(always)]
    fn default() -> Pio616 {
        Pio616(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio617(pub u32);
impl Pio617 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio617Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio617Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio617Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio617Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio617Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio617Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio617Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio617Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio617Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio617Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio617Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio617Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio617Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio617Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio617Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio617Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio617Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio617Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio617Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio617Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio617Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio617Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio617Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio617Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio617Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio617Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio617Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio617 {
    #[inline(always)]
    fn default() -> Pio617 {
        Pio617(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio618(pub u32);
impl Pio618 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio618Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio618Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio618Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio618Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio618Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio618Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio618Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio618Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio618Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio618Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio618Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio618Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio618Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio618Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio618Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio618Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio618Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio618Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio618Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio618Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio618Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio618Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio618Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio618Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio618Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio618Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio618Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio618 {
    #[inline(always)]
    fn default() -> Pio618 {
        Pio618(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio619(pub u32);
impl Pio619 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio619Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio619Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio619Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio619Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio619Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio619Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio619Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio619Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio619Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio619Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio619Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio619Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio619Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio619Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio619Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio619Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio619Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio619Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio619Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio619Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio619Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio619Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio619Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio619Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio619Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio619Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio619Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio619 {
    #[inline(always)]
    fn default() -> Pio619 {
        Pio619(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio62(pub u32);
impl Pio62 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio62Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio62Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio62Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio62Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio62Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio62Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio62Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio62Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio62Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio62Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio62Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio62Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio62Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio62Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio62Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio62Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio62Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio62Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio62Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio62Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio62Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio62Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio62Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio62Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio62Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio62Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio62Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio62 {
    #[inline(always)]
    fn default() -> Pio62 {
        Pio62(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio620(pub u32);
impl Pio620 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio620Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio620Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio620Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio620Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio620Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio620Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio620Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio620Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio620Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio620Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio620Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio620Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio620Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio620Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio620Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio620Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio620Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio620Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio620Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio620Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio620Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio620Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio620Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio620Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio620Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio620Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio620Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio620 {
    #[inline(always)]
    fn default() -> Pio620 {
        Pio620(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio621(pub u32);
impl Pio621 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio621Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio621Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio621Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio621Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio621Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio621Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio621Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio621Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio621Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio621Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio621Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio621Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio621Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio621Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio621Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio621Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio621Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio621Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio621Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio621Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio621Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio621Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio621Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio621Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio621Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio621Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio621Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio621 {
    #[inline(always)]
    fn default() -> Pio621 {
        Pio621(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio622(pub u32);
impl Pio622 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio622Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio622Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio622Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio622Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio622Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio622Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio622Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio622Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio622Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio622Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio622Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio622Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio622Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio622Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio622Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio622Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio622Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio622Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio622Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio622Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio622Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio622Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio622Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio622Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio622Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio622Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio622Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio622 {
    #[inline(always)]
    fn default() -> Pio622 {
        Pio622(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio623(pub u32);
impl Pio623 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio623Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio623Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio623Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio623Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio623Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio623Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio623Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio623Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio623Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio623Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio623Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio623Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio623Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio623Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio623Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio623Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio623Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio623Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio623Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio623Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio623Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio623Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio623Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio623Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio623Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio623Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio623Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio623 {
    #[inline(always)]
    fn default() -> Pio623 {
        Pio623(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio624(pub u32);
impl Pio624 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio624Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio624Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio624Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio624Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio624Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio624Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio624Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio624Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio624Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio624Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio624Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio624Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio624Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio624Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio624Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio624Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio624Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio624Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio624Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio624Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio624Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio624Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio624Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio624Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio624Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio624Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio624Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio624 {
    #[inline(always)]
    fn default() -> Pio624 {
        Pio624(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio625(pub u32);
impl Pio625 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio625Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio625Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio625Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio625Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio625Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio625Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio625Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio625Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio625Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio625Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio625Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio625Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio625Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio625Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio625Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio625Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio625Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio625Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio625Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio625Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio625Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio625Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio625Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio625Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio625Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio625Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio625Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio625 {
    #[inline(always)]
    fn default() -> Pio625 {
        Pio625(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio626(pub u32);
impl Pio626 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio626Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio626Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio626Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio626Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio626Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio626Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio626Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio626Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio626Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio626Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio626Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio626Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio626Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio626Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio626Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio626Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio626Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio626Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio626Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio626Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio626Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio626Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio626Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio626Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio626Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio626Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio626Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio626 {
    #[inline(always)]
    fn default() -> Pio626 {
        Pio626(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio627(pub u32);
impl Pio627 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio627Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio627Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio627Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio627Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio627Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio627Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio627Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio627Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio627Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio627Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio627Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio627Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio627Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio627Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio627Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio627Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio627Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio627Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio627Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio627Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio627Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio627Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio627Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio627Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio627Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio627Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio627Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio627 {
    #[inline(always)]
    fn default() -> Pio627 {
        Pio627(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio628(pub u32);
impl Pio628 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio628Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio628Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio628Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio628Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio628Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio628Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio628Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio628Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio628Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio628Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio628Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio628Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio628Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio628Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio628Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio628Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio628Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio628Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio628Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio628Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio628Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio628Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio628Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio628Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio628Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio628Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio628Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio628 {
    #[inline(always)]
    fn default() -> Pio628 {
        Pio628(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio629(pub u32);
impl Pio629 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio629Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio629Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio629Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio629Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio629Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio629Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio629Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio629Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio629Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio629Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio629Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio629Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio629Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio629Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio629Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio629Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio629Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio629Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio629Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio629Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio629Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio629Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio629Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio629Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio629Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio629Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio629Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio629 {
    #[inline(always)]
    fn default() -> Pio629 {
        Pio629(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio63(pub u32);
impl Pio63 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio63Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio63Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio63Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio63Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio63Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio63Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio63Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio63Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio63Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio63Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio63Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio63Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio63Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio63Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio63Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio63Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio63Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio63Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio63Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio63Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio63Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio63Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio63Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio63Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio63Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio63Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio63Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio63 {
    #[inline(always)]
    fn default() -> Pio63 {
        Pio63(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio630(pub u32);
impl Pio630 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio630Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio630Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio630Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio630Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio630Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio630Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio630Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio630Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio630Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio630Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio630Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio630Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio630Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio630Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio630Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio630Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio630Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio630Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio630Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio630Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio630Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio630Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio630Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio630Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio630Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio630Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio630Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio630 {
    #[inline(always)]
    fn default() -> Pio630 {
        Pio630(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio631(pub u32);
impl Pio631 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio631Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio631Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio631Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio631Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio631Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio631Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio631Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio631Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio631Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio631Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio631Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio631Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio631Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio631Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio631Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio631Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio631Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio631Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio631Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio631Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio631Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio631Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio631Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio631Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio631Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio631Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio631Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio631 {
    #[inline(always)]
    fn default() -> Pio631 {
        Pio631(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio64(pub u32);
impl Pio64 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio64Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio64Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio64Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio64Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio64Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio64Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio64Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio64Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio64Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio64Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio64Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio64Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio64Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio64Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio64Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio64Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio64Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio64Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio64Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio64Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio64Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio64Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio64Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio64Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio64Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio64Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio64Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio64 {
    #[inline(always)]
    fn default() -> Pio64 {
        Pio64(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio65(pub u32);
impl Pio65 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio65Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio65Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio65Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio65Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio65Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio65Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio65Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio65Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio65Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio65Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio65Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio65Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio65Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio65Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio65Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio65Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio65Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio65Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio65Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio65Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio65Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio65Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio65Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio65Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio65Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio65Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio65Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio65 {
    #[inline(always)]
    fn default() -> Pio65 {
        Pio65(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio66(pub u32);
impl Pio66 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio66Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio66Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio66Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio66Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio66Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio66Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio66Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio66Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio66Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio66Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio66Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio66Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio66Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio66Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio66Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio66Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio66Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio66Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio66Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio66Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio66Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio66Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio66Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio66Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio66Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio66Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio66Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio66 {
    #[inline(always)]
    fn default() -> Pio66 {
        Pio66(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio67(pub u32);
impl Pio67 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio67Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio67Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio67Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio67Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio67Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio67Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio67Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio67Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio67Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio67Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio67Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio67Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio67Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio67Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio67Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio67Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio67Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio67Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio67Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio67Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio67Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio67Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio67Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio67Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio67Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio67Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio67Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio67 {
    #[inline(always)]
    fn default() -> Pio67 {
        Pio67(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio68(pub u32);
impl Pio68 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio68Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio68Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio68Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio68Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio68Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio68Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio68Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio68Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio68Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio68Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio68Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio68Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio68Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio68Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio68Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio68Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio68Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio68Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio68Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio68Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio68Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio68Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio68Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio68Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio68Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio68Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio68Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio68 {
    #[inline(always)]
    fn default() -> Pio68 {
        Pio68(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio69(pub u32);
impl Pio69 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio69Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio69Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio69Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio69Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio69Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio69Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio69Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio69Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio69Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio69Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio69Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio69Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio69Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio69Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio69Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio69Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio69Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio69Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio69Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio69Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio69Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio69Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio69Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio69Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio69Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio69Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio69Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio69 {
    #[inline(always)]
    fn default() -> Pio69 {
        Pio69(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio70(pub u32);
impl Pio70 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio70Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio70Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio70Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio70Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio70Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio70Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio70Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio70Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio70Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio70Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio70Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio70Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio70Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio70Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio70Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio70Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio70Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio70Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio70Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio70Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio70Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio70Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio70Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio70Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio70Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio70Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio70Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio70 {
    #[inline(always)]
    fn default() -> Pio70 {
        Pio70(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio71(pub u32);
impl Pio71 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio71Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio71Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio71Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio71Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio71Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio71Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio71Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio71Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio71Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio71Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio71Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio71Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio71Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio71Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio71Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio71Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio71Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio71Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio71Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio71Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio71Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio71Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio71Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio71Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio71Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio71Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio71Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio71 {
    #[inline(always)]
    fn default() -> Pio71 {
        Pio71(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio710(pub u32);
impl Pio710 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio710Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio710Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio710Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio710Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio710Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio710Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio710Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio710Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio710Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio710Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio710Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio710Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio710Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio710Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio710Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio710Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio710Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio710Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio710Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio710Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio710Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio710Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio710Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio710Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio710Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio710Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio710Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio710 {
    #[inline(always)]
    fn default() -> Pio710 {
        Pio710(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio711(pub u32);
impl Pio711 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio711Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio711Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio711Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio711Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio711Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio711Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio711Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio711Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio711Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio711Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio711Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio711Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio711Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio711Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio711Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio711Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio711Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio711Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio711Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio711Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio711Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio711Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio711Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio711Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio711Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio711Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio711Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio711 {
    #[inline(always)]
    fn default() -> Pio711 {
        Pio711(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio712(pub u32);
impl Pio712 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio712Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio712Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio712Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio712Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio712Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio712Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio712Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio712Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio712Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio712Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio712Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio712Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio712Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio712Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio712Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio712Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio712Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio712Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio712Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio712Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio712Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio712Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio712Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio712Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio712Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio712Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio712Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio712 {
    #[inline(always)]
    fn default() -> Pio712 {
        Pio712(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio713(pub u32);
impl Pio713 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio713Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio713Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio713Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio713Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio713Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio713Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio713Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio713Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio713Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio713Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio713Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio713Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio713Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio713Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio713Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio713Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio713Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio713Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio713Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio713Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio713Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio713Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio713Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio713Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio713Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio713Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio713Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio713 {
    #[inline(always)]
    fn default() -> Pio713 {
        Pio713(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio714(pub u32);
impl Pio714 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio714Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio714Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio714Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio714Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio714Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio714Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio714Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio714Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio714Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio714Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio714Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio714Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio714Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio714Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio714Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio714Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio714Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio714Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio714Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio714Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio714Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio714Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio714Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio714Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio714Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio714Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio714Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio714 {
    #[inline(always)]
    fn default() -> Pio714 {
        Pio714(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio715(pub u32);
impl Pio715 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio715Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio715Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio715Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio715Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio715Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio715Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio715Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio715Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio715Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio715Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio715Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio715Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio715Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio715Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio715Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio715Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio715Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio715Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio715Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio715Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio715Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio715Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio715Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio715Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio715Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio715Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio715Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio715 {
    #[inline(always)]
    fn default() -> Pio715 {
        Pio715(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio716(pub u32);
impl Pio716 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio716Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio716Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio716Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio716Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio716Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio716Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio716Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio716Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio716Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio716Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio716Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio716Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio716Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio716Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio716Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio716Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio716Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio716Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio716Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio716Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio716Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio716Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio716Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio716Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio716Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio716Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio716Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio716 {
    #[inline(always)]
    fn default() -> Pio716 {
        Pio716(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio717(pub u32);
impl Pio717 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio717Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio717Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio717Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio717Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio717Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio717Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio717Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio717Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio717Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio717Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio717Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio717Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio717Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio717Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio717Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio717Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio717Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio717Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio717Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio717Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio717Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio717Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio717Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio717Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio717Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio717Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio717Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio717 {
    #[inline(always)]
    fn default() -> Pio717 {
        Pio717(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio718(pub u32);
impl Pio718 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio718Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio718Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio718Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio718Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio718Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio718Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio718Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio718Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio718Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio718Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio718Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio718Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio718Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio718Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio718Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio718Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio718Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio718Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio718Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio718Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio718Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio718Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio718Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio718Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio718Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio718Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio718Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio718 {
    #[inline(always)]
    fn default() -> Pio718 {
        Pio718(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio719(pub u32);
impl Pio719 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio719Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio719Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio719Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio719Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio719Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio719Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio719Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio719Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio719Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio719Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio719Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio719Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio719Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio719Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio719Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio719Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio719Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio719Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio719Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio719Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio719Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio719Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio719Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio719Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio719Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio719Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio719Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio719 {
    #[inline(always)]
    fn default() -> Pio719 {
        Pio719(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio72(pub u32);
impl Pio72 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio72Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio72Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio72Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio72Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio72Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio72Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio72Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio72Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio72Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio72Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio72Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio72Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio72Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio72Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio72Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio72Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio72Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio72Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio72Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio72Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio72Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio72Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio72Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio72Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio72Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio72Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio72Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio72 {
    #[inline(always)]
    fn default() -> Pio72 {
        Pio72(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio720(pub u32);
impl Pio720 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio720Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio720Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio720Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio720Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio720Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio720Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio720Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio720Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio720Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio720Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio720Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio720Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio720Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio720Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio720Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio720Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio720Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio720Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio720Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio720Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio720Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio720Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio720Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio720Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio720Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio720Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio720Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio720 {
    #[inline(always)]
    fn default() -> Pio720 {
        Pio720(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio721(pub u32);
impl Pio721 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio721Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio721Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio721Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio721Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio721Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio721Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio721Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio721Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio721Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio721Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio721Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio721Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio721Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio721Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio721Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio721Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio721Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio721Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio721Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio721Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio721Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio721Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio721Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio721Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio721Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio721Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio721Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio721 {
    #[inline(always)]
    fn default() -> Pio721 {
        Pio721(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio722(pub u32);
impl Pio722 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio722Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio722Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio722Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio722Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio722Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio722Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio722Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio722Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio722Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio722Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio722Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio722Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio722Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio722Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio722Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio722Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio722Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio722Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio722Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio722Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio722Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio722Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio722Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio722Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio722Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio722Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio722Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio722 {
    #[inline(always)]
    fn default() -> Pio722 {
        Pio722(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio723(pub u32);
impl Pio723 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio723Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio723Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio723Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio723Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio723Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio723Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio723Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio723Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio723Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio723Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio723Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio723Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio723Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio723Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio723Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio723Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio723Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio723Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio723Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio723Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio723Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio723Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio723Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio723Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio723Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio723Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio723Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio723 {
    #[inline(always)]
    fn default() -> Pio723 {
        Pio723(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio724(pub u32);
impl Pio724 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio724Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio724Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio724Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio724Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio724Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio724Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio724Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio724Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio724Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio724Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio724Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio724Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio724Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio724Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio724Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio724Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio724Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio724Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio724Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio724Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio724Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio724Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio724Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio724Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio724Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio724Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio724Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio724 {
    #[inline(always)]
    fn default() -> Pio724 {
        Pio724(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio725(pub u32);
impl Pio725 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio725Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio725Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio725Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio725Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio725Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio725Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio725Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio725Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio725Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio725Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio725Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio725Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio725Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio725Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio725Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio725Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio725Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio725Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio725Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio725Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio725Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio725Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio725Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio725Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio725Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio725Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio725Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio725 {
    #[inline(always)]
    fn default() -> Pio725 {
        Pio725(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio726(pub u32);
impl Pio726 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio726Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio726Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio726Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio726Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio726Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio726Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio726Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio726Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio726Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio726Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio726Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio726Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio726Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio726Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio726Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio726Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio726Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio726Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio726Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio726Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio726Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio726Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio726Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio726Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio726Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio726Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio726Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio726 {
    #[inline(always)]
    fn default() -> Pio726 {
        Pio726(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio727(pub u32);
impl Pio727 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio727Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio727Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio727Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio727Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio727Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio727Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio727Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio727Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio727Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio727Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio727Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio727Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio727Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio727Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio727Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio727Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio727Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio727Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio727Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio727Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio727Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio727Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio727Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio727Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio727Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio727Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio727Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio727 {
    #[inline(always)]
    fn default() -> Pio727 {
        Pio727(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio728(pub u32);
impl Pio728 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio728Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio728Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio728Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio728Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio728Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio728Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio728Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio728Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio728Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio728Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio728Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio728Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio728Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio728Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio728Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio728Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio728Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio728Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio728Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio728Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio728Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio728Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio728Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio728Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio728Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio728Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio728Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio728 {
    #[inline(always)]
    fn default() -> Pio728 {
        Pio728(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio729(pub u32);
impl Pio729 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio729Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio729Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio729Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio729Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio729Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio729Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio729Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio729Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio729Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio729Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio729Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio729Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio729Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio729Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio729Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio729Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio729Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio729Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio729Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio729Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio729Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio729Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio729Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio729Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio729Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio729Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio729Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio729 {
    #[inline(always)]
    fn default() -> Pio729 {
        Pio729(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio73(pub u32);
impl Pio73 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio73Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio73Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio73Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio73Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio73Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio73Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio73Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio73Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio73Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio73Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio73Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio73Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio73Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio73Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio73Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio73Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio73Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio73Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio73Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio73Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio73Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio73Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio73Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio73Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio73Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio73Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio73Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio73 {
    #[inline(always)]
    fn default() -> Pio73 {
        Pio73(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio730(pub u32);
impl Pio730 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio730Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio730Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio730Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio730Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio730Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio730Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio730Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio730Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio730Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio730Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio730Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio730Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio730Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio730Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio730Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio730Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio730Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio730Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio730Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio730Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio730Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio730Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio730Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio730Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio730Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio730Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio730Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio730 {
    #[inline(always)]
    fn default() -> Pio730 {
        Pio730(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio731(pub u32);
impl Pio731 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio731Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio731Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio731Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio731Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio731Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio731Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio731Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio731Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio731Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio731Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio731Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio731Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio731Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio731Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio731Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio731Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio731Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio731Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio731Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio731Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio731Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio731Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio731Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio731Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio731Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio731Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio731Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio731 {
    #[inline(always)]
    fn default() -> Pio731 {
        Pio731(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio74(pub u32);
impl Pio74 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio74Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio74Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio74Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio74Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio74Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio74Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio74Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio74Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio74Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio74Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio74Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio74Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio74Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio74Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio74Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio74Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio74Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio74Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio74Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio74Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio74Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio74Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio74Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio74Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio74Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio74Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio74Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio74 {
    #[inline(always)]
    fn default() -> Pio74 {
        Pio74(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio75(pub u32);
impl Pio75 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio75Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio75Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio75Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio75Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio75Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio75Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio75Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio75Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio75Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio75Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio75Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio75Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio75Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio75Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio75Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio75Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio75Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio75Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio75Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio75Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio75Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio75Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio75Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio75Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio75Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio75Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio75Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio75 {
    #[inline(always)]
    fn default() -> Pio75 {
        Pio75(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio76(pub u32);
impl Pio76 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio76Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio76Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio76Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio76Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio76Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio76Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio76Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio76Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio76Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio76Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio76Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio76Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio76Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio76Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio76Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio76Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio76Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio76Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio76Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio76Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio76Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio76Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio76Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio76Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio76Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio76Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio76Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio76 {
    #[inline(always)]
    fn default() -> Pio76 {
        Pio76(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio77(pub u32);
impl Pio77 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio77Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio77Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio77Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio77Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio77Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio77Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio77Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio77Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio77Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio77Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio77Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio77Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio77Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio77Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio77Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio77Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio77Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio77Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio77Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio77Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio77Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio77Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio77Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio77Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio77Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio77Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio77Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio77 {
    #[inline(always)]
    fn default() -> Pio77 {
        Pio77(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio78(pub u32);
impl Pio78 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio78Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio78Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio78Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio78Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio78Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio78Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio78Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio78Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio78Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio78Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio78Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio78Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio78Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio78Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio78Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio78Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio78Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio78Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio78Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio78Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio78Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio78Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio78Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio78Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio78Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio78Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio78Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio78 {
    #[inline(always)]
    fn default() -> Pio78 {
        Pio78(0)
    }
}
#[doc = "iop pad control register for port0 to port5"]
#[repr(transparent)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub struct Pio79(pub u32);
impl Pio79 {
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub const fn fsel(&self) -> super::vals::Pio79Fsel {
        let val = (self.0 >> 0usize) & 0x0f;
        super::vals::Pio79Fsel::from_bits(val as u8)
    }
    #[doc = "Function Selector. . .(FSELs Sources can be found in the next several pages.)"]
    #[inline(always)]
    pub fn set_fsel(&mut self, val: super::vals::Pio79Fsel) {
        self.0 = (self.0 & !(0x0f << 0usize)) | (((val.to_bits() as u32) & 0x0f) << 0usize);
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub const fn pupdena(&self) -> super::vals::Pio79Pupdena {
        let val = (self.0 >> 4usize) & 0x01;
        super::vals::Pio79Pupdena::from_bits(val as u8)
    }
    #[doc = "Pullup / Pulldown Enable. . ."]
    #[inline(always)]
    pub fn set_pupdena(&mut self, val: super::vals::Pio79Pupdena) {
        self.0 = (self.0 & !(0x01 << 4usize)) | (((val.to_bits() as u32) & 0x01) << 4usize);
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub const fn pupdsel(&self) -> super::vals::Pio79Pupdsel {
        let val = (self.0 >> 5usize) & 0x01;
        super::vals::Pio79Pupdsel::from_bits(val as u8)
    }
    #[doc = "Pullup or Pulldown Selector. . ."]
    #[inline(always)]
    pub fn set_pupdsel(&mut self, val: super::vals::Pio79Pupdsel) {
        self.0 = (self.0 & !(0x01 << 5usize)) | (((val.to_bits() as u32) & 0x01) << 5usize);
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub const fn ibena(&self) -> super::vals::Pio79Ibena {
        let val = (self.0 >> 6usize) & 0x01;
        super::vals::Pio79Ibena::from_bits(val as u8)
    }
    #[doc = "Input Buffer Enable. ."]
    #[inline(always)]
    pub fn set_ibena(&mut self, val: super::vals::Pio79Ibena) {
        self.0 = (self.0 & !(0x01 << 6usize)) | (((val.to_bits() as u32) & 0x01) << 6usize);
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub const fn slewrate(&self) -> super::vals::Pio79Slewrate {
        let val = (self.0 >> 7usize) & 0x01;
        super::vals::Pio79Slewrate::from_bits(val as u8)
    }
    #[doc = "Slew Rate Control. . ."]
    #[inline(always)]
    pub fn set_slewrate(&mut self, val: super::vals::Pio79Slewrate) {
        self.0 = (self.0 & !(0x01 << 7usize)) | (((val.to_bits() as u32) & 0x01) << 7usize);
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub const fn fulldrive(&self) -> super::vals::Pio79Fulldrive {
        let val = (self.0 >> 8usize) & 0x01;
        super::vals::Pio79Fulldrive::from_bits(val as u8)
    }
    #[doc = "Drive Selector. . ."]
    #[inline(always)]
    pub fn set_fulldrive(&mut self, val: super::vals::Pio79Fulldrive) {
        self.0 = (self.0 & !(0x01 << 8usize)) | (((val.to_bits() as u32) & 0x01) << 8usize);
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub const fn amena(&self) -> super::vals::Pio79Amena {
        let val = (self.0 >> 9usize) & 0x01;
        super::vals::Pio79Amena::from_bits(val as u8)
    }
    #[doc = "Analog Mux Enable. . ."]
    #[inline(always)]
    pub fn set_amena(&mut self, val: super::vals::Pio79Amena) {
        self.0 = (self.0 & !(0x01 << 9usize)) | (((val.to_bits() as u32) & 0x01) << 9usize);
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub const fn odena(&self) -> super::vals::Pio79Odena {
        let val = (self.0 >> 10usize) & 0x01;
        super::vals::Pio79Odena::from_bits(val as u8)
    }
    #[doc = "Pseudo Output Drain Enable. . ."]
    #[inline(always)]
    pub fn set_odena(&mut self, val: super::vals::Pio79Odena) {
        self.0 = (self.0 & !(0x01 << 10usize)) | (((val.to_bits() as u32) & 0x01) << 10usize);
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub const fn iiena(&self) -> super::vals::Pio79Iiena {
        let val = (self.0 >> 11usize) & 0x01;
        super::vals::Pio79Iiena::from_bits(val as u8)
    }
    #[doc = "Input Invert Enable. . ."]
    #[inline(always)]
    pub fn set_iiena(&mut self, val: super::vals::Pio79Iiena) {
        self.0 = (self.0 & !(0x01 << 11usize)) | (((val.to_bits() as u32) & 0x01) << 11usize);
    }
}
impl Default for Pio79 {
    #[inline(always)]
    fn default() -> Pio79 {
        Pio79(0)
    }
}
