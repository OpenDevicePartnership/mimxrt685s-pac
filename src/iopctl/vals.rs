#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Fc15I2cSclAmena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Fc15I2cSclAmena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Fc15I2cSclAmena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Fc15I2cSclAmena {
    #[inline(always)]
    fn from(val: u8) -> Fc15I2cSclAmena {
        Fc15I2cSclAmena::from_bits(val)
    }
}
impl From<Fc15I2cSclAmena> for u8 {
    #[inline(always)]
    fn from(val: Fc15I2cSclAmena) -> u8 {
        Fc15I2cSclAmena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Fc15I2cSclFsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Fc15I2cSclFsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Fc15I2cSclFsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Fc15I2cSclFsel {
    #[inline(always)]
    fn from(val: u8) -> Fc15I2cSclFsel {
        Fc15I2cSclFsel::from_bits(val)
    }
}
impl From<Fc15I2cSclFsel> for u8 {
    #[inline(always)]
    fn from(val: Fc15I2cSclFsel) -> u8 {
        Fc15I2cSclFsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Fc15I2cSclFulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Fc15I2cSclFulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Fc15I2cSclFulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Fc15I2cSclFulldrive {
    #[inline(always)]
    fn from(val: u8) -> Fc15I2cSclFulldrive {
        Fc15I2cSclFulldrive::from_bits(val)
    }
}
impl From<Fc15I2cSclFulldrive> for u8 {
    #[inline(always)]
    fn from(val: Fc15I2cSclFulldrive) -> u8 {
        Fc15I2cSclFulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Fc15I2cSclIbena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Fc15I2cSclIbena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Fc15I2cSclIbena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Fc15I2cSclIbena {
    #[inline(always)]
    fn from(val: u8) -> Fc15I2cSclIbena {
        Fc15I2cSclIbena::from_bits(val)
    }
}
impl From<Fc15I2cSclIbena> for u8 {
    #[inline(always)]
    fn from(val: Fc15I2cSclIbena) -> u8 {
        Fc15I2cSclIbena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Fc15I2cSclIiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Fc15I2cSclIiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Fc15I2cSclIiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Fc15I2cSclIiena {
    #[inline(always)]
    fn from(val: u8) -> Fc15I2cSclIiena {
        Fc15I2cSclIiena::from_bits(val)
    }
}
impl From<Fc15I2cSclIiena> for u8 {
    #[inline(always)]
    fn from(val: Fc15I2cSclIiena) -> u8 {
        Fc15I2cSclIiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Fc15I2cSclOdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Fc15I2cSclOdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Fc15I2cSclOdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Fc15I2cSclOdena {
    #[inline(always)]
    fn from(val: u8) -> Fc15I2cSclOdena {
        Fc15I2cSclOdena::from_bits(val)
    }
}
impl From<Fc15I2cSclOdena> for u8 {
    #[inline(always)]
    fn from(val: Fc15I2cSclOdena) -> u8 {
        Fc15I2cSclOdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Fc15I2cSclPupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Fc15I2cSclPupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Fc15I2cSclPupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Fc15I2cSclPupdena {
    #[inline(always)]
    fn from(val: u8) -> Fc15I2cSclPupdena {
        Fc15I2cSclPupdena::from_bits(val)
    }
}
impl From<Fc15I2cSclPupdena> for u8 {
    #[inline(always)]
    fn from(val: Fc15I2cSclPupdena) -> u8 {
        Fc15I2cSclPupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Fc15I2cSclPupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Fc15I2cSclPupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Fc15I2cSclPupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Fc15I2cSclPupdsel {
    #[inline(always)]
    fn from(val: u8) -> Fc15I2cSclPupdsel {
        Fc15I2cSclPupdsel::from_bits(val)
    }
}
impl From<Fc15I2cSclPupdsel> for u8 {
    #[inline(always)]
    fn from(val: Fc15I2cSclPupdsel) -> u8 {
        Fc15I2cSclPupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Fc15I2cSclSlewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Fc15I2cSclSlewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Fc15I2cSclSlewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Fc15I2cSclSlewrate {
    #[inline(always)]
    fn from(val: u8) -> Fc15I2cSclSlewrate {
        Fc15I2cSclSlewrate::from_bits(val)
    }
}
impl From<Fc15I2cSclSlewrate> for u8 {
    #[inline(always)]
    fn from(val: Fc15I2cSclSlewrate) -> u8 {
        Fc15I2cSclSlewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Fc15I2cSdaAmena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Fc15I2cSdaAmena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Fc15I2cSdaAmena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Fc15I2cSdaAmena {
    #[inline(always)]
    fn from(val: u8) -> Fc15I2cSdaAmena {
        Fc15I2cSdaAmena::from_bits(val)
    }
}
impl From<Fc15I2cSdaAmena> for u8 {
    #[inline(always)]
    fn from(val: Fc15I2cSdaAmena) -> u8 {
        Fc15I2cSdaAmena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Fc15I2cSdaFsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Fc15I2cSdaFsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Fc15I2cSdaFsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Fc15I2cSdaFsel {
    #[inline(always)]
    fn from(val: u8) -> Fc15I2cSdaFsel {
        Fc15I2cSdaFsel::from_bits(val)
    }
}
impl From<Fc15I2cSdaFsel> for u8 {
    #[inline(always)]
    fn from(val: Fc15I2cSdaFsel) -> u8 {
        Fc15I2cSdaFsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Fc15I2cSdaFulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Fc15I2cSdaFulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Fc15I2cSdaFulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Fc15I2cSdaFulldrive {
    #[inline(always)]
    fn from(val: u8) -> Fc15I2cSdaFulldrive {
        Fc15I2cSdaFulldrive::from_bits(val)
    }
}
impl From<Fc15I2cSdaFulldrive> for u8 {
    #[inline(always)]
    fn from(val: Fc15I2cSdaFulldrive) -> u8 {
        Fc15I2cSdaFulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Fc15I2cSdaIbena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Fc15I2cSdaIbena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Fc15I2cSdaIbena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Fc15I2cSdaIbena {
    #[inline(always)]
    fn from(val: u8) -> Fc15I2cSdaIbena {
        Fc15I2cSdaIbena::from_bits(val)
    }
}
impl From<Fc15I2cSdaIbena> for u8 {
    #[inline(always)]
    fn from(val: Fc15I2cSdaIbena) -> u8 {
        Fc15I2cSdaIbena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Fc15I2cSdaIiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Fc15I2cSdaIiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Fc15I2cSdaIiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Fc15I2cSdaIiena {
    #[inline(always)]
    fn from(val: u8) -> Fc15I2cSdaIiena {
        Fc15I2cSdaIiena::from_bits(val)
    }
}
impl From<Fc15I2cSdaIiena> for u8 {
    #[inline(always)]
    fn from(val: Fc15I2cSdaIiena) -> u8 {
        Fc15I2cSdaIiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Fc15I2cSdaOdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Fc15I2cSdaOdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Fc15I2cSdaOdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Fc15I2cSdaOdena {
    #[inline(always)]
    fn from(val: u8) -> Fc15I2cSdaOdena {
        Fc15I2cSdaOdena::from_bits(val)
    }
}
impl From<Fc15I2cSdaOdena> for u8 {
    #[inline(always)]
    fn from(val: Fc15I2cSdaOdena) -> u8 {
        Fc15I2cSdaOdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Fc15I2cSdaPupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Fc15I2cSdaPupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Fc15I2cSdaPupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Fc15I2cSdaPupdena {
    #[inline(always)]
    fn from(val: u8) -> Fc15I2cSdaPupdena {
        Fc15I2cSdaPupdena::from_bits(val)
    }
}
impl From<Fc15I2cSdaPupdena> for u8 {
    #[inline(always)]
    fn from(val: Fc15I2cSdaPupdena) -> u8 {
        Fc15I2cSdaPupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Fc15I2cSdaPupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Fc15I2cSdaPupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Fc15I2cSdaPupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Fc15I2cSdaPupdsel {
    #[inline(always)]
    fn from(val: u8) -> Fc15I2cSdaPupdsel {
        Fc15I2cSdaPupdsel::from_bits(val)
    }
}
impl From<Fc15I2cSdaPupdsel> for u8 {
    #[inline(always)]
    fn from(val: Fc15I2cSdaPupdsel) -> u8 {
        Fc15I2cSdaPupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Fc15I2cSdaSlewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Fc15I2cSdaSlewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Fc15I2cSdaSlewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Fc15I2cSdaSlewrate {
    #[inline(always)]
    fn from(val: u8) -> Fc15I2cSdaSlewrate {
        Fc15I2cSdaSlewrate::from_bits(val)
    }
}
impl From<Fc15I2cSdaSlewrate> for u8 {
    #[inline(always)]
    fn from(val: Fc15I2cSdaSlewrate) -> u8 {
        Fc15I2cSdaSlewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio00Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio00Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio00Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio00Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio00Amena {
        Pio00Amena::from_bits(val)
    }
}
impl From<Pio00Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio00Amena) -> u8 {
        Pio00Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio00Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio00Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio00Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio00Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio00Fsel {
        Pio00Fsel::from_bits(val)
    }
}
impl From<Pio00Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio00Fsel) -> u8 {
        Pio00Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio00Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio00Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio00Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio00Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio00Fulldrive {
        Pio00Fulldrive::from_bits(val)
    }
}
impl From<Pio00Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio00Fulldrive) -> u8 {
        Pio00Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio00Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio00Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio00Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio00Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio00Ibena {
        Pio00Ibena::from_bits(val)
    }
}
impl From<Pio00Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio00Ibena) -> u8 {
        Pio00Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio00Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio00Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio00Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio00Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio00Iiena {
        Pio00Iiena::from_bits(val)
    }
}
impl From<Pio00Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio00Iiena) -> u8 {
        Pio00Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio00Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio00Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio00Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio00Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio00Odena {
        Pio00Odena::from_bits(val)
    }
}
impl From<Pio00Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio00Odena) -> u8 {
        Pio00Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio00Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio00Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio00Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio00Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio00Pupdena {
        Pio00Pupdena::from_bits(val)
    }
}
impl From<Pio00Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio00Pupdena) -> u8 {
        Pio00Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio00Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio00Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio00Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio00Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio00Pupdsel {
        Pio00Pupdsel::from_bits(val)
    }
}
impl From<Pio00Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio00Pupdsel) -> u8 {
        Pio00Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio00Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio00Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio00Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio00Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio00Slewrate {
        Pio00Slewrate::from_bits(val)
    }
}
impl From<Pio00Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio00Slewrate) -> u8 {
        Pio00Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio010Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio010Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio010Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio010Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio010Amena {
        Pio010Amena::from_bits(val)
    }
}
impl From<Pio010Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio010Amena) -> u8 {
        Pio010Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio010Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio010Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio010Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio010Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio010Fsel {
        Pio010Fsel::from_bits(val)
    }
}
impl From<Pio010Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio010Fsel) -> u8 {
        Pio010Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio010Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio010Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio010Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio010Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio010Fulldrive {
        Pio010Fulldrive::from_bits(val)
    }
}
impl From<Pio010Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio010Fulldrive) -> u8 {
        Pio010Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio010Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio010Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio010Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio010Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio010Ibena {
        Pio010Ibena::from_bits(val)
    }
}
impl From<Pio010Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio010Ibena) -> u8 {
        Pio010Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio010Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio010Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio010Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio010Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio010Iiena {
        Pio010Iiena::from_bits(val)
    }
}
impl From<Pio010Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio010Iiena) -> u8 {
        Pio010Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio010Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio010Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio010Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio010Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio010Odena {
        Pio010Odena::from_bits(val)
    }
}
impl From<Pio010Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio010Odena) -> u8 {
        Pio010Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio010Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio010Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio010Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio010Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio010Pupdena {
        Pio010Pupdena::from_bits(val)
    }
}
impl From<Pio010Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio010Pupdena) -> u8 {
        Pio010Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio010Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio010Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio010Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio010Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio010Pupdsel {
        Pio010Pupdsel::from_bits(val)
    }
}
impl From<Pio010Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio010Pupdsel) -> u8 {
        Pio010Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio010Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio010Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio010Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio010Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio010Slewrate {
        Pio010Slewrate::from_bits(val)
    }
}
impl From<Pio010Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio010Slewrate) -> u8 {
        Pio010Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio011Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio011Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio011Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio011Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio011Amena {
        Pio011Amena::from_bits(val)
    }
}
impl From<Pio011Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio011Amena) -> u8 {
        Pio011Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio011Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio011Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio011Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio011Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio011Fsel {
        Pio011Fsel::from_bits(val)
    }
}
impl From<Pio011Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio011Fsel) -> u8 {
        Pio011Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio011Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio011Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio011Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio011Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio011Fulldrive {
        Pio011Fulldrive::from_bits(val)
    }
}
impl From<Pio011Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio011Fulldrive) -> u8 {
        Pio011Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio011Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio011Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio011Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio011Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio011Ibena {
        Pio011Ibena::from_bits(val)
    }
}
impl From<Pio011Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio011Ibena) -> u8 {
        Pio011Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio011Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio011Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio011Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio011Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio011Iiena {
        Pio011Iiena::from_bits(val)
    }
}
impl From<Pio011Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio011Iiena) -> u8 {
        Pio011Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio011Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio011Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio011Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio011Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio011Odena {
        Pio011Odena::from_bits(val)
    }
}
impl From<Pio011Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio011Odena) -> u8 {
        Pio011Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio011Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio011Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio011Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio011Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio011Pupdena {
        Pio011Pupdena::from_bits(val)
    }
}
impl From<Pio011Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio011Pupdena) -> u8 {
        Pio011Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio011Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio011Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio011Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio011Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio011Pupdsel {
        Pio011Pupdsel::from_bits(val)
    }
}
impl From<Pio011Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio011Pupdsel) -> u8 {
        Pio011Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio011Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio011Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio011Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio011Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio011Slewrate {
        Pio011Slewrate::from_bits(val)
    }
}
impl From<Pio011Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio011Slewrate) -> u8 {
        Pio011Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio012Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio012Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio012Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio012Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio012Amena {
        Pio012Amena::from_bits(val)
    }
}
impl From<Pio012Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio012Amena) -> u8 {
        Pio012Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio012Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio012Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio012Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio012Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio012Fsel {
        Pio012Fsel::from_bits(val)
    }
}
impl From<Pio012Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio012Fsel) -> u8 {
        Pio012Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio012Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio012Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio012Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio012Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio012Fulldrive {
        Pio012Fulldrive::from_bits(val)
    }
}
impl From<Pio012Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio012Fulldrive) -> u8 {
        Pio012Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio012Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio012Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio012Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio012Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio012Ibena {
        Pio012Ibena::from_bits(val)
    }
}
impl From<Pio012Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio012Ibena) -> u8 {
        Pio012Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio012Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio012Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio012Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio012Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio012Iiena {
        Pio012Iiena::from_bits(val)
    }
}
impl From<Pio012Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio012Iiena) -> u8 {
        Pio012Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio012Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio012Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio012Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio012Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio012Odena {
        Pio012Odena::from_bits(val)
    }
}
impl From<Pio012Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio012Odena) -> u8 {
        Pio012Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio012Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio012Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio012Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio012Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio012Pupdena {
        Pio012Pupdena::from_bits(val)
    }
}
impl From<Pio012Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio012Pupdena) -> u8 {
        Pio012Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio012Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio012Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio012Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio012Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio012Pupdsel {
        Pio012Pupdsel::from_bits(val)
    }
}
impl From<Pio012Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio012Pupdsel) -> u8 {
        Pio012Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio012Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio012Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio012Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio012Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio012Slewrate {
        Pio012Slewrate::from_bits(val)
    }
}
impl From<Pio012Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio012Slewrate) -> u8 {
        Pio012Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio013Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio013Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio013Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio013Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio013Amena {
        Pio013Amena::from_bits(val)
    }
}
impl From<Pio013Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio013Amena) -> u8 {
        Pio013Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio013Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio013Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio013Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio013Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio013Fsel {
        Pio013Fsel::from_bits(val)
    }
}
impl From<Pio013Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio013Fsel) -> u8 {
        Pio013Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio013Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio013Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio013Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio013Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio013Fulldrive {
        Pio013Fulldrive::from_bits(val)
    }
}
impl From<Pio013Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio013Fulldrive) -> u8 {
        Pio013Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio013Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio013Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio013Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio013Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio013Ibena {
        Pio013Ibena::from_bits(val)
    }
}
impl From<Pio013Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio013Ibena) -> u8 {
        Pio013Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio013Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio013Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio013Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio013Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio013Iiena {
        Pio013Iiena::from_bits(val)
    }
}
impl From<Pio013Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio013Iiena) -> u8 {
        Pio013Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio013Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio013Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio013Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio013Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio013Odena {
        Pio013Odena::from_bits(val)
    }
}
impl From<Pio013Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio013Odena) -> u8 {
        Pio013Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio013Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio013Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio013Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio013Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio013Pupdena {
        Pio013Pupdena::from_bits(val)
    }
}
impl From<Pio013Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio013Pupdena) -> u8 {
        Pio013Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio013Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio013Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio013Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio013Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio013Pupdsel {
        Pio013Pupdsel::from_bits(val)
    }
}
impl From<Pio013Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio013Pupdsel) -> u8 {
        Pio013Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio013Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio013Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio013Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio013Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio013Slewrate {
        Pio013Slewrate::from_bits(val)
    }
}
impl From<Pio013Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio013Slewrate) -> u8 {
        Pio013Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio014Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio014Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio014Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio014Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio014Amena {
        Pio014Amena::from_bits(val)
    }
}
impl From<Pio014Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio014Amena) -> u8 {
        Pio014Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio014Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio014Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio014Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio014Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio014Fsel {
        Pio014Fsel::from_bits(val)
    }
}
impl From<Pio014Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio014Fsel) -> u8 {
        Pio014Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio014Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio014Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio014Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio014Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio014Fulldrive {
        Pio014Fulldrive::from_bits(val)
    }
}
impl From<Pio014Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio014Fulldrive) -> u8 {
        Pio014Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio014Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio014Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio014Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio014Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio014Ibena {
        Pio014Ibena::from_bits(val)
    }
}
impl From<Pio014Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio014Ibena) -> u8 {
        Pio014Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio014Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio014Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio014Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio014Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio014Iiena {
        Pio014Iiena::from_bits(val)
    }
}
impl From<Pio014Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio014Iiena) -> u8 {
        Pio014Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio014Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio014Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio014Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio014Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio014Odena {
        Pio014Odena::from_bits(val)
    }
}
impl From<Pio014Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio014Odena) -> u8 {
        Pio014Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio014Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio014Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio014Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio014Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio014Pupdena {
        Pio014Pupdena::from_bits(val)
    }
}
impl From<Pio014Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio014Pupdena) -> u8 {
        Pio014Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio014Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio014Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio014Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio014Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio014Pupdsel {
        Pio014Pupdsel::from_bits(val)
    }
}
impl From<Pio014Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio014Pupdsel) -> u8 {
        Pio014Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio014Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio014Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio014Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio014Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio014Slewrate {
        Pio014Slewrate::from_bits(val)
    }
}
impl From<Pio014Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio014Slewrate) -> u8 {
        Pio014Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio015Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio015Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio015Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio015Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio015Amena {
        Pio015Amena::from_bits(val)
    }
}
impl From<Pio015Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio015Amena) -> u8 {
        Pio015Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio015Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio015Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio015Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio015Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio015Fsel {
        Pio015Fsel::from_bits(val)
    }
}
impl From<Pio015Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio015Fsel) -> u8 {
        Pio015Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio015Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio015Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio015Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio015Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio015Fulldrive {
        Pio015Fulldrive::from_bits(val)
    }
}
impl From<Pio015Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio015Fulldrive) -> u8 {
        Pio015Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio015Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio015Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio015Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio015Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio015Ibena {
        Pio015Ibena::from_bits(val)
    }
}
impl From<Pio015Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio015Ibena) -> u8 {
        Pio015Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio015Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio015Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio015Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio015Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio015Iiena {
        Pio015Iiena::from_bits(val)
    }
}
impl From<Pio015Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio015Iiena) -> u8 {
        Pio015Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio015Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio015Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio015Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio015Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio015Odena {
        Pio015Odena::from_bits(val)
    }
}
impl From<Pio015Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio015Odena) -> u8 {
        Pio015Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio015Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio015Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio015Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio015Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio015Pupdena {
        Pio015Pupdena::from_bits(val)
    }
}
impl From<Pio015Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio015Pupdena) -> u8 {
        Pio015Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio015Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio015Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio015Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio015Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio015Pupdsel {
        Pio015Pupdsel::from_bits(val)
    }
}
impl From<Pio015Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio015Pupdsel) -> u8 {
        Pio015Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio015Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio015Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio015Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio015Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio015Slewrate {
        Pio015Slewrate::from_bits(val)
    }
}
impl From<Pio015Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio015Slewrate) -> u8 {
        Pio015Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio016Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio016Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio016Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio016Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio016Amena {
        Pio016Amena::from_bits(val)
    }
}
impl From<Pio016Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio016Amena) -> u8 {
        Pio016Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio016Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio016Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio016Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio016Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio016Fsel {
        Pio016Fsel::from_bits(val)
    }
}
impl From<Pio016Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio016Fsel) -> u8 {
        Pio016Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio016Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio016Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio016Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio016Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio016Fulldrive {
        Pio016Fulldrive::from_bits(val)
    }
}
impl From<Pio016Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio016Fulldrive) -> u8 {
        Pio016Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio016Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio016Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio016Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio016Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio016Ibena {
        Pio016Ibena::from_bits(val)
    }
}
impl From<Pio016Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio016Ibena) -> u8 {
        Pio016Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio016Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio016Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio016Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio016Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio016Iiena {
        Pio016Iiena::from_bits(val)
    }
}
impl From<Pio016Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio016Iiena) -> u8 {
        Pio016Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio016Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio016Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio016Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio016Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio016Odena {
        Pio016Odena::from_bits(val)
    }
}
impl From<Pio016Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio016Odena) -> u8 {
        Pio016Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio016Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio016Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio016Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio016Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio016Pupdena {
        Pio016Pupdena::from_bits(val)
    }
}
impl From<Pio016Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio016Pupdena) -> u8 {
        Pio016Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio016Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio016Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio016Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio016Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio016Pupdsel {
        Pio016Pupdsel::from_bits(val)
    }
}
impl From<Pio016Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio016Pupdsel) -> u8 {
        Pio016Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio016Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio016Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio016Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio016Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio016Slewrate {
        Pio016Slewrate::from_bits(val)
    }
}
impl From<Pio016Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio016Slewrate) -> u8 {
        Pio016Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio017Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio017Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio017Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio017Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio017Amena {
        Pio017Amena::from_bits(val)
    }
}
impl From<Pio017Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio017Amena) -> u8 {
        Pio017Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio017Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio017Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio017Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio017Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio017Fsel {
        Pio017Fsel::from_bits(val)
    }
}
impl From<Pio017Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio017Fsel) -> u8 {
        Pio017Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio017Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio017Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio017Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio017Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio017Fulldrive {
        Pio017Fulldrive::from_bits(val)
    }
}
impl From<Pio017Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio017Fulldrive) -> u8 {
        Pio017Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio017Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio017Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio017Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio017Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio017Ibena {
        Pio017Ibena::from_bits(val)
    }
}
impl From<Pio017Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio017Ibena) -> u8 {
        Pio017Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio017Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio017Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio017Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio017Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio017Iiena {
        Pio017Iiena::from_bits(val)
    }
}
impl From<Pio017Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio017Iiena) -> u8 {
        Pio017Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio017Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio017Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio017Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio017Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio017Odena {
        Pio017Odena::from_bits(val)
    }
}
impl From<Pio017Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio017Odena) -> u8 {
        Pio017Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio017Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio017Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio017Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio017Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio017Pupdena {
        Pio017Pupdena::from_bits(val)
    }
}
impl From<Pio017Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio017Pupdena) -> u8 {
        Pio017Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio017Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio017Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio017Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio017Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio017Pupdsel {
        Pio017Pupdsel::from_bits(val)
    }
}
impl From<Pio017Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio017Pupdsel) -> u8 {
        Pio017Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio017Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio017Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio017Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio017Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio017Slewrate {
        Pio017Slewrate::from_bits(val)
    }
}
impl From<Pio017Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio017Slewrate) -> u8 {
        Pio017Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio018Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio018Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio018Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio018Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio018Amena {
        Pio018Amena::from_bits(val)
    }
}
impl From<Pio018Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio018Amena) -> u8 {
        Pio018Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio018Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio018Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio018Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio018Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio018Fsel {
        Pio018Fsel::from_bits(val)
    }
}
impl From<Pio018Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio018Fsel) -> u8 {
        Pio018Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio018Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio018Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio018Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio018Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio018Fulldrive {
        Pio018Fulldrive::from_bits(val)
    }
}
impl From<Pio018Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio018Fulldrive) -> u8 {
        Pio018Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio018Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio018Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio018Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio018Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio018Ibena {
        Pio018Ibena::from_bits(val)
    }
}
impl From<Pio018Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio018Ibena) -> u8 {
        Pio018Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio018Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio018Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio018Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio018Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio018Iiena {
        Pio018Iiena::from_bits(val)
    }
}
impl From<Pio018Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio018Iiena) -> u8 {
        Pio018Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio018Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio018Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio018Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio018Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio018Odena {
        Pio018Odena::from_bits(val)
    }
}
impl From<Pio018Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio018Odena) -> u8 {
        Pio018Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio018Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio018Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio018Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio018Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio018Pupdena {
        Pio018Pupdena::from_bits(val)
    }
}
impl From<Pio018Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio018Pupdena) -> u8 {
        Pio018Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio018Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio018Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio018Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio018Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio018Pupdsel {
        Pio018Pupdsel::from_bits(val)
    }
}
impl From<Pio018Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio018Pupdsel) -> u8 {
        Pio018Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio018Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio018Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio018Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio018Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio018Slewrate {
        Pio018Slewrate::from_bits(val)
    }
}
impl From<Pio018Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio018Slewrate) -> u8 {
        Pio018Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio019Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio019Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio019Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio019Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio019Amena {
        Pio019Amena::from_bits(val)
    }
}
impl From<Pio019Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio019Amena) -> u8 {
        Pio019Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio019Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio019Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio019Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio019Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio019Fsel {
        Pio019Fsel::from_bits(val)
    }
}
impl From<Pio019Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio019Fsel) -> u8 {
        Pio019Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio019Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio019Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio019Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio019Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio019Fulldrive {
        Pio019Fulldrive::from_bits(val)
    }
}
impl From<Pio019Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio019Fulldrive) -> u8 {
        Pio019Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio019Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio019Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio019Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio019Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio019Ibena {
        Pio019Ibena::from_bits(val)
    }
}
impl From<Pio019Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio019Ibena) -> u8 {
        Pio019Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio019Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio019Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio019Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio019Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio019Iiena {
        Pio019Iiena::from_bits(val)
    }
}
impl From<Pio019Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio019Iiena) -> u8 {
        Pio019Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio019Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio019Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio019Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio019Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio019Odena {
        Pio019Odena::from_bits(val)
    }
}
impl From<Pio019Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio019Odena) -> u8 {
        Pio019Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio019Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio019Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio019Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio019Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio019Pupdena {
        Pio019Pupdena::from_bits(val)
    }
}
impl From<Pio019Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio019Pupdena) -> u8 {
        Pio019Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio019Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio019Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio019Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio019Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio019Pupdsel {
        Pio019Pupdsel::from_bits(val)
    }
}
impl From<Pio019Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio019Pupdsel) -> u8 {
        Pio019Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio019Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio019Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio019Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio019Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio019Slewrate {
        Pio019Slewrate::from_bits(val)
    }
}
impl From<Pio019Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio019Slewrate) -> u8 {
        Pio019Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio01Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio01Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio01Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio01Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio01Amena {
        Pio01Amena::from_bits(val)
    }
}
impl From<Pio01Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio01Amena) -> u8 {
        Pio01Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio01Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio01Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio01Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio01Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio01Fsel {
        Pio01Fsel::from_bits(val)
    }
}
impl From<Pio01Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio01Fsel) -> u8 {
        Pio01Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio01Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio01Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio01Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio01Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio01Fulldrive {
        Pio01Fulldrive::from_bits(val)
    }
}
impl From<Pio01Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio01Fulldrive) -> u8 {
        Pio01Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio01Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio01Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio01Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio01Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio01Ibena {
        Pio01Ibena::from_bits(val)
    }
}
impl From<Pio01Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio01Ibena) -> u8 {
        Pio01Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio01Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio01Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio01Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio01Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio01Iiena {
        Pio01Iiena::from_bits(val)
    }
}
impl From<Pio01Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio01Iiena) -> u8 {
        Pio01Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio01Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio01Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio01Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio01Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio01Odena {
        Pio01Odena::from_bits(val)
    }
}
impl From<Pio01Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio01Odena) -> u8 {
        Pio01Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio01Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio01Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio01Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio01Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio01Pupdena {
        Pio01Pupdena::from_bits(val)
    }
}
impl From<Pio01Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio01Pupdena) -> u8 {
        Pio01Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio01Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio01Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio01Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio01Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio01Pupdsel {
        Pio01Pupdsel::from_bits(val)
    }
}
impl From<Pio01Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio01Pupdsel) -> u8 {
        Pio01Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio01Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio01Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio01Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio01Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio01Slewrate {
        Pio01Slewrate::from_bits(val)
    }
}
impl From<Pio01Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio01Slewrate) -> u8 {
        Pio01Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio020Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio020Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio020Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio020Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio020Amena {
        Pio020Amena::from_bits(val)
    }
}
impl From<Pio020Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio020Amena) -> u8 {
        Pio020Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio020Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio020Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio020Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio020Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio020Fsel {
        Pio020Fsel::from_bits(val)
    }
}
impl From<Pio020Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio020Fsel) -> u8 {
        Pio020Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio020Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio020Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio020Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio020Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio020Fulldrive {
        Pio020Fulldrive::from_bits(val)
    }
}
impl From<Pio020Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio020Fulldrive) -> u8 {
        Pio020Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio020Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio020Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio020Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio020Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio020Ibena {
        Pio020Ibena::from_bits(val)
    }
}
impl From<Pio020Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio020Ibena) -> u8 {
        Pio020Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio020Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio020Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio020Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio020Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio020Iiena {
        Pio020Iiena::from_bits(val)
    }
}
impl From<Pio020Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio020Iiena) -> u8 {
        Pio020Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio020Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio020Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio020Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio020Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio020Odena {
        Pio020Odena::from_bits(val)
    }
}
impl From<Pio020Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio020Odena) -> u8 {
        Pio020Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio020Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio020Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio020Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio020Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio020Pupdena {
        Pio020Pupdena::from_bits(val)
    }
}
impl From<Pio020Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio020Pupdena) -> u8 {
        Pio020Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio020Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio020Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio020Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio020Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio020Pupdsel {
        Pio020Pupdsel::from_bits(val)
    }
}
impl From<Pio020Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio020Pupdsel) -> u8 {
        Pio020Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio020Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio020Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio020Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio020Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio020Slewrate {
        Pio020Slewrate::from_bits(val)
    }
}
impl From<Pio020Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio020Slewrate) -> u8 {
        Pio020Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio021Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio021Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio021Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio021Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio021Amena {
        Pio021Amena::from_bits(val)
    }
}
impl From<Pio021Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio021Amena) -> u8 {
        Pio021Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio021Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio021Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio021Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio021Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio021Fsel {
        Pio021Fsel::from_bits(val)
    }
}
impl From<Pio021Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio021Fsel) -> u8 {
        Pio021Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio021Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio021Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio021Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio021Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio021Fulldrive {
        Pio021Fulldrive::from_bits(val)
    }
}
impl From<Pio021Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio021Fulldrive) -> u8 {
        Pio021Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio021Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio021Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio021Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio021Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio021Ibena {
        Pio021Ibena::from_bits(val)
    }
}
impl From<Pio021Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio021Ibena) -> u8 {
        Pio021Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio021Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio021Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio021Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio021Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio021Iiena {
        Pio021Iiena::from_bits(val)
    }
}
impl From<Pio021Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio021Iiena) -> u8 {
        Pio021Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio021Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio021Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio021Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio021Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio021Odena {
        Pio021Odena::from_bits(val)
    }
}
impl From<Pio021Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio021Odena) -> u8 {
        Pio021Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio021Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio021Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio021Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio021Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio021Pupdena {
        Pio021Pupdena::from_bits(val)
    }
}
impl From<Pio021Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio021Pupdena) -> u8 {
        Pio021Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio021Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio021Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio021Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio021Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio021Pupdsel {
        Pio021Pupdsel::from_bits(val)
    }
}
impl From<Pio021Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio021Pupdsel) -> u8 {
        Pio021Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio021Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio021Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio021Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio021Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio021Slewrate {
        Pio021Slewrate::from_bits(val)
    }
}
impl From<Pio021Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio021Slewrate) -> u8 {
        Pio021Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio022Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio022Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio022Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio022Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio022Amena {
        Pio022Amena::from_bits(val)
    }
}
impl From<Pio022Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio022Amena) -> u8 {
        Pio022Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio022Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio022Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio022Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio022Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio022Fsel {
        Pio022Fsel::from_bits(val)
    }
}
impl From<Pio022Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio022Fsel) -> u8 {
        Pio022Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio022Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio022Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio022Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio022Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio022Fulldrive {
        Pio022Fulldrive::from_bits(val)
    }
}
impl From<Pio022Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio022Fulldrive) -> u8 {
        Pio022Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio022Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio022Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio022Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio022Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio022Ibena {
        Pio022Ibena::from_bits(val)
    }
}
impl From<Pio022Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio022Ibena) -> u8 {
        Pio022Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio022Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio022Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio022Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio022Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio022Iiena {
        Pio022Iiena::from_bits(val)
    }
}
impl From<Pio022Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio022Iiena) -> u8 {
        Pio022Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio022Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio022Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio022Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio022Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio022Odena {
        Pio022Odena::from_bits(val)
    }
}
impl From<Pio022Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio022Odena) -> u8 {
        Pio022Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio022Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio022Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio022Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio022Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio022Pupdena {
        Pio022Pupdena::from_bits(val)
    }
}
impl From<Pio022Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio022Pupdena) -> u8 {
        Pio022Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio022Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio022Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio022Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio022Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio022Pupdsel {
        Pio022Pupdsel::from_bits(val)
    }
}
impl From<Pio022Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio022Pupdsel) -> u8 {
        Pio022Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio022Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio022Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio022Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio022Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio022Slewrate {
        Pio022Slewrate::from_bits(val)
    }
}
impl From<Pio022Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio022Slewrate) -> u8 {
        Pio022Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio023Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio023Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio023Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio023Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio023Amena {
        Pio023Amena::from_bits(val)
    }
}
impl From<Pio023Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio023Amena) -> u8 {
        Pio023Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio023Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio023Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio023Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio023Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio023Fsel {
        Pio023Fsel::from_bits(val)
    }
}
impl From<Pio023Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio023Fsel) -> u8 {
        Pio023Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio023Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio023Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio023Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio023Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio023Fulldrive {
        Pio023Fulldrive::from_bits(val)
    }
}
impl From<Pio023Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio023Fulldrive) -> u8 {
        Pio023Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio023Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio023Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio023Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio023Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio023Ibena {
        Pio023Ibena::from_bits(val)
    }
}
impl From<Pio023Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio023Ibena) -> u8 {
        Pio023Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio023Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio023Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio023Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio023Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio023Iiena {
        Pio023Iiena::from_bits(val)
    }
}
impl From<Pio023Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio023Iiena) -> u8 {
        Pio023Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio023Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio023Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio023Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio023Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio023Odena {
        Pio023Odena::from_bits(val)
    }
}
impl From<Pio023Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio023Odena) -> u8 {
        Pio023Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio023Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio023Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio023Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio023Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio023Pupdena {
        Pio023Pupdena::from_bits(val)
    }
}
impl From<Pio023Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio023Pupdena) -> u8 {
        Pio023Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio023Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio023Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio023Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio023Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio023Pupdsel {
        Pio023Pupdsel::from_bits(val)
    }
}
impl From<Pio023Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio023Pupdsel) -> u8 {
        Pio023Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio023Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio023Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio023Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio023Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio023Slewrate {
        Pio023Slewrate::from_bits(val)
    }
}
impl From<Pio023Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio023Slewrate) -> u8 {
        Pio023Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio024Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio024Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio024Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio024Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio024Amena {
        Pio024Amena::from_bits(val)
    }
}
impl From<Pio024Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio024Amena) -> u8 {
        Pio024Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio024Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio024Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio024Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio024Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio024Fsel {
        Pio024Fsel::from_bits(val)
    }
}
impl From<Pio024Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio024Fsel) -> u8 {
        Pio024Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio024Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio024Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio024Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio024Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio024Fulldrive {
        Pio024Fulldrive::from_bits(val)
    }
}
impl From<Pio024Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio024Fulldrive) -> u8 {
        Pio024Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio024Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio024Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio024Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio024Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio024Ibena {
        Pio024Ibena::from_bits(val)
    }
}
impl From<Pio024Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio024Ibena) -> u8 {
        Pio024Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio024Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio024Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio024Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio024Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio024Iiena {
        Pio024Iiena::from_bits(val)
    }
}
impl From<Pio024Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio024Iiena) -> u8 {
        Pio024Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio024Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio024Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio024Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio024Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio024Odena {
        Pio024Odena::from_bits(val)
    }
}
impl From<Pio024Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio024Odena) -> u8 {
        Pio024Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio024Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio024Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio024Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio024Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio024Pupdena {
        Pio024Pupdena::from_bits(val)
    }
}
impl From<Pio024Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio024Pupdena) -> u8 {
        Pio024Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio024Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio024Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio024Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio024Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio024Pupdsel {
        Pio024Pupdsel::from_bits(val)
    }
}
impl From<Pio024Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio024Pupdsel) -> u8 {
        Pio024Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio024Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio024Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio024Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio024Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio024Slewrate {
        Pio024Slewrate::from_bits(val)
    }
}
impl From<Pio024Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio024Slewrate) -> u8 {
        Pio024Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio025Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio025Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio025Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio025Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio025Amena {
        Pio025Amena::from_bits(val)
    }
}
impl From<Pio025Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio025Amena) -> u8 {
        Pio025Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio025Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio025Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio025Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio025Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio025Fsel {
        Pio025Fsel::from_bits(val)
    }
}
impl From<Pio025Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio025Fsel) -> u8 {
        Pio025Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio025Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio025Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio025Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio025Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio025Fulldrive {
        Pio025Fulldrive::from_bits(val)
    }
}
impl From<Pio025Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio025Fulldrive) -> u8 {
        Pio025Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio025Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio025Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio025Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio025Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio025Ibena {
        Pio025Ibena::from_bits(val)
    }
}
impl From<Pio025Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio025Ibena) -> u8 {
        Pio025Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio025Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio025Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio025Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio025Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio025Iiena {
        Pio025Iiena::from_bits(val)
    }
}
impl From<Pio025Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio025Iiena) -> u8 {
        Pio025Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio025Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio025Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio025Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio025Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio025Odena {
        Pio025Odena::from_bits(val)
    }
}
impl From<Pio025Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio025Odena) -> u8 {
        Pio025Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio025Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio025Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio025Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio025Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio025Pupdena {
        Pio025Pupdena::from_bits(val)
    }
}
impl From<Pio025Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio025Pupdena) -> u8 {
        Pio025Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio025Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio025Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio025Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio025Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio025Pupdsel {
        Pio025Pupdsel::from_bits(val)
    }
}
impl From<Pio025Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio025Pupdsel) -> u8 {
        Pio025Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio025Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio025Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio025Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio025Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio025Slewrate {
        Pio025Slewrate::from_bits(val)
    }
}
impl From<Pio025Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio025Slewrate) -> u8 {
        Pio025Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio026Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio026Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio026Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio026Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio026Amena {
        Pio026Amena::from_bits(val)
    }
}
impl From<Pio026Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio026Amena) -> u8 {
        Pio026Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio026Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio026Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio026Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio026Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio026Fsel {
        Pio026Fsel::from_bits(val)
    }
}
impl From<Pio026Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio026Fsel) -> u8 {
        Pio026Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio026Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio026Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio026Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio026Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio026Fulldrive {
        Pio026Fulldrive::from_bits(val)
    }
}
impl From<Pio026Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio026Fulldrive) -> u8 {
        Pio026Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio026Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio026Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio026Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio026Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio026Ibena {
        Pio026Ibena::from_bits(val)
    }
}
impl From<Pio026Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio026Ibena) -> u8 {
        Pio026Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio026Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio026Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio026Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio026Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio026Iiena {
        Pio026Iiena::from_bits(val)
    }
}
impl From<Pio026Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio026Iiena) -> u8 {
        Pio026Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio026Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio026Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio026Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio026Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio026Odena {
        Pio026Odena::from_bits(val)
    }
}
impl From<Pio026Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio026Odena) -> u8 {
        Pio026Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio026Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio026Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio026Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio026Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio026Pupdena {
        Pio026Pupdena::from_bits(val)
    }
}
impl From<Pio026Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio026Pupdena) -> u8 {
        Pio026Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio026Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio026Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio026Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio026Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio026Pupdsel {
        Pio026Pupdsel::from_bits(val)
    }
}
impl From<Pio026Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio026Pupdsel) -> u8 {
        Pio026Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio026Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio026Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio026Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio026Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio026Slewrate {
        Pio026Slewrate::from_bits(val)
    }
}
impl From<Pio026Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio026Slewrate) -> u8 {
        Pio026Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio027Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio027Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio027Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio027Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio027Amena {
        Pio027Amena::from_bits(val)
    }
}
impl From<Pio027Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio027Amena) -> u8 {
        Pio027Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio027Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio027Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio027Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio027Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio027Fsel {
        Pio027Fsel::from_bits(val)
    }
}
impl From<Pio027Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio027Fsel) -> u8 {
        Pio027Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio027Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio027Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio027Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio027Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio027Fulldrive {
        Pio027Fulldrive::from_bits(val)
    }
}
impl From<Pio027Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio027Fulldrive) -> u8 {
        Pio027Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio027Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio027Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio027Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio027Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio027Ibena {
        Pio027Ibena::from_bits(val)
    }
}
impl From<Pio027Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio027Ibena) -> u8 {
        Pio027Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio027Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio027Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio027Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio027Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio027Iiena {
        Pio027Iiena::from_bits(val)
    }
}
impl From<Pio027Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio027Iiena) -> u8 {
        Pio027Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio027Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio027Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio027Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio027Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio027Odena {
        Pio027Odena::from_bits(val)
    }
}
impl From<Pio027Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio027Odena) -> u8 {
        Pio027Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio027Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio027Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio027Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio027Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio027Pupdena {
        Pio027Pupdena::from_bits(val)
    }
}
impl From<Pio027Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio027Pupdena) -> u8 {
        Pio027Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio027Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio027Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio027Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio027Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio027Pupdsel {
        Pio027Pupdsel::from_bits(val)
    }
}
impl From<Pio027Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio027Pupdsel) -> u8 {
        Pio027Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio027Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio027Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio027Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio027Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio027Slewrate {
        Pio027Slewrate::from_bits(val)
    }
}
impl From<Pio027Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio027Slewrate) -> u8 {
        Pio027Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio028Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio028Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio028Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio028Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio028Amena {
        Pio028Amena::from_bits(val)
    }
}
impl From<Pio028Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio028Amena) -> u8 {
        Pio028Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio028Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio028Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio028Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio028Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio028Fsel {
        Pio028Fsel::from_bits(val)
    }
}
impl From<Pio028Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio028Fsel) -> u8 {
        Pio028Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio028Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio028Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio028Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio028Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio028Fulldrive {
        Pio028Fulldrive::from_bits(val)
    }
}
impl From<Pio028Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio028Fulldrive) -> u8 {
        Pio028Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio028Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio028Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio028Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio028Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio028Ibena {
        Pio028Ibena::from_bits(val)
    }
}
impl From<Pio028Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio028Ibena) -> u8 {
        Pio028Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio028Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio028Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio028Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio028Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio028Iiena {
        Pio028Iiena::from_bits(val)
    }
}
impl From<Pio028Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio028Iiena) -> u8 {
        Pio028Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio028Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio028Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio028Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio028Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio028Odena {
        Pio028Odena::from_bits(val)
    }
}
impl From<Pio028Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio028Odena) -> u8 {
        Pio028Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio028Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio028Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio028Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio028Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio028Pupdena {
        Pio028Pupdena::from_bits(val)
    }
}
impl From<Pio028Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio028Pupdena) -> u8 {
        Pio028Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio028Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio028Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio028Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio028Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio028Pupdsel {
        Pio028Pupdsel::from_bits(val)
    }
}
impl From<Pio028Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio028Pupdsel) -> u8 {
        Pio028Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio028Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio028Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio028Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio028Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio028Slewrate {
        Pio028Slewrate::from_bits(val)
    }
}
impl From<Pio028Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio028Slewrate) -> u8 {
        Pio028Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio029Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio029Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio029Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio029Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio029Amena {
        Pio029Amena::from_bits(val)
    }
}
impl From<Pio029Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio029Amena) -> u8 {
        Pio029Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio029Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio029Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio029Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio029Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio029Fsel {
        Pio029Fsel::from_bits(val)
    }
}
impl From<Pio029Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio029Fsel) -> u8 {
        Pio029Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio029Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio029Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio029Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio029Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio029Fulldrive {
        Pio029Fulldrive::from_bits(val)
    }
}
impl From<Pio029Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio029Fulldrive) -> u8 {
        Pio029Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio029Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio029Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio029Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio029Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio029Ibena {
        Pio029Ibena::from_bits(val)
    }
}
impl From<Pio029Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio029Ibena) -> u8 {
        Pio029Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio029Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio029Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio029Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio029Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio029Iiena {
        Pio029Iiena::from_bits(val)
    }
}
impl From<Pio029Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio029Iiena) -> u8 {
        Pio029Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio029Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio029Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio029Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio029Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio029Odena {
        Pio029Odena::from_bits(val)
    }
}
impl From<Pio029Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio029Odena) -> u8 {
        Pio029Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio029Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio029Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio029Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio029Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio029Pupdena {
        Pio029Pupdena::from_bits(val)
    }
}
impl From<Pio029Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio029Pupdena) -> u8 {
        Pio029Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio029Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio029Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio029Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio029Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio029Pupdsel {
        Pio029Pupdsel::from_bits(val)
    }
}
impl From<Pio029Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio029Pupdsel) -> u8 {
        Pio029Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio029Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio029Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio029Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio029Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio029Slewrate {
        Pio029Slewrate::from_bits(val)
    }
}
impl From<Pio029Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio029Slewrate) -> u8 {
        Pio029Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio02Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio02Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio02Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio02Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio02Amena {
        Pio02Amena::from_bits(val)
    }
}
impl From<Pio02Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio02Amena) -> u8 {
        Pio02Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio02Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio02Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio02Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio02Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio02Fsel {
        Pio02Fsel::from_bits(val)
    }
}
impl From<Pio02Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio02Fsel) -> u8 {
        Pio02Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio02Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio02Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio02Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio02Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio02Fulldrive {
        Pio02Fulldrive::from_bits(val)
    }
}
impl From<Pio02Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio02Fulldrive) -> u8 {
        Pio02Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio02Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio02Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio02Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio02Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio02Ibena {
        Pio02Ibena::from_bits(val)
    }
}
impl From<Pio02Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio02Ibena) -> u8 {
        Pio02Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio02Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio02Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio02Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio02Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio02Iiena {
        Pio02Iiena::from_bits(val)
    }
}
impl From<Pio02Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio02Iiena) -> u8 {
        Pio02Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio02Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio02Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio02Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio02Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio02Odena {
        Pio02Odena::from_bits(val)
    }
}
impl From<Pio02Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio02Odena) -> u8 {
        Pio02Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio02Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio02Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio02Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio02Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio02Pupdena {
        Pio02Pupdena::from_bits(val)
    }
}
impl From<Pio02Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio02Pupdena) -> u8 {
        Pio02Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio02Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio02Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio02Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio02Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio02Pupdsel {
        Pio02Pupdsel::from_bits(val)
    }
}
impl From<Pio02Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio02Pupdsel) -> u8 {
        Pio02Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio02Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio02Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio02Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio02Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio02Slewrate {
        Pio02Slewrate::from_bits(val)
    }
}
impl From<Pio02Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio02Slewrate) -> u8 {
        Pio02Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio030Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio030Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio030Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio030Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio030Amena {
        Pio030Amena::from_bits(val)
    }
}
impl From<Pio030Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio030Amena) -> u8 {
        Pio030Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio030Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio030Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio030Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio030Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio030Fsel {
        Pio030Fsel::from_bits(val)
    }
}
impl From<Pio030Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio030Fsel) -> u8 {
        Pio030Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio030Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio030Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio030Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio030Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio030Fulldrive {
        Pio030Fulldrive::from_bits(val)
    }
}
impl From<Pio030Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio030Fulldrive) -> u8 {
        Pio030Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio030Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio030Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio030Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio030Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio030Ibena {
        Pio030Ibena::from_bits(val)
    }
}
impl From<Pio030Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio030Ibena) -> u8 {
        Pio030Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio030Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio030Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio030Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio030Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio030Iiena {
        Pio030Iiena::from_bits(val)
    }
}
impl From<Pio030Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio030Iiena) -> u8 {
        Pio030Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio030Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio030Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio030Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio030Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio030Odena {
        Pio030Odena::from_bits(val)
    }
}
impl From<Pio030Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio030Odena) -> u8 {
        Pio030Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio030Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio030Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio030Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio030Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio030Pupdena {
        Pio030Pupdena::from_bits(val)
    }
}
impl From<Pio030Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio030Pupdena) -> u8 {
        Pio030Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio030Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio030Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio030Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio030Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio030Pupdsel {
        Pio030Pupdsel::from_bits(val)
    }
}
impl From<Pio030Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio030Pupdsel) -> u8 {
        Pio030Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio030Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio030Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio030Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio030Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio030Slewrate {
        Pio030Slewrate::from_bits(val)
    }
}
impl From<Pio030Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio030Slewrate) -> u8 {
        Pio030Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio031Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio031Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio031Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio031Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio031Amena {
        Pio031Amena::from_bits(val)
    }
}
impl From<Pio031Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio031Amena) -> u8 {
        Pio031Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio031Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio031Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio031Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio031Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio031Fsel {
        Pio031Fsel::from_bits(val)
    }
}
impl From<Pio031Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio031Fsel) -> u8 {
        Pio031Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio031Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio031Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio031Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio031Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio031Fulldrive {
        Pio031Fulldrive::from_bits(val)
    }
}
impl From<Pio031Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio031Fulldrive) -> u8 {
        Pio031Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio031Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio031Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio031Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio031Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio031Ibena {
        Pio031Ibena::from_bits(val)
    }
}
impl From<Pio031Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio031Ibena) -> u8 {
        Pio031Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio031Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio031Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio031Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio031Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio031Iiena {
        Pio031Iiena::from_bits(val)
    }
}
impl From<Pio031Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio031Iiena) -> u8 {
        Pio031Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio031Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio031Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio031Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio031Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio031Odena {
        Pio031Odena::from_bits(val)
    }
}
impl From<Pio031Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio031Odena) -> u8 {
        Pio031Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio031Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio031Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio031Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio031Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio031Pupdena {
        Pio031Pupdena::from_bits(val)
    }
}
impl From<Pio031Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio031Pupdena) -> u8 {
        Pio031Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio031Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio031Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio031Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio031Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio031Pupdsel {
        Pio031Pupdsel::from_bits(val)
    }
}
impl From<Pio031Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio031Pupdsel) -> u8 {
        Pio031Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio031Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio031Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio031Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio031Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio031Slewrate {
        Pio031Slewrate::from_bits(val)
    }
}
impl From<Pio031Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio031Slewrate) -> u8 {
        Pio031Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio03Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio03Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio03Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio03Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio03Amena {
        Pio03Amena::from_bits(val)
    }
}
impl From<Pio03Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio03Amena) -> u8 {
        Pio03Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio03Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio03Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio03Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio03Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio03Fsel {
        Pio03Fsel::from_bits(val)
    }
}
impl From<Pio03Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio03Fsel) -> u8 {
        Pio03Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio03Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio03Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio03Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio03Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio03Fulldrive {
        Pio03Fulldrive::from_bits(val)
    }
}
impl From<Pio03Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio03Fulldrive) -> u8 {
        Pio03Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio03Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio03Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio03Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio03Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio03Ibena {
        Pio03Ibena::from_bits(val)
    }
}
impl From<Pio03Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio03Ibena) -> u8 {
        Pio03Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio03Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio03Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio03Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio03Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio03Iiena {
        Pio03Iiena::from_bits(val)
    }
}
impl From<Pio03Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio03Iiena) -> u8 {
        Pio03Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio03Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio03Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio03Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio03Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio03Odena {
        Pio03Odena::from_bits(val)
    }
}
impl From<Pio03Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio03Odena) -> u8 {
        Pio03Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio03Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio03Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio03Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio03Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio03Pupdena {
        Pio03Pupdena::from_bits(val)
    }
}
impl From<Pio03Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio03Pupdena) -> u8 {
        Pio03Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio03Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio03Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio03Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio03Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio03Pupdsel {
        Pio03Pupdsel::from_bits(val)
    }
}
impl From<Pio03Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio03Pupdsel) -> u8 {
        Pio03Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio03Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio03Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio03Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio03Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio03Slewrate {
        Pio03Slewrate::from_bits(val)
    }
}
impl From<Pio03Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio03Slewrate) -> u8 {
        Pio03Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio04Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio04Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio04Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio04Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio04Amena {
        Pio04Amena::from_bits(val)
    }
}
impl From<Pio04Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio04Amena) -> u8 {
        Pio04Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio04Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio04Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio04Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio04Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio04Fsel {
        Pio04Fsel::from_bits(val)
    }
}
impl From<Pio04Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio04Fsel) -> u8 {
        Pio04Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio04Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio04Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio04Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio04Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio04Fulldrive {
        Pio04Fulldrive::from_bits(val)
    }
}
impl From<Pio04Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio04Fulldrive) -> u8 {
        Pio04Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio04Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio04Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio04Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio04Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio04Ibena {
        Pio04Ibena::from_bits(val)
    }
}
impl From<Pio04Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio04Ibena) -> u8 {
        Pio04Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio04Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio04Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio04Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio04Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio04Iiena {
        Pio04Iiena::from_bits(val)
    }
}
impl From<Pio04Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio04Iiena) -> u8 {
        Pio04Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio04Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio04Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio04Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio04Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio04Odena {
        Pio04Odena::from_bits(val)
    }
}
impl From<Pio04Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio04Odena) -> u8 {
        Pio04Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio04Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio04Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio04Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio04Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio04Pupdena {
        Pio04Pupdena::from_bits(val)
    }
}
impl From<Pio04Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio04Pupdena) -> u8 {
        Pio04Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio04Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio04Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio04Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio04Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio04Pupdsel {
        Pio04Pupdsel::from_bits(val)
    }
}
impl From<Pio04Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio04Pupdsel) -> u8 {
        Pio04Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio04Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio04Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio04Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio04Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio04Slewrate {
        Pio04Slewrate::from_bits(val)
    }
}
impl From<Pio04Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio04Slewrate) -> u8 {
        Pio04Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio05Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio05Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio05Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio05Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio05Amena {
        Pio05Amena::from_bits(val)
    }
}
impl From<Pio05Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio05Amena) -> u8 {
        Pio05Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio05Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio05Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio05Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio05Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio05Fsel {
        Pio05Fsel::from_bits(val)
    }
}
impl From<Pio05Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio05Fsel) -> u8 {
        Pio05Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio05Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio05Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio05Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio05Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio05Fulldrive {
        Pio05Fulldrive::from_bits(val)
    }
}
impl From<Pio05Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio05Fulldrive) -> u8 {
        Pio05Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio05Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio05Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio05Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio05Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio05Ibena {
        Pio05Ibena::from_bits(val)
    }
}
impl From<Pio05Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio05Ibena) -> u8 {
        Pio05Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio05Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio05Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio05Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio05Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio05Iiena {
        Pio05Iiena::from_bits(val)
    }
}
impl From<Pio05Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio05Iiena) -> u8 {
        Pio05Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio05Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio05Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio05Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio05Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio05Odena {
        Pio05Odena::from_bits(val)
    }
}
impl From<Pio05Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio05Odena) -> u8 {
        Pio05Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio05Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio05Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio05Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio05Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio05Pupdena {
        Pio05Pupdena::from_bits(val)
    }
}
impl From<Pio05Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio05Pupdena) -> u8 {
        Pio05Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio05Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio05Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio05Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio05Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio05Pupdsel {
        Pio05Pupdsel::from_bits(val)
    }
}
impl From<Pio05Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio05Pupdsel) -> u8 {
        Pio05Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio05Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio05Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio05Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio05Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio05Slewrate {
        Pio05Slewrate::from_bits(val)
    }
}
impl From<Pio05Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio05Slewrate) -> u8 {
        Pio05Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio06Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio06Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio06Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio06Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio06Amena {
        Pio06Amena::from_bits(val)
    }
}
impl From<Pio06Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio06Amena) -> u8 {
        Pio06Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio06Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio06Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio06Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio06Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio06Fsel {
        Pio06Fsel::from_bits(val)
    }
}
impl From<Pio06Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio06Fsel) -> u8 {
        Pio06Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio06Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio06Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio06Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio06Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio06Fulldrive {
        Pio06Fulldrive::from_bits(val)
    }
}
impl From<Pio06Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio06Fulldrive) -> u8 {
        Pio06Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio06Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio06Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio06Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio06Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio06Ibena {
        Pio06Ibena::from_bits(val)
    }
}
impl From<Pio06Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio06Ibena) -> u8 {
        Pio06Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio06Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio06Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio06Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio06Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio06Iiena {
        Pio06Iiena::from_bits(val)
    }
}
impl From<Pio06Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio06Iiena) -> u8 {
        Pio06Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio06Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio06Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio06Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio06Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio06Odena {
        Pio06Odena::from_bits(val)
    }
}
impl From<Pio06Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio06Odena) -> u8 {
        Pio06Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio06Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio06Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio06Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio06Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio06Pupdena {
        Pio06Pupdena::from_bits(val)
    }
}
impl From<Pio06Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio06Pupdena) -> u8 {
        Pio06Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio06Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio06Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio06Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio06Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio06Pupdsel {
        Pio06Pupdsel::from_bits(val)
    }
}
impl From<Pio06Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio06Pupdsel) -> u8 {
        Pio06Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio06Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio06Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio06Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio06Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio06Slewrate {
        Pio06Slewrate::from_bits(val)
    }
}
impl From<Pio06Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio06Slewrate) -> u8 {
        Pio06Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio07Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio07Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio07Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio07Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio07Amena {
        Pio07Amena::from_bits(val)
    }
}
impl From<Pio07Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio07Amena) -> u8 {
        Pio07Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio07Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio07Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio07Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio07Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio07Fsel {
        Pio07Fsel::from_bits(val)
    }
}
impl From<Pio07Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio07Fsel) -> u8 {
        Pio07Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio07Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio07Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio07Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio07Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio07Fulldrive {
        Pio07Fulldrive::from_bits(val)
    }
}
impl From<Pio07Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio07Fulldrive) -> u8 {
        Pio07Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio07Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio07Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio07Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio07Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio07Ibena {
        Pio07Ibena::from_bits(val)
    }
}
impl From<Pio07Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio07Ibena) -> u8 {
        Pio07Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio07Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio07Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio07Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio07Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio07Iiena {
        Pio07Iiena::from_bits(val)
    }
}
impl From<Pio07Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio07Iiena) -> u8 {
        Pio07Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio07Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio07Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio07Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio07Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio07Odena {
        Pio07Odena::from_bits(val)
    }
}
impl From<Pio07Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio07Odena) -> u8 {
        Pio07Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio07Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio07Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio07Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio07Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio07Pupdena {
        Pio07Pupdena::from_bits(val)
    }
}
impl From<Pio07Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio07Pupdena) -> u8 {
        Pio07Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio07Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio07Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio07Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio07Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio07Pupdsel {
        Pio07Pupdsel::from_bits(val)
    }
}
impl From<Pio07Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio07Pupdsel) -> u8 {
        Pio07Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio07Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio07Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio07Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio07Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio07Slewrate {
        Pio07Slewrate::from_bits(val)
    }
}
impl From<Pio07Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio07Slewrate) -> u8 {
        Pio07Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio08Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio08Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio08Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio08Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio08Amena {
        Pio08Amena::from_bits(val)
    }
}
impl From<Pio08Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio08Amena) -> u8 {
        Pio08Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio08Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio08Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio08Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio08Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio08Fsel {
        Pio08Fsel::from_bits(val)
    }
}
impl From<Pio08Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio08Fsel) -> u8 {
        Pio08Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio08Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio08Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio08Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio08Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio08Fulldrive {
        Pio08Fulldrive::from_bits(val)
    }
}
impl From<Pio08Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio08Fulldrive) -> u8 {
        Pio08Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio08Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio08Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio08Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio08Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio08Ibena {
        Pio08Ibena::from_bits(val)
    }
}
impl From<Pio08Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio08Ibena) -> u8 {
        Pio08Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio08Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio08Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio08Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio08Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio08Iiena {
        Pio08Iiena::from_bits(val)
    }
}
impl From<Pio08Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio08Iiena) -> u8 {
        Pio08Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio08Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio08Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio08Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio08Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio08Odena {
        Pio08Odena::from_bits(val)
    }
}
impl From<Pio08Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio08Odena) -> u8 {
        Pio08Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio08Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio08Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio08Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio08Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio08Pupdena {
        Pio08Pupdena::from_bits(val)
    }
}
impl From<Pio08Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio08Pupdena) -> u8 {
        Pio08Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio08Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio08Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio08Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio08Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio08Pupdsel {
        Pio08Pupdsel::from_bits(val)
    }
}
impl From<Pio08Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio08Pupdsel) -> u8 {
        Pio08Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio08Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio08Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio08Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio08Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio08Slewrate {
        Pio08Slewrate::from_bits(val)
    }
}
impl From<Pio08Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio08Slewrate) -> u8 {
        Pio08Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio09Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio09Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio09Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio09Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio09Amena {
        Pio09Amena::from_bits(val)
    }
}
impl From<Pio09Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio09Amena) -> u8 {
        Pio09Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio09Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio09Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio09Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio09Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio09Fsel {
        Pio09Fsel::from_bits(val)
    }
}
impl From<Pio09Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio09Fsel) -> u8 {
        Pio09Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio09Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio09Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio09Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio09Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio09Fulldrive {
        Pio09Fulldrive::from_bits(val)
    }
}
impl From<Pio09Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio09Fulldrive) -> u8 {
        Pio09Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio09Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio09Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio09Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio09Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio09Ibena {
        Pio09Ibena::from_bits(val)
    }
}
impl From<Pio09Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio09Ibena) -> u8 {
        Pio09Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio09Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio09Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio09Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio09Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio09Iiena {
        Pio09Iiena::from_bits(val)
    }
}
impl From<Pio09Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio09Iiena) -> u8 {
        Pio09Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio09Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio09Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio09Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio09Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio09Odena {
        Pio09Odena::from_bits(val)
    }
}
impl From<Pio09Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio09Odena) -> u8 {
        Pio09Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio09Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio09Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio09Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio09Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio09Pupdena {
        Pio09Pupdena::from_bits(val)
    }
}
impl From<Pio09Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio09Pupdena) -> u8 {
        Pio09Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio09Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio09Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio09Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio09Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio09Pupdsel {
        Pio09Pupdsel::from_bits(val)
    }
}
impl From<Pio09Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio09Pupdsel) -> u8 {
        Pio09Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio09Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio09Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio09Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio09Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio09Slewrate {
        Pio09Slewrate::from_bits(val)
    }
}
impl From<Pio09Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio09Slewrate) -> u8 {
        Pio09Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio10Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio10Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio10Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio10Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio10Amena {
        Pio10Amena::from_bits(val)
    }
}
impl From<Pio10Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio10Amena) -> u8 {
        Pio10Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio10Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio10Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio10Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio10Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio10Fsel {
        Pio10Fsel::from_bits(val)
    }
}
impl From<Pio10Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio10Fsel) -> u8 {
        Pio10Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio10Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio10Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio10Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio10Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio10Fulldrive {
        Pio10Fulldrive::from_bits(val)
    }
}
impl From<Pio10Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio10Fulldrive) -> u8 {
        Pio10Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio10Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio10Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio10Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio10Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio10Ibena {
        Pio10Ibena::from_bits(val)
    }
}
impl From<Pio10Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio10Ibena) -> u8 {
        Pio10Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio10Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio10Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio10Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio10Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio10Iiena {
        Pio10Iiena::from_bits(val)
    }
}
impl From<Pio10Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio10Iiena) -> u8 {
        Pio10Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio10Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio10Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio10Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio10Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio10Odena {
        Pio10Odena::from_bits(val)
    }
}
impl From<Pio10Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio10Odena) -> u8 {
        Pio10Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio10Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio10Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio10Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio10Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio10Pupdena {
        Pio10Pupdena::from_bits(val)
    }
}
impl From<Pio10Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio10Pupdena) -> u8 {
        Pio10Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio10Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio10Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio10Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio10Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio10Pupdsel {
        Pio10Pupdsel::from_bits(val)
    }
}
impl From<Pio10Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio10Pupdsel) -> u8 {
        Pio10Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio10Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio10Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio10Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio10Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio10Slewrate {
        Pio10Slewrate::from_bits(val)
    }
}
impl From<Pio10Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio10Slewrate) -> u8 {
        Pio10Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio110Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio110Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio110Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio110Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio110Amena {
        Pio110Amena::from_bits(val)
    }
}
impl From<Pio110Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio110Amena) -> u8 {
        Pio110Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio110Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio110Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio110Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio110Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio110Fsel {
        Pio110Fsel::from_bits(val)
    }
}
impl From<Pio110Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio110Fsel) -> u8 {
        Pio110Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio110Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio110Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio110Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio110Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio110Fulldrive {
        Pio110Fulldrive::from_bits(val)
    }
}
impl From<Pio110Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio110Fulldrive) -> u8 {
        Pio110Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio110Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio110Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio110Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio110Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio110Ibena {
        Pio110Ibena::from_bits(val)
    }
}
impl From<Pio110Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio110Ibena) -> u8 {
        Pio110Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio110Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio110Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio110Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio110Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio110Iiena {
        Pio110Iiena::from_bits(val)
    }
}
impl From<Pio110Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio110Iiena) -> u8 {
        Pio110Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio110Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio110Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio110Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio110Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio110Odena {
        Pio110Odena::from_bits(val)
    }
}
impl From<Pio110Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio110Odena) -> u8 {
        Pio110Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio110Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio110Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio110Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio110Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio110Pupdena {
        Pio110Pupdena::from_bits(val)
    }
}
impl From<Pio110Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio110Pupdena) -> u8 {
        Pio110Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio110Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio110Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio110Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio110Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio110Pupdsel {
        Pio110Pupdsel::from_bits(val)
    }
}
impl From<Pio110Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio110Pupdsel) -> u8 {
        Pio110Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio110Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio110Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio110Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio110Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio110Slewrate {
        Pio110Slewrate::from_bits(val)
    }
}
impl From<Pio110Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio110Slewrate) -> u8 {
        Pio110Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio111Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio111Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio111Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio111Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio111Amena {
        Pio111Amena::from_bits(val)
    }
}
impl From<Pio111Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio111Amena) -> u8 {
        Pio111Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio111Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio111Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio111Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio111Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio111Fsel {
        Pio111Fsel::from_bits(val)
    }
}
impl From<Pio111Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio111Fsel) -> u8 {
        Pio111Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio111Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio111Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio111Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio111Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio111Fulldrive {
        Pio111Fulldrive::from_bits(val)
    }
}
impl From<Pio111Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio111Fulldrive) -> u8 {
        Pio111Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio111Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio111Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio111Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio111Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio111Ibena {
        Pio111Ibena::from_bits(val)
    }
}
impl From<Pio111Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio111Ibena) -> u8 {
        Pio111Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio111Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio111Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio111Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio111Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio111Iiena {
        Pio111Iiena::from_bits(val)
    }
}
impl From<Pio111Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio111Iiena) -> u8 {
        Pio111Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio111Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio111Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio111Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio111Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio111Odena {
        Pio111Odena::from_bits(val)
    }
}
impl From<Pio111Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio111Odena) -> u8 {
        Pio111Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio111Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio111Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio111Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio111Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio111Pupdena {
        Pio111Pupdena::from_bits(val)
    }
}
impl From<Pio111Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio111Pupdena) -> u8 {
        Pio111Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio111Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio111Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio111Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio111Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio111Pupdsel {
        Pio111Pupdsel::from_bits(val)
    }
}
impl From<Pio111Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio111Pupdsel) -> u8 {
        Pio111Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio111Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio111Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio111Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio111Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio111Slewrate {
        Pio111Slewrate::from_bits(val)
    }
}
impl From<Pio111Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio111Slewrate) -> u8 {
        Pio111Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio112Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio112Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio112Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio112Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio112Amena {
        Pio112Amena::from_bits(val)
    }
}
impl From<Pio112Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio112Amena) -> u8 {
        Pio112Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio112Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio112Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio112Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio112Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio112Fsel {
        Pio112Fsel::from_bits(val)
    }
}
impl From<Pio112Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio112Fsel) -> u8 {
        Pio112Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio112Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio112Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio112Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio112Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio112Fulldrive {
        Pio112Fulldrive::from_bits(val)
    }
}
impl From<Pio112Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio112Fulldrive) -> u8 {
        Pio112Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio112Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio112Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio112Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio112Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio112Ibena {
        Pio112Ibena::from_bits(val)
    }
}
impl From<Pio112Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio112Ibena) -> u8 {
        Pio112Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio112Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio112Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio112Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio112Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio112Iiena {
        Pio112Iiena::from_bits(val)
    }
}
impl From<Pio112Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio112Iiena) -> u8 {
        Pio112Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio112Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio112Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio112Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio112Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio112Odena {
        Pio112Odena::from_bits(val)
    }
}
impl From<Pio112Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio112Odena) -> u8 {
        Pio112Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio112Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio112Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio112Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio112Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio112Pupdena {
        Pio112Pupdena::from_bits(val)
    }
}
impl From<Pio112Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio112Pupdena) -> u8 {
        Pio112Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio112Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio112Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio112Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio112Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio112Pupdsel {
        Pio112Pupdsel::from_bits(val)
    }
}
impl From<Pio112Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio112Pupdsel) -> u8 {
        Pio112Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio112Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio112Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio112Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio112Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio112Slewrate {
        Pio112Slewrate::from_bits(val)
    }
}
impl From<Pio112Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio112Slewrate) -> u8 {
        Pio112Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio113Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio113Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio113Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio113Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio113Amena {
        Pio113Amena::from_bits(val)
    }
}
impl From<Pio113Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio113Amena) -> u8 {
        Pio113Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio113Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio113Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio113Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio113Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio113Fsel {
        Pio113Fsel::from_bits(val)
    }
}
impl From<Pio113Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio113Fsel) -> u8 {
        Pio113Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio113Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio113Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio113Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio113Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio113Fulldrive {
        Pio113Fulldrive::from_bits(val)
    }
}
impl From<Pio113Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio113Fulldrive) -> u8 {
        Pio113Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio113Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio113Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio113Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio113Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio113Ibena {
        Pio113Ibena::from_bits(val)
    }
}
impl From<Pio113Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio113Ibena) -> u8 {
        Pio113Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio113Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio113Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio113Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio113Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio113Iiena {
        Pio113Iiena::from_bits(val)
    }
}
impl From<Pio113Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio113Iiena) -> u8 {
        Pio113Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio113Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio113Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio113Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio113Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio113Odena {
        Pio113Odena::from_bits(val)
    }
}
impl From<Pio113Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio113Odena) -> u8 {
        Pio113Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio113Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio113Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio113Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio113Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio113Pupdena {
        Pio113Pupdena::from_bits(val)
    }
}
impl From<Pio113Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio113Pupdena) -> u8 {
        Pio113Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio113Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio113Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio113Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio113Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio113Pupdsel {
        Pio113Pupdsel::from_bits(val)
    }
}
impl From<Pio113Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio113Pupdsel) -> u8 {
        Pio113Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio113Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio113Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio113Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio113Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio113Slewrate {
        Pio113Slewrate::from_bits(val)
    }
}
impl From<Pio113Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio113Slewrate) -> u8 {
        Pio113Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio114Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio114Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio114Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio114Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio114Amena {
        Pio114Amena::from_bits(val)
    }
}
impl From<Pio114Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio114Amena) -> u8 {
        Pio114Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio114Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio114Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio114Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio114Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio114Fsel {
        Pio114Fsel::from_bits(val)
    }
}
impl From<Pio114Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio114Fsel) -> u8 {
        Pio114Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio114Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio114Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio114Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio114Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio114Fulldrive {
        Pio114Fulldrive::from_bits(val)
    }
}
impl From<Pio114Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio114Fulldrive) -> u8 {
        Pio114Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio114Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio114Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio114Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio114Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio114Ibena {
        Pio114Ibena::from_bits(val)
    }
}
impl From<Pio114Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio114Ibena) -> u8 {
        Pio114Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio114Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio114Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio114Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio114Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio114Iiena {
        Pio114Iiena::from_bits(val)
    }
}
impl From<Pio114Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio114Iiena) -> u8 {
        Pio114Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio114Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio114Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio114Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio114Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio114Odena {
        Pio114Odena::from_bits(val)
    }
}
impl From<Pio114Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio114Odena) -> u8 {
        Pio114Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio114Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio114Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio114Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio114Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio114Pupdena {
        Pio114Pupdena::from_bits(val)
    }
}
impl From<Pio114Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio114Pupdena) -> u8 {
        Pio114Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio114Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio114Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio114Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio114Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio114Pupdsel {
        Pio114Pupdsel::from_bits(val)
    }
}
impl From<Pio114Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio114Pupdsel) -> u8 {
        Pio114Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio114Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio114Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio114Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio114Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio114Slewrate {
        Pio114Slewrate::from_bits(val)
    }
}
impl From<Pio114Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio114Slewrate) -> u8 {
        Pio114Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio115Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio115Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio115Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio115Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio115Amena {
        Pio115Amena::from_bits(val)
    }
}
impl From<Pio115Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio115Amena) -> u8 {
        Pio115Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio115Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio115Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio115Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio115Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio115Fsel {
        Pio115Fsel::from_bits(val)
    }
}
impl From<Pio115Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio115Fsel) -> u8 {
        Pio115Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio115Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio115Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio115Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio115Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio115Fulldrive {
        Pio115Fulldrive::from_bits(val)
    }
}
impl From<Pio115Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio115Fulldrive) -> u8 {
        Pio115Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio115Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio115Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio115Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio115Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio115Ibena {
        Pio115Ibena::from_bits(val)
    }
}
impl From<Pio115Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio115Ibena) -> u8 {
        Pio115Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio115Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio115Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio115Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio115Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio115Iiena {
        Pio115Iiena::from_bits(val)
    }
}
impl From<Pio115Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio115Iiena) -> u8 {
        Pio115Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio115Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio115Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio115Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio115Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio115Odena {
        Pio115Odena::from_bits(val)
    }
}
impl From<Pio115Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio115Odena) -> u8 {
        Pio115Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio115Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio115Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio115Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio115Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio115Pupdena {
        Pio115Pupdena::from_bits(val)
    }
}
impl From<Pio115Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio115Pupdena) -> u8 {
        Pio115Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio115Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio115Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio115Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio115Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio115Pupdsel {
        Pio115Pupdsel::from_bits(val)
    }
}
impl From<Pio115Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio115Pupdsel) -> u8 {
        Pio115Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio115Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio115Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio115Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio115Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio115Slewrate {
        Pio115Slewrate::from_bits(val)
    }
}
impl From<Pio115Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio115Slewrate) -> u8 {
        Pio115Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio116Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio116Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio116Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio116Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio116Amena {
        Pio116Amena::from_bits(val)
    }
}
impl From<Pio116Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio116Amena) -> u8 {
        Pio116Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio116Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio116Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio116Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio116Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio116Fsel {
        Pio116Fsel::from_bits(val)
    }
}
impl From<Pio116Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio116Fsel) -> u8 {
        Pio116Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio116Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio116Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio116Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio116Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio116Fulldrive {
        Pio116Fulldrive::from_bits(val)
    }
}
impl From<Pio116Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio116Fulldrive) -> u8 {
        Pio116Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio116Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio116Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio116Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio116Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio116Ibena {
        Pio116Ibena::from_bits(val)
    }
}
impl From<Pio116Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio116Ibena) -> u8 {
        Pio116Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio116Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio116Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio116Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio116Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio116Iiena {
        Pio116Iiena::from_bits(val)
    }
}
impl From<Pio116Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio116Iiena) -> u8 {
        Pio116Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio116Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio116Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio116Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio116Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio116Odena {
        Pio116Odena::from_bits(val)
    }
}
impl From<Pio116Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio116Odena) -> u8 {
        Pio116Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio116Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio116Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio116Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio116Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio116Pupdena {
        Pio116Pupdena::from_bits(val)
    }
}
impl From<Pio116Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio116Pupdena) -> u8 {
        Pio116Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio116Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio116Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio116Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio116Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio116Pupdsel {
        Pio116Pupdsel::from_bits(val)
    }
}
impl From<Pio116Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio116Pupdsel) -> u8 {
        Pio116Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio116Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio116Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio116Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio116Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio116Slewrate {
        Pio116Slewrate::from_bits(val)
    }
}
impl From<Pio116Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio116Slewrate) -> u8 {
        Pio116Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio117Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio117Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio117Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio117Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio117Amena {
        Pio117Amena::from_bits(val)
    }
}
impl From<Pio117Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio117Amena) -> u8 {
        Pio117Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio117Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio117Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio117Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio117Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio117Fsel {
        Pio117Fsel::from_bits(val)
    }
}
impl From<Pio117Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio117Fsel) -> u8 {
        Pio117Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio117Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio117Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio117Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio117Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio117Fulldrive {
        Pio117Fulldrive::from_bits(val)
    }
}
impl From<Pio117Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio117Fulldrive) -> u8 {
        Pio117Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio117Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio117Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio117Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio117Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio117Ibena {
        Pio117Ibena::from_bits(val)
    }
}
impl From<Pio117Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio117Ibena) -> u8 {
        Pio117Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio117Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio117Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio117Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio117Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio117Iiena {
        Pio117Iiena::from_bits(val)
    }
}
impl From<Pio117Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio117Iiena) -> u8 {
        Pio117Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio117Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio117Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio117Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio117Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio117Odena {
        Pio117Odena::from_bits(val)
    }
}
impl From<Pio117Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio117Odena) -> u8 {
        Pio117Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio117Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio117Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio117Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio117Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio117Pupdena {
        Pio117Pupdena::from_bits(val)
    }
}
impl From<Pio117Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio117Pupdena) -> u8 {
        Pio117Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio117Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio117Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio117Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio117Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio117Pupdsel {
        Pio117Pupdsel::from_bits(val)
    }
}
impl From<Pio117Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio117Pupdsel) -> u8 {
        Pio117Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio117Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio117Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio117Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio117Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio117Slewrate {
        Pio117Slewrate::from_bits(val)
    }
}
impl From<Pio117Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio117Slewrate) -> u8 {
        Pio117Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio118Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio118Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio118Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio118Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio118Amena {
        Pio118Amena::from_bits(val)
    }
}
impl From<Pio118Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio118Amena) -> u8 {
        Pio118Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio118Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio118Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio118Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio118Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio118Fsel {
        Pio118Fsel::from_bits(val)
    }
}
impl From<Pio118Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio118Fsel) -> u8 {
        Pio118Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio118Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio118Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio118Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio118Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio118Fulldrive {
        Pio118Fulldrive::from_bits(val)
    }
}
impl From<Pio118Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio118Fulldrive) -> u8 {
        Pio118Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio118Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio118Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio118Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio118Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio118Ibena {
        Pio118Ibena::from_bits(val)
    }
}
impl From<Pio118Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio118Ibena) -> u8 {
        Pio118Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio118Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio118Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio118Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio118Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio118Iiena {
        Pio118Iiena::from_bits(val)
    }
}
impl From<Pio118Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio118Iiena) -> u8 {
        Pio118Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio118Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio118Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio118Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio118Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio118Odena {
        Pio118Odena::from_bits(val)
    }
}
impl From<Pio118Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio118Odena) -> u8 {
        Pio118Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio118Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio118Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio118Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio118Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio118Pupdena {
        Pio118Pupdena::from_bits(val)
    }
}
impl From<Pio118Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio118Pupdena) -> u8 {
        Pio118Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio118Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio118Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio118Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio118Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio118Pupdsel {
        Pio118Pupdsel::from_bits(val)
    }
}
impl From<Pio118Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio118Pupdsel) -> u8 {
        Pio118Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio118Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio118Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio118Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio118Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio118Slewrate {
        Pio118Slewrate::from_bits(val)
    }
}
impl From<Pio118Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio118Slewrate) -> u8 {
        Pio118Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio119Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio119Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio119Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio119Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio119Amena {
        Pio119Amena::from_bits(val)
    }
}
impl From<Pio119Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio119Amena) -> u8 {
        Pio119Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio119Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio119Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio119Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio119Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio119Fsel {
        Pio119Fsel::from_bits(val)
    }
}
impl From<Pio119Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio119Fsel) -> u8 {
        Pio119Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio119Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio119Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio119Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio119Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio119Fulldrive {
        Pio119Fulldrive::from_bits(val)
    }
}
impl From<Pio119Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio119Fulldrive) -> u8 {
        Pio119Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio119Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio119Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio119Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio119Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio119Ibena {
        Pio119Ibena::from_bits(val)
    }
}
impl From<Pio119Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio119Ibena) -> u8 {
        Pio119Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio119Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio119Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio119Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio119Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio119Iiena {
        Pio119Iiena::from_bits(val)
    }
}
impl From<Pio119Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio119Iiena) -> u8 {
        Pio119Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio119Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio119Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio119Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio119Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio119Odena {
        Pio119Odena::from_bits(val)
    }
}
impl From<Pio119Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio119Odena) -> u8 {
        Pio119Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio119Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio119Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio119Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio119Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio119Pupdena {
        Pio119Pupdena::from_bits(val)
    }
}
impl From<Pio119Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio119Pupdena) -> u8 {
        Pio119Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio119Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio119Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio119Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio119Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio119Pupdsel {
        Pio119Pupdsel::from_bits(val)
    }
}
impl From<Pio119Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio119Pupdsel) -> u8 {
        Pio119Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio119Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio119Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio119Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio119Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio119Slewrate {
        Pio119Slewrate::from_bits(val)
    }
}
impl From<Pio119Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio119Slewrate) -> u8 {
        Pio119Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio11Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio11Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio11Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio11Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio11Amena {
        Pio11Amena::from_bits(val)
    }
}
impl From<Pio11Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio11Amena) -> u8 {
        Pio11Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio11Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio11Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio11Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio11Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio11Fsel {
        Pio11Fsel::from_bits(val)
    }
}
impl From<Pio11Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio11Fsel) -> u8 {
        Pio11Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio11Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio11Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio11Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio11Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio11Fulldrive {
        Pio11Fulldrive::from_bits(val)
    }
}
impl From<Pio11Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio11Fulldrive) -> u8 {
        Pio11Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio11Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio11Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio11Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio11Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio11Ibena {
        Pio11Ibena::from_bits(val)
    }
}
impl From<Pio11Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio11Ibena) -> u8 {
        Pio11Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio11Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio11Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio11Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio11Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio11Iiena {
        Pio11Iiena::from_bits(val)
    }
}
impl From<Pio11Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio11Iiena) -> u8 {
        Pio11Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio11Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio11Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio11Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio11Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio11Odena {
        Pio11Odena::from_bits(val)
    }
}
impl From<Pio11Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio11Odena) -> u8 {
        Pio11Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio11Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio11Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio11Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio11Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio11Pupdena {
        Pio11Pupdena::from_bits(val)
    }
}
impl From<Pio11Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio11Pupdena) -> u8 {
        Pio11Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio11Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio11Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio11Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio11Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio11Pupdsel {
        Pio11Pupdsel::from_bits(val)
    }
}
impl From<Pio11Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio11Pupdsel) -> u8 {
        Pio11Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio11Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio11Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio11Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio11Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio11Slewrate {
        Pio11Slewrate::from_bits(val)
    }
}
impl From<Pio11Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio11Slewrate) -> u8 {
        Pio11Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio120Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio120Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio120Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio120Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio120Amena {
        Pio120Amena::from_bits(val)
    }
}
impl From<Pio120Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio120Amena) -> u8 {
        Pio120Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio120Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio120Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio120Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio120Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio120Fsel {
        Pio120Fsel::from_bits(val)
    }
}
impl From<Pio120Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio120Fsel) -> u8 {
        Pio120Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio120Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio120Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio120Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio120Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio120Fulldrive {
        Pio120Fulldrive::from_bits(val)
    }
}
impl From<Pio120Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio120Fulldrive) -> u8 {
        Pio120Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio120Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio120Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio120Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio120Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio120Ibena {
        Pio120Ibena::from_bits(val)
    }
}
impl From<Pio120Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio120Ibena) -> u8 {
        Pio120Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio120Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio120Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio120Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio120Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio120Iiena {
        Pio120Iiena::from_bits(val)
    }
}
impl From<Pio120Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio120Iiena) -> u8 {
        Pio120Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio120Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio120Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio120Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio120Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio120Odena {
        Pio120Odena::from_bits(val)
    }
}
impl From<Pio120Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio120Odena) -> u8 {
        Pio120Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio120Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio120Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio120Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio120Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio120Pupdena {
        Pio120Pupdena::from_bits(val)
    }
}
impl From<Pio120Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio120Pupdena) -> u8 {
        Pio120Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio120Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio120Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio120Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio120Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio120Pupdsel {
        Pio120Pupdsel::from_bits(val)
    }
}
impl From<Pio120Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio120Pupdsel) -> u8 {
        Pio120Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio120Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio120Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio120Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio120Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio120Slewrate {
        Pio120Slewrate::from_bits(val)
    }
}
impl From<Pio120Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio120Slewrate) -> u8 {
        Pio120Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio121Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio121Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio121Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio121Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio121Amena {
        Pio121Amena::from_bits(val)
    }
}
impl From<Pio121Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio121Amena) -> u8 {
        Pio121Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio121Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio121Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio121Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio121Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio121Fsel {
        Pio121Fsel::from_bits(val)
    }
}
impl From<Pio121Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio121Fsel) -> u8 {
        Pio121Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio121Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio121Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio121Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio121Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio121Fulldrive {
        Pio121Fulldrive::from_bits(val)
    }
}
impl From<Pio121Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio121Fulldrive) -> u8 {
        Pio121Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio121Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio121Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio121Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio121Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio121Ibena {
        Pio121Ibena::from_bits(val)
    }
}
impl From<Pio121Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio121Ibena) -> u8 {
        Pio121Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio121Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio121Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio121Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio121Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio121Iiena {
        Pio121Iiena::from_bits(val)
    }
}
impl From<Pio121Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio121Iiena) -> u8 {
        Pio121Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio121Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio121Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio121Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio121Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio121Odena {
        Pio121Odena::from_bits(val)
    }
}
impl From<Pio121Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio121Odena) -> u8 {
        Pio121Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio121Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio121Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio121Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio121Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio121Pupdena {
        Pio121Pupdena::from_bits(val)
    }
}
impl From<Pio121Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio121Pupdena) -> u8 {
        Pio121Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio121Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio121Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio121Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio121Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio121Pupdsel {
        Pio121Pupdsel::from_bits(val)
    }
}
impl From<Pio121Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio121Pupdsel) -> u8 {
        Pio121Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio121Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio121Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio121Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio121Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio121Slewrate {
        Pio121Slewrate::from_bits(val)
    }
}
impl From<Pio121Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio121Slewrate) -> u8 {
        Pio121Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio122Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio122Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio122Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio122Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio122Amena {
        Pio122Amena::from_bits(val)
    }
}
impl From<Pio122Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio122Amena) -> u8 {
        Pio122Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio122Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio122Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio122Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio122Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio122Fsel {
        Pio122Fsel::from_bits(val)
    }
}
impl From<Pio122Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio122Fsel) -> u8 {
        Pio122Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio122Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio122Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio122Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio122Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio122Fulldrive {
        Pio122Fulldrive::from_bits(val)
    }
}
impl From<Pio122Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio122Fulldrive) -> u8 {
        Pio122Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio122Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio122Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio122Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio122Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio122Ibena {
        Pio122Ibena::from_bits(val)
    }
}
impl From<Pio122Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio122Ibena) -> u8 {
        Pio122Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio122Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio122Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio122Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio122Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio122Iiena {
        Pio122Iiena::from_bits(val)
    }
}
impl From<Pio122Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio122Iiena) -> u8 {
        Pio122Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio122Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio122Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio122Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio122Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio122Odena {
        Pio122Odena::from_bits(val)
    }
}
impl From<Pio122Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio122Odena) -> u8 {
        Pio122Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio122Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio122Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio122Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio122Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio122Pupdena {
        Pio122Pupdena::from_bits(val)
    }
}
impl From<Pio122Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio122Pupdena) -> u8 {
        Pio122Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio122Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio122Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio122Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio122Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio122Pupdsel {
        Pio122Pupdsel::from_bits(val)
    }
}
impl From<Pio122Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio122Pupdsel) -> u8 {
        Pio122Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio122Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio122Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio122Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio122Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio122Slewrate {
        Pio122Slewrate::from_bits(val)
    }
}
impl From<Pio122Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio122Slewrate) -> u8 {
        Pio122Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio123Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio123Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio123Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio123Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio123Amena {
        Pio123Amena::from_bits(val)
    }
}
impl From<Pio123Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio123Amena) -> u8 {
        Pio123Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio123Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio123Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio123Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio123Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio123Fsel {
        Pio123Fsel::from_bits(val)
    }
}
impl From<Pio123Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio123Fsel) -> u8 {
        Pio123Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio123Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio123Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio123Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio123Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio123Fulldrive {
        Pio123Fulldrive::from_bits(val)
    }
}
impl From<Pio123Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio123Fulldrive) -> u8 {
        Pio123Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio123Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio123Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio123Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio123Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio123Ibena {
        Pio123Ibena::from_bits(val)
    }
}
impl From<Pio123Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio123Ibena) -> u8 {
        Pio123Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio123Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio123Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio123Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio123Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio123Iiena {
        Pio123Iiena::from_bits(val)
    }
}
impl From<Pio123Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio123Iiena) -> u8 {
        Pio123Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio123Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio123Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio123Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio123Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio123Odena {
        Pio123Odena::from_bits(val)
    }
}
impl From<Pio123Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio123Odena) -> u8 {
        Pio123Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio123Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio123Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio123Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio123Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio123Pupdena {
        Pio123Pupdena::from_bits(val)
    }
}
impl From<Pio123Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio123Pupdena) -> u8 {
        Pio123Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio123Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio123Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio123Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio123Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio123Pupdsel {
        Pio123Pupdsel::from_bits(val)
    }
}
impl From<Pio123Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio123Pupdsel) -> u8 {
        Pio123Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio123Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio123Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio123Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio123Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio123Slewrate {
        Pio123Slewrate::from_bits(val)
    }
}
impl From<Pio123Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio123Slewrate) -> u8 {
        Pio123Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio124Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio124Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio124Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio124Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio124Amena {
        Pio124Amena::from_bits(val)
    }
}
impl From<Pio124Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio124Amena) -> u8 {
        Pio124Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio124Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio124Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio124Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio124Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio124Fsel {
        Pio124Fsel::from_bits(val)
    }
}
impl From<Pio124Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio124Fsel) -> u8 {
        Pio124Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio124Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio124Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio124Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio124Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio124Fulldrive {
        Pio124Fulldrive::from_bits(val)
    }
}
impl From<Pio124Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio124Fulldrive) -> u8 {
        Pio124Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio124Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio124Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio124Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio124Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio124Ibena {
        Pio124Ibena::from_bits(val)
    }
}
impl From<Pio124Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio124Ibena) -> u8 {
        Pio124Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio124Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio124Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio124Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio124Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio124Iiena {
        Pio124Iiena::from_bits(val)
    }
}
impl From<Pio124Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio124Iiena) -> u8 {
        Pio124Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio124Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio124Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio124Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio124Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio124Odena {
        Pio124Odena::from_bits(val)
    }
}
impl From<Pio124Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio124Odena) -> u8 {
        Pio124Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio124Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio124Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio124Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio124Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio124Pupdena {
        Pio124Pupdena::from_bits(val)
    }
}
impl From<Pio124Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio124Pupdena) -> u8 {
        Pio124Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio124Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio124Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio124Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio124Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio124Pupdsel {
        Pio124Pupdsel::from_bits(val)
    }
}
impl From<Pio124Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio124Pupdsel) -> u8 {
        Pio124Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio124Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio124Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio124Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio124Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio124Slewrate {
        Pio124Slewrate::from_bits(val)
    }
}
impl From<Pio124Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio124Slewrate) -> u8 {
        Pio124Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio125Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio125Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio125Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio125Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio125Amena {
        Pio125Amena::from_bits(val)
    }
}
impl From<Pio125Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio125Amena) -> u8 {
        Pio125Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio125Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio125Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio125Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio125Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio125Fsel {
        Pio125Fsel::from_bits(val)
    }
}
impl From<Pio125Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio125Fsel) -> u8 {
        Pio125Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio125Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio125Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio125Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio125Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio125Fulldrive {
        Pio125Fulldrive::from_bits(val)
    }
}
impl From<Pio125Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio125Fulldrive) -> u8 {
        Pio125Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio125Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio125Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio125Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio125Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio125Ibena {
        Pio125Ibena::from_bits(val)
    }
}
impl From<Pio125Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio125Ibena) -> u8 {
        Pio125Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio125Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio125Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio125Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio125Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio125Iiena {
        Pio125Iiena::from_bits(val)
    }
}
impl From<Pio125Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio125Iiena) -> u8 {
        Pio125Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio125Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio125Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio125Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio125Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio125Odena {
        Pio125Odena::from_bits(val)
    }
}
impl From<Pio125Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio125Odena) -> u8 {
        Pio125Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio125Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio125Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio125Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio125Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio125Pupdena {
        Pio125Pupdena::from_bits(val)
    }
}
impl From<Pio125Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio125Pupdena) -> u8 {
        Pio125Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio125Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio125Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio125Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio125Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio125Pupdsel {
        Pio125Pupdsel::from_bits(val)
    }
}
impl From<Pio125Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio125Pupdsel) -> u8 {
        Pio125Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio125Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio125Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio125Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio125Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio125Slewrate {
        Pio125Slewrate::from_bits(val)
    }
}
impl From<Pio125Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio125Slewrate) -> u8 {
        Pio125Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio126Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio126Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio126Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio126Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio126Amena {
        Pio126Amena::from_bits(val)
    }
}
impl From<Pio126Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio126Amena) -> u8 {
        Pio126Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio126Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio126Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio126Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio126Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio126Fsel {
        Pio126Fsel::from_bits(val)
    }
}
impl From<Pio126Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio126Fsel) -> u8 {
        Pio126Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio126Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio126Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio126Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio126Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio126Fulldrive {
        Pio126Fulldrive::from_bits(val)
    }
}
impl From<Pio126Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio126Fulldrive) -> u8 {
        Pio126Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio126Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio126Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio126Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio126Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio126Ibena {
        Pio126Ibena::from_bits(val)
    }
}
impl From<Pio126Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio126Ibena) -> u8 {
        Pio126Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio126Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio126Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio126Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio126Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio126Iiena {
        Pio126Iiena::from_bits(val)
    }
}
impl From<Pio126Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio126Iiena) -> u8 {
        Pio126Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio126Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio126Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio126Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio126Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio126Odena {
        Pio126Odena::from_bits(val)
    }
}
impl From<Pio126Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio126Odena) -> u8 {
        Pio126Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio126Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio126Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio126Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio126Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio126Pupdena {
        Pio126Pupdena::from_bits(val)
    }
}
impl From<Pio126Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio126Pupdena) -> u8 {
        Pio126Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio126Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio126Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio126Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio126Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio126Pupdsel {
        Pio126Pupdsel::from_bits(val)
    }
}
impl From<Pio126Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio126Pupdsel) -> u8 {
        Pio126Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio126Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio126Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio126Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio126Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio126Slewrate {
        Pio126Slewrate::from_bits(val)
    }
}
impl From<Pio126Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio126Slewrate) -> u8 {
        Pio126Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio127Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio127Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio127Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio127Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio127Amena {
        Pio127Amena::from_bits(val)
    }
}
impl From<Pio127Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio127Amena) -> u8 {
        Pio127Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio127Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio127Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio127Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio127Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio127Fsel {
        Pio127Fsel::from_bits(val)
    }
}
impl From<Pio127Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio127Fsel) -> u8 {
        Pio127Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio127Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio127Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio127Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio127Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio127Fulldrive {
        Pio127Fulldrive::from_bits(val)
    }
}
impl From<Pio127Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio127Fulldrive) -> u8 {
        Pio127Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio127Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio127Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio127Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio127Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio127Ibena {
        Pio127Ibena::from_bits(val)
    }
}
impl From<Pio127Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio127Ibena) -> u8 {
        Pio127Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio127Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio127Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio127Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio127Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio127Iiena {
        Pio127Iiena::from_bits(val)
    }
}
impl From<Pio127Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio127Iiena) -> u8 {
        Pio127Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio127Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio127Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio127Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio127Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio127Odena {
        Pio127Odena::from_bits(val)
    }
}
impl From<Pio127Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio127Odena) -> u8 {
        Pio127Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio127Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio127Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio127Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio127Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio127Pupdena {
        Pio127Pupdena::from_bits(val)
    }
}
impl From<Pio127Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio127Pupdena) -> u8 {
        Pio127Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio127Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio127Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio127Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio127Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio127Pupdsel {
        Pio127Pupdsel::from_bits(val)
    }
}
impl From<Pio127Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio127Pupdsel) -> u8 {
        Pio127Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio127Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio127Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio127Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio127Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio127Slewrate {
        Pio127Slewrate::from_bits(val)
    }
}
impl From<Pio127Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio127Slewrate) -> u8 {
        Pio127Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio128Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio128Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio128Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio128Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio128Amena {
        Pio128Amena::from_bits(val)
    }
}
impl From<Pio128Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio128Amena) -> u8 {
        Pio128Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio128Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio128Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio128Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio128Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio128Fsel {
        Pio128Fsel::from_bits(val)
    }
}
impl From<Pio128Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio128Fsel) -> u8 {
        Pio128Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio128Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio128Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio128Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio128Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio128Fulldrive {
        Pio128Fulldrive::from_bits(val)
    }
}
impl From<Pio128Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio128Fulldrive) -> u8 {
        Pio128Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio128Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio128Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio128Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio128Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio128Ibena {
        Pio128Ibena::from_bits(val)
    }
}
impl From<Pio128Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio128Ibena) -> u8 {
        Pio128Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio128Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio128Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio128Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio128Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio128Iiena {
        Pio128Iiena::from_bits(val)
    }
}
impl From<Pio128Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio128Iiena) -> u8 {
        Pio128Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio128Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio128Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio128Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio128Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio128Odena {
        Pio128Odena::from_bits(val)
    }
}
impl From<Pio128Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio128Odena) -> u8 {
        Pio128Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio128Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio128Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio128Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio128Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio128Pupdena {
        Pio128Pupdena::from_bits(val)
    }
}
impl From<Pio128Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio128Pupdena) -> u8 {
        Pio128Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio128Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio128Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio128Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio128Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio128Pupdsel {
        Pio128Pupdsel::from_bits(val)
    }
}
impl From<Pio128Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio128Pupdsel) -> u8 {
        Pio128Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio128Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio128Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio128Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio128Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio128Slewrate {
        Pio128Slewrate::from_bits(val)
    }
}
impl From<Pio128Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio128Slewrate) -> u8 {
        Pio128Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio129Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio129Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio129Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio129Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio129Amena {
        Pio129Amena::from_bits(val)
    }
}
impl From<Pio129Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio129Amena) -> u8 {
        Pio129Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio129Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio129Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio129Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio129Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio129Fsel {
        Pio129Fsel::from_bits(val)
    }
}
impl From<Pio129Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio129Fsel) -> u8 {
        Pio129Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio129Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio129Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio129Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio129Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio129Fulldrive {
        Pio129Fulldrive::from_bits(val)
    }
}
impl From<Pio129Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio129Fulldrive) -> u8 {
        Pio129Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio129Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio129Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio129Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio129Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio129Ibena {
        Pio129Ibena::from_bits(val)
    }
}
impl From<Pio129Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio129Ibena) -> u8 {
        Pio129Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio129Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio129Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio129Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio129Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio129Iiena {
        Pio129Iiena::from_bits(val)
    }
}
impl From<Pio129Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio129Iiena) -> u8 {
        Pio129Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio129Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio129Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio129Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio129Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio129Odena {
        Pio129Odena::from_bits(val)
    }
}
impl From<Pio129Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio129Odena) -> u8 {
        Pio129Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio129Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio129Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio129Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio129Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio129Pupdena {
        Pio129Pupdena::from_bits(val)
    }
}
impl From<Pio129Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio129Pupdena) -> u8 {
        Pio129Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio129Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio129Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio129Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio129Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio129Pupdsel {
        Pio129Pupdsel::from_bits(val)
    }
}
impl From<Pio129Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio129Pupdsel) -> u8 {
        Pio129Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio129Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio129Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio129Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio129Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio129Slewrate {
        Pio129Slewrate::from_bits(val)
    }
}
impl From<Pio129Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio129Slewrate) -> u8 {
        Pio129Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio12Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio12Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio12Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio12Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio12Amena {
        Pio12Amena::from_bits(val)
    }
}
impl From<Pio12Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio12Amena) -> u8 {
        Pio12Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio12Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio12Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio12Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio12Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio12Fsel {
        Pio12Fsel::from_bits(val)
    }
}
impl From<Pio12Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio12Fsel) -> u8 {
        Pio12Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio12Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio12Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio12Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio12Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio12Fulldrive {
        Pio12Fulldrive::from_bits(val)
    }
}
impl From<Pio12Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio12Fulldrive) -> u8 {
        Pio12Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio12Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio12Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio12Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio12Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio12Ibena {
        Pio12Ibena::from_bits(val)
    }
}
impl From<Pio12Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio12Ibena) -> u8 {
        Pio12Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio12Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio12Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio12Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio12Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio12Iiena {
        Pio12Iiena::from_bits(val)
    }
}
impl From<Pio12Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio12Iiena) -> u8 {
        Pio12Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio12Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio12Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio12Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio12Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio12Odena {
        Pio12Odena::from_bits(val)
    }
}
impl From<Pio12Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio12Odena) -> u8 {
        Pio12Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio12Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio12Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio12Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio12Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio12Pupdena {
        Pio12Pupdena::from_bits(val)
    }
}
impl From<Pio12Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio12Pupdena) -> u8 {
        Pio12Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio12Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio12Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio12Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio12Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio12Pupdsel {
        Pio12Pupdsel::from_bits(val)
    }
}
impl From<Pio12Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio12Pupdsel) -> u8 {
        Pio12Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio12Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio12Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio12Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio12Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio12Slewrate {
        Pio12Slewrate::from_bits(val)
    }
}
impl From<Pio12Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio12Slewrate) -> u8 {
        Pio12Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio130Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio130Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio130Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio130Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio130Amena {
        Pio130Amena::from_bits(val)
    }
}
impl From<Pio130Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio130Amena) -> u8 {
        Pio130Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio130Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio130Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio130Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio130Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio130Fsel {
        Pio130Fsel::from_bits(val)
    }
}
impl From<Pio130Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio130Fsel) -> u8 {
        Pio130Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio130Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio130Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio130Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio130Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio130Fulldrive {
        Pio130Fulldrive::from_bits(val)
    }
}
impl From<Pio130Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio130Fulldrive) -> u8 {
        Pio130Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio130Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio130Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio130Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio130Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio130Ibena {
        Pio130Ibena::from_bits(val)
    }
}
impl From<Pio130Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio130Ibena) -> u8 {
        Pio130Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio130Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio130Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio130Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio130Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio130Iiena {
        Pio130Iiena::from_bits(val)
    }
}
impl From<Pio130Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio130Iiena) -> u8 {
        Pio130Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio130Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio130Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio130Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio130Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio130Odena {
        Pio130Odena::from_bits(val)
    }
}
impl From<Pio130Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio130Odena) -> u8 {
        Pio130Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio130Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio130Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio130Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio130Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio130Pupdena {
        Pio130Pupdena::from_bits(val)
    }
}
impl From<Pio130Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio130Pupdena) -> u8 {
        Pio130Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio130Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio130Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio130Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio130Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio130Pupdsel {
        Pio130Pupdsel::from_bits(val)
    }
}
impl From<Pio130Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio130Pupdsel) -> u8 {
        Pio130Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio130Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio130Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio130Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio130Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio130Slewrate {
        Pio130Slewrate::from_bits(val)
    }
}
impl From<Pio130Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio130Slewrate) -> u8 {
        Pio130Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio131Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio131Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio131Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio131Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio131Amena {
        Pio131Amena::from_bits(val)
    }
}
impl From<Pio131Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio131Amena) -> u8 {
        Pio131Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio131Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio131Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio131Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio131Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio131Fsel {
        Pio131Fsel::from_bits(val)
    }
}
impl From<Pio131Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio131Fsel) -> u8 {
        Pio131Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio131Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio131Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio131Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio131Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio131Fulldrive {
        Pio131Fulldrive::from_bits(val)
    }
}
impl From<Pio131Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio131Fulldrive) -> u8 {
        Pio131Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio131Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio131Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio131Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio131Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio131Ibena {
        Pio131Ibena::from_bits(val)
    }
}
impl From<Pio131Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio131Ibena) -> u8 {
        Pio131Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio131Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio131Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio131Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio131Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio131Iiena {
        Pio131Iiena::from_bits(val)
    }
}
impl From<Pio131Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio131Iiena) -> u8 {
        Pio131Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio131Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio131Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio131Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio131Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio131Odena {
        Pio131Odena::from_bits(val)
    }
}
impl From<Pio131Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio131Odena) -> u8 {
        Pio131Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio131Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio131Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio131Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio131Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio131Pupdena {
        Pio131Pupdena::from_bits(val)
    }
}
impl From<Pio131Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio131Pupdena) -> u8 {
        Pio131Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio131Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio131Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio131Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio131Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio131Pupdsel {
        Pio131Pupdsel::from_bits(val)
    }
}
impl From<Pio131Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio131Pupdsel) -> u8 {
        Pio131Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio131Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio131Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio131Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio131Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio131Slewrate {
        Pio131Slewrate::from_bits(val)
    }
}
impl From<Pio131Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio131Slewrate) -> u8 {
        Pio131Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio13Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio13Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio13Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio13Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio13Amena {
        Pio13Amena::from_bits(val)
    }
}
impl From<Pio13Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio13Amena) -> u8 {
        Pio13Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio13Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio13Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio13Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio13Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio13Fsel {
        Pio13Fsel::from_bits(val)
    }
}
impl From<Pio13Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio13Fsel) -> u8 {
        Pio13Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio13Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio13Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio13Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio13Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio13Fulldrive {
        Pio13Fulldrive::from_bits(val)
    }
}
impl From<Pio13Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio13Fulldrive) -> u8 {
        Pio13Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio13Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio13Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio13Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio13Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio13Ibena {
        Pio13Ibena::from_bits(val)
    }
}
impl From<Pio13Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio13Ibena) -> u8 {
        Pio13Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio13Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio13Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio13Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio13Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio13Iiena {
        Pio13Iiena::from_bits(val)
    }
}
impl From<Pio13Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio13Iiena) -> u8 {
        Pio13Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio13Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio13Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio13Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio13Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio13Odena {
        Pio13Odena::from_bits(val)
    }
}
impl From<Pio13Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio13Odena) -> u8 {
        Pio13Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio13Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio13Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio13Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio13Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio13Pupdena {
        Pio13Pupdena::from_bits(val)
    }
}
impl From<Pio13Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio13Pupdena) -> u8 {
        Pio13Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio13Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio13Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio13Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio13Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio13Pupdsel {
        Pio13Pupdsel::from_bits(val)
    }
}
impl From<Pio13Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio13Pupdsel) -> u8 {
        Pio13Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio13Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio13Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio13Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio13Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio13Slewrate {
        Pio13Slewrate::from_bits(val)
    }
}
impl From<Pio13Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio13Slewrate) -> u8 {
        Pio13Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio14Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio14Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio14Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio14Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio14Amena {
        Pio14Amena::from_bits(val)
    }
}
impl From<Pio14Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio14Amena) -> u8 {
        Pio14Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio14Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio14Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio14Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio14Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio14Fsel {
        Pio14Fsel::from_bits(val)
    }
}
impl From<Pio14Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio14Fsel) -> u8 {
        Pio14Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio14Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio14Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio14Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio14Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio14Fulldrive {
        Pio14Fulldrive::from_bits(val)
    }
}
impl From<Pio14Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio14Fulldrive) -> u8 {
        Pio14Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio14Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio14Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio14Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio14Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio14Ibena {
        Pio14Ibena::from_bits(val)
    }
}
impl From<Pio14Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio14Ibena) -> u8 {
        Pio14Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio14Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio14Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio14Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio14Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio14Iiena {
        Pio14Iiena::from_bits(val)
    }
}
impl From<Pio14Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio14Iiena) -> u8 {
        Pio14Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio14Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio14Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio14Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio14Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio14Odena {
        Pio14Odena::from_bits(val)
    }
}
impl From<Pio14Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio14Odena) -> u8 {
        Pio14Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio14Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio14Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio14Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio14Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio14Pupdena {
        Pio14Pupdena::from_bits(val)
    }
}
impl From<Pio14Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio14Pupdena) -> u8 {
        Pio14Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio14Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio14Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio14Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio14Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio14Pupdsel {
        Pio14Pupdsel::from_bits(val)
    }
}
impl From<Pio14Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio14Pupdsel) -> u8 {
        Pio14Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio14Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio14Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio14Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio14Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio14Slewrate {
        Pio14Slewrate::from_bits(val)
    }
}
impl From<Pio14Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio14Slewrate) -> u8 {
        Pio14Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio15Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio15Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio15Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio15Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio15Amena {
        Pio15Amena::from_bits(val)
    }
}
impl From<Pio15Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio15Amena) -> u8 {
        Pio15Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio15Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio15Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio15Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio15Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio15Fsel {
        Pio15Fsel::from_bits(val)
    }
}
impl From<Pio15Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio15Fsel) -> u8 {
        Pio15Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio15Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio15Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio15Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio15Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio15Fulldrive {
        Pio15Fulldrive::from_bits(val)
    }
}
impl From<Pio15Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio15Fulldrive) -> u8 {
        Pio15Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio15Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio15Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio15Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio15Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio15Ibena {
        Pio15Ibena::from_bits(val)
    }
}
impl From<Pio15Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio15Ibena) -> u8 {
        Pio15Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio15Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio15Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio15Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio15Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio15Iiena {
        Pio15Iiena::from_bits(val)
    }
}
impl From<Pio15Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio15Iiena) -> u8 {
        Pio15Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio15Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio15Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio15Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio15Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio15Odena {
        Pio15Odena::from_bits(val)
    }
}
impl From<Pio15Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio15Odena) -> u8 {
        Pio15Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio15Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio15Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio15Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio15Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio15Pupdena {
        Pio15Pupdena::from_bits(val)
    }
}
impl From<Pio15Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio15Pupdena) -> u8 {
        Pio15Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio15Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio15Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio15Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio15Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio15Pupdsel {
        Pio15Pupdsel::from_bits(val)
    }
}
impl From<Pio15Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio15Pupdsel) -> u8 {
        Pio15Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio15Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio15Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio15Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio15Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio15Slewrate {
        Pio15Slewrate::from_bits(val)
    }
}
impl From<Pio15Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio15Slewrate) -> u8 {
        Pio15Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio16Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio16Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio16Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio16Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio16Amena {
        Pio16Amena::from_bits(val)
    }
}
impl From<Pio16Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio16Amena) -> u8 {
        Pio16Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio16Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio16Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio16Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio16Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio16Fsel {
        Pio16Fsel::from_bits(val)
    }
}
impl From<Pio16Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio16Fsel) -> u8 {
        Pio16Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio16Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio16Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio16Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio16Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio16Fulldrive {
        Pio16Fulldrive::from_bits(val)
    }
}
impl From<Pio16Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio16Fulldrive) -> u8 {
        Pio16Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio16Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio16Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio16Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio16Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio16Ibena {
        Pio16Ibena::from_bits(val)
    }
}
impl From<Pio16Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio16Ibena) -> u8 {
        Pio16Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio16Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio16Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio16Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio16Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio16Iiena {
        Pio16Iiena::from_bits(val)
    }
}
impl From<Pio16Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio16Iiena) -> u8 {
        Pio16Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio16Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio16Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio16Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio16Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio16Odena {
        Pio16Odena::from_bits(val)
    }
}
impl From<Pio16Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio16Odena) -> u8 {
        Pio16Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio16Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio16Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio16Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio16Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio16Pupdena {
        Pio16Pupdena::from_bits(val)
    }
}
impl From<Pio16Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio16Pupdena) -> u8 {
        Pio16Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio16Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio16Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio16Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio16Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio16Pupdsel {
        Pio16Pupdsel::from_bits(val)
    }
}
impl From<Pio16Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio16Pupdsel) -> u8 {
        Pio16Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio16Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio16Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio16Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio16Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio16Slewrate {
        Pio16Slewrate::from_bits(val)
    }
}
impl From<Pio16Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio16Slewrate) -> u8 {
        Pio16Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio17Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio17Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio17Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio17Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio17Amena {
        Pio17Amena::from_bits(val)
    }
}
impl From<Pio17Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio17Amena) -> u8 {
        Pio17Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio17Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio17Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio17Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio17Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio17Fsel {
        Pio17Fsel::from_bits(val)
    }
}
impl From<Pio17Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio17Fsel) -> u8 {
        Pio17Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio17Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio17Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio17Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio17Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio17Fulldrive {
        Pio17Fulldrive::from_bits(val)
    }
}
impl From<Pio17Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio17Fulldrive) -> u8 {
        Pio17Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio17Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio17Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio17Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio17Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio17Ibena {
        Pio17Ibena::from_bits(val)
    }
}
impl From<Pio17Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio17Ibena) -> u8 {
        Pio17Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio17Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio17Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio17Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio17Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio17Iiena {
        Pio17Iiena::from_bits(val)
    }
}
impl From<Pio17Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio17Iiena) -> u8 {
        Pio17Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio17Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio17Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio17Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio17Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio17Odena {
        Pio17Odena::from_bits(val)
    }
}
impl From<Pio17Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio17Odena) -> u8 {
        Pio17Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio17Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio17Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio17Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio17Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio17Pupdena {
        Pio17Pupdena::from_bits(val)
    }
}
impl From<Pio17Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio17Pupdena) -> u8 {
        Pio17Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio17Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio17Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio17Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio17Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio17Pupdsel {
        Pio17Pupdsel::from_bits(val)
    }
}
impl From<Pio17Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio17Pupdsel) -> u8 {
        Pio17Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio17Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio17Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio17Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio17Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio17Slewrate {
        Pio17Slewrate::from_bits(val)
    }
}
impl From<Pio17Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio17Slewrate) -> u8 {
        Pio17Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio18Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio18Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio18Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio18Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio18Amena {
        Pio18Amena::from_bits(val)
    }
}
impl From<Pio18Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio18Amena) -> u8 {
        Pio18Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio18Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio18Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio18Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio18Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio18Fsel {
        Pio18Fsel::from_bits(val)
    }
}
impl From<Pio18Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio18Fsel) -> u8 {
        Pio18Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio18Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio18Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio18Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio18Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio18Fulldrive {
        Pio18Fulldrive::from_bits(val)
    }
}
impl From<Pio18Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio18Fulldrive) -> u8 {
        Pio18Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio18Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio18Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio18Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio18Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio18Ibena {
        Pio18Ibena::from_bits(val)
    }
}
impl From<Pio18Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio18Ibena) -> u8 {
        Pio18Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio18Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio18Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio18Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio18Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio18Iiena {
        Pio18Iiena::from_bits(val)
    }
}
impl From<Pio18Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio18Iiena) -> u8 {
        Pio18Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio18Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio18Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio18Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio18Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio18Odena {
        Pio18Odena::from_bits(val)
    }
}
impl From<Pio18Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio18Odena) -> u8 {
        Pio18Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio18Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio18Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio18Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio18Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio18Pupdena {
        Pio18Pupdena::from_bits(val)
    }
}
impl From<Pio18Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio18Pupdena) -> u8 {
        Pio18Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio18Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio18Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio18Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio18Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio18Pupdsel {
        Pio18Pupdsel::from_bits(val)
    }
}
impl From<Pio18Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio18Pupdsel) -> u8 {
        Pio18Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio18Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio18Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio18Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio18Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio18Slewrate {
        Pio18Slewrate::from_bits(val)
    }
}
impl From<Pio18Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio18Slewrate) -> u8 {
        Pio18Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio19Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio19Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio19Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio19Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio19Amena {
        Pio19Amena::from_bits(val)
    }
}
impl From<Pio19Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio19Amena) -> u8 {
        Pio19Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio19Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio19Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio19Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio19Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio19Fsel {
        Pio19Fsel::from_bits(val)
    }
}
impl From<Pio19Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio19Fsel) -> u8 {
        Pio19Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio19Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio19Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio19Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio19Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio19Fulldrive {
        Pio19Fulldrive::from_bits(val)
    }
}
impl From<Pio19Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio19Fulldrive) -> u8 {
        Pio19Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio19Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio19Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio19Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio19Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio19Ibena {
        Pio19Ibena::from_bits(val)
    }
}
impl From<Pio19Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio19Ibena) -> u8 {
        Pio19Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio19Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio19Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio19Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio19Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio19Iiena {
        Pio19Iiena::from_bits(val)
    }
}
impl From<Pio19Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio19Iiena) -> u8 {
        Pio19Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio19Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio19Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio19Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio19Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio19Odena {
        Pio19Odena::from_bits(val)
    }
}
impl From<Pio19Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio19Odena) -> u8 {
        Pio19Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio19Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio19Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio19Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio19Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio19Pupdena {
        Pio19Pupdena::from_bits(val)
    }
}
impl From<Pio19Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio19Pupdena) -> u8 {
        Pio19Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio19Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio19Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio19Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio19Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio19Pupdsel {
        Pio19Pupdsel::from_bits(val)
    }
}
impl From<Pio19Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio19Pupdsel) -> u8 {
        Pio19Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio19Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio19Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio19Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio19Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio19Slewrate {
        Pio19Slewrate::from_bits(val)
    }
}
impl From<Pio19Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio19Slewrate) -> u8 {
        Pio19Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio20Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio20Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio20Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio20Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio20Amena {
        Pio20Amena::from_bits(val)
    }
}
impl From<Pio20Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio20Amena) -> u8 {
        Pio20Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio20Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio20Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio20Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio20Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio20Fsel {
        Pio20Fsel::from_bits(val)
    }
}
impl From<Pio20Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio20Fsel) -> u8 {
        Pio20Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio20Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio20Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio20Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio20Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio20Fulldrive {
        Pio20Fulldrive::from_bits(val)
    }
}
impl From<Pio20Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio20Fulldrive) -> u8 {
        Pio20Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio20Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio20Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio20Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio20Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio20Ibena {
        Pio20Ibena::from_bits(val)
    }
}
impl From<Pio20Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio20Ibena) -> u8 {
        Pio20Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio20Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio20Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio20Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio20Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio20Iiena {
        Pio20Iiena::from_bits(val)
    }
}
impl From<Pio20Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio20Iiena) -> u8 {
        Pio20Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio20Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio20Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio20Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio20Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio20Odena {
        Pio20Odena::from_bits(val)
    }
}
impl From<Pio20Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio20Odena) -> u8 {
        Pio20Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio20Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio20Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio20Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio20Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio20Pupdena {
        Pio20Pupdena::from_bits(val)
    }
}
impl From<Pio20Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio20Pupdena) -> u8 {
        Pio20Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio20Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio20Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio20Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio20Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio20Pupdsel {
        Pio20Pupdsel::from_bits(val)
    }
}
impl From<Pio20Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio20Pupdsel) -> u8 {
        Pio20Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio20Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio20Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio20Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio20Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio20Slewrate {
        Pio20Slewrate::from_bits(val)
    }
}
impl From<Pio20Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio20Slewrate) -> u8 {
        Pio20Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio210Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio210Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio210Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio210Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio210Amena {
        Pio210Amena::from_bits(val)
    }
}
impl From<Pio210Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio210Amena) -> u8 {
        Pio210Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio210Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio210Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio210Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio210Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio210Fsel {
        Pio210Fsel::from_bits(val)
    }
}
impl From<Pio210Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio210Fsel) -> u8 {
        Pio210Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio210Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio210Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio210Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio210Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio210Fulldrive {
        Pio210Fulldrive::from_bits(val)
    }
}
impl From<Pio210Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio210Fulldrive) -> u8 {
        Pio210Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio210Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio210Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio210Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio210Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio210Ibena {
        Pio210Ibena::from_bits(val)
    }
}
impl From<Pio210Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio210Ibena) -> u8 {
        Pio210Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio210Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio210Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio210Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio210Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio210Iiena {
        Pio210Iiena::from_bits(val)
    }
}
impl From<Pio210Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio210Iiena) -> u8 {
        Pio210Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio210Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio210Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio210Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio210Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio210Odena {
        Pio210Odena::from_bits(val)
    }
}
impl From<Pio210Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio210Odena) -> u8 {
        Pio210Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio210Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio210Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio210Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio210Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio210Pupdena {
        Pio210Pupdena::from_bits(val)
    }
}
impl From<Pio210Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio210Pupdena) -> u8 {
        Pio210Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio210Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio210Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio210Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio210Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio210Pupdsel {
        Pio210Pupdsel::from_bits(val)
    }
}
impl From<Pio210Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio210Pupdsel) -> u8 {
        Pio210Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio210Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio210Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio210Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio210Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio210Slewrate {
        Pio210Slewrate::from_bits(val)
    }
}
impl From<Pio210Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio210Slewrate) -> u8 {
        Pio210Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio211Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio211Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio211Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio211Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio211Amena {
        Pio211Amena::from_bits(val)
    }
}
impl From<Pio211Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio211Amena) -> u8 {
        Pio211Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio211Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio211Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio211Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio211Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio211Fsel {
        Pio211Fsel::from_bits(val)
    }
}
impl From<Pio211Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio211Fsel) -> u8 {
        Pio211Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio211Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio211Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio211Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio211Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio211Fulldrive {
        Pio211Fulldrive::from_bits(val)
    }
}
impl From<Pio211Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio211Fulldrive) -> u8 {
        Pio211Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio211Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio211Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio211Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio211Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio211Ibena {
        Pio211Ibena::from_bits(val)
    }
}
impl From<Pio211Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio211Ibena) -> u8 {
        Pio211Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio211Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio211Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio211Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio211Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio211Iiena {
        Pio211Iiena::from_bits(val)
    }
}
impl From<Pio211Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio211Iiena) -> u8 {
        Pio211Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio211Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio211Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio211Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio211Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio211Odena {
        Pio211Odena::from_bits(val)
    }
}
impl From<Pio211Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio211Odena) -> u8 {
        Pio211Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio211Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio211Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio211Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio211Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio211Pupdena {
        Pio211Pupdena::from_bits(val)
    }
}
impl From<Pio211Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio211Pupdena) -> u8 {
        Pio211Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio211Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio211Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio211Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio211Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio211Pupdsel {
        Pio211Pupdsel::from_bits(val)
    }
}
impl From<Pio211Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio211Pupdsel) -> u8 {
        Pio211Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio211Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio211Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio211Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio211Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio211Slewrate {
        Pio211Slewrate::from_bits(val)
    }
}
impl From<Pio211Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio211Slewrate) -> u8 {
        Pio211Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio212Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio212Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio212Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio212Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio212Amena {
        Pio212Amena::from_bits(val)
    }
}
impl From<Pio212Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio212Amena) -> u8 {
        Pio212Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio212Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio212Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio212Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio212Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio212Fsel {
        Pio212Fsel::from_bits(val)
    }
}
impl From<Pio212Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio212Fsel) -> u8 {
        Pio212Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio212Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio212Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio212Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio212Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio212Fulldrive {
        Pio212Fulldrive::from_bits(val)
    }
}
impl From<Pio212Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio212Fulldrive) -> u8 {
        Pio212Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio212Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio212Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio212Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio212Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio212Ibena {
        Pio212Ibena::from_bits(val)
    }
}
impl From<Pio212Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio212Ibena) -> u8 {
        Pio212Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio212Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio212Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio212Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio212Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio212Iiena {
        Pio212Iiena::from_bits(val)
    }
}
impl From<Pio212Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio212Iiena) -> u8 {
        Pio212Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio212Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio212Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio212Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio212Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio212Odena {
        Pio212Odena::from_bits(val)
    }
}
impl From<Pio212Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio212Odena) -> u8 {
        Pio212Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio212Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio212Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio212Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio212Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio212Pupdena {
        Pio212Pupdena::from_bits(val)
    }
}
impl From<Pio212Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio212Pupdena) -> u8 {
        Pio212Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio212Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio212Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio212Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio212Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio212Pupdsel {
        Pio212Pupdsel::from_bits(val)
    }
}
impl From<Pio212Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio212Pupdsel) -> u8 {
        Pio212Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio212Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio212Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio212Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio212Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio212Slewrate {
        Pio212Slewrate::from_bits(val)
    }
}
impl From<Pio212Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio212Slewrate) -> u8 {
        Pio212Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio213Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio213Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio213Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio213Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio213Amena {
        Pio213Amena::from_bits(val)
    }
}
impl From<Pio213Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio213Amena) -> u8 {
        Pio213Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio213Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio213Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio213Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio213Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio213Fsel {
        Pio213Fsel::from_bits(val)
    }
}
impl From<Pio213Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio213Fsel) -> u8 {
        Pio213Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio213Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio213Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio213Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio213Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio213Fulldrive {
        Pio213Fulldrive::from_bits(val)
    }
}
impl From<Pio213Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio213Fulldrive) -> u8 {
        Pio213Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio213Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio213Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio213Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio213Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio213Ibena {
        Pio213Ibena::from_bits(val)
    }
}
impl From<Pio213Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio213Ibena) -> u8 {
        Pio213Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio213Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio213Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio213Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio213Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio213Iiena {
        Pio213Iiena::from_bits(val)
    }
}
impl From<Pio213Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio213Iiena) -> u8 {
        Pio213Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio213Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio213Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio213Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio213Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio213Odena {
        Pio213Odena::from_bits(val)
    }
}
impl From<Pio213Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio213Odena) -> u8 {
        Pio213Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio213Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio213Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio213Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio213Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio213Pupdena {
        Pio213Pupdena::from_bits(val)
    }
}
impl From<Pio213Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio213Pupdena) -> u8 {
        Pio213Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio213Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio213Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio213Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio213Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio213Pupdsel {
        Pio213Pupdsel::from_bits(val)
    }
}
impl From<Pio213Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio213Pupdsel) -> u8 {
        Pio213Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio213Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio213Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio213Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio213Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio213Slewrate {
        Pio213Slewrate::from_bits(val)
    }
}
impl From<Pio213Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio213Slewrate) -> u8 {
        Pio213Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio214Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio214Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio214Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio214Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio214Amena {
        Pio214Amena::from_bits(val)
    }
}
impl From<Pio214Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio214Amena) -> u8 {
        Pio214Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio214Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio214Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio214Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio214Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio214Fsel {
        Pio214Fsel::from_bits(val)
    }
}
impl From<Pio214Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio214Fsel) -> u8 {
        Pio214Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio214Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio214Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio214Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio214Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio214Fulldrive {
        Pio214Fulldrive::from_bits(val)
    }
}
impl From<Pio214Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio214Fulldrive) -> u8 {
        Pio214Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio214Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio214Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio214Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio214Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio214Ibena {
        Pio214Ibena::from_bits(val)
    }
}
impl From<Pio214Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio214Ibena) -> u8 {
        Pio214Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio214Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio214Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio214Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio214Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio214Iiena {
        Pio214Iiena::from_bits(val)
    }
}
impl From<Pio214Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio214Iiena) -> u8 {
        Pio214Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio214Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio214Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio214Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio214Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio214Odena {
        Pio214Odena::from_bits(val)
    }
}
impl From<Pio214Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio214Odena) -> u8 {
        Pio214Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio214Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio214Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio214Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio214Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio214Pupdena {
        Pio214Pupdena::from_bits(val)
    }
}
impl From<Pio214Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio214Pupdena) -> u8 {
        Pio214Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio214Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio214Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio214Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio214Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio214Pupdsel {
        Pio214Pupdsel::from_bits(val)
    }
}
impl From<Pio214Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio214Pupdsel) -> u8 {
        Pio214Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio214Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio214Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio214Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio214Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio214Slewrate {
        Pio214Slewrate::from_bits(val)
    }
}
impl From<Pio214Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio214Slewrate) -> u8 {
        Pio214Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio215Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio215Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio215Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio215Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio215Amena {
        Pio215Amena::from_bits(val)
    }
}
impl From<Pio215Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio215Amena) -> u8 {
        Pio215Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio215Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio215Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio215Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio215Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio215Fsel {
        Pio215Fsel::from_bits(val)
    }
}
impl From<Pio215Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio215Fsel) -> u8 {
        Pio215Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio215Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio215Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio215Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio215Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio215Fulldrive {
        Pio215Fulldrive::from_bits(val)
    }
}
impl From<Pio215Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio215Fulldrive) -> u8 {
        Pio215Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio215Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio215Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio215Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio215Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio215Ibena {
        Pio215Ibena::from_bits(val)
    }
}
impl From<Pio215Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio215Ibena) -> u8 {
        Pio215Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio215Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio215Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio215Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio215Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio215Iiena {
        Pio215Iiena::from_bits(val)
    }
}
impl From<Pio215Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio215Iiena) -> u8 {
        Pio215Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio215Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio215Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio215Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio215Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio215Odena {
        Pio215Odena::from_bits(val)
    }
}
impl From<Pio215Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio215Odena) -> u8 {
        Pio215Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio215Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio215Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio215Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio215Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio215Pupdena {
        Pio215Pupdena::from_bits(val)
    }
}
impl From<Pio215Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio215Pupdena) -> u8 {
        Pio215Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio215Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio215Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio215Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio215Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio215Pupdsel {
        Pio215Pupdsel::from_bits(val)
    }
}
impl From<Pio215Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio215Pupdsel) -> u8 {
        Pio215Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio215Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio215Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio215Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio215Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio215Slewrate {
        Pio215Slewrate::from_bits(val)
    }
}
impl From<Pio215Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio215Slewrate) -> u8 {
        Pio215Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio216Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio216Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio216Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio216Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio216Amena {
        Pio216Amena::from_bits(val)
    }
}
impl From<Pio216Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio216Amena) -> u8 {
        Pio216Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio216Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio216Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio216Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio216Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio216Fsel {
        Pio216Fsel::from_bits(val)
    }
}
impl From<Pio216Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio216Fsel) -> u8 {
        Pio216Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio216Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio216Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio216Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio216Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio216Fulldrive {
        Pio216Fulldrive::from_bits(val)
    }
}
impl From<Pio216Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio216Fulldrive) -> u8 {
        Pio216Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio216Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio216Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio216Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio216Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio216Ibena {
        Pio216Ibena::from_bits(val)
    }
}
impl From<Pio216Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio216Ibena) -> u8 {
        Pio216Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio216Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio216Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio216Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio216Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio216Iiena {
        Pio216Iiena::from_bits(val)
    }
}
impl From<Pio216Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio216Iiena) -> u8 {
        Pio216Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio216Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio216Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio216Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio216Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio216Odena {
        Pio216Odena::from_bits(val)
    }
}
impl From<Pio216Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio216Odena) -> u8 {
        Pio216Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio216Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio216Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio216Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio216Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio216Pupdena {
        Pio216Pupdena::from_bits(val)
    }
}
impl From<Pio216Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio216Pupdena) -> u8 {
        Pio216Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio216Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio216Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio216Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio216Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio216Pupdsel {
        Pio216Pupdsel::from_bits(val)
    }
}
impl From<Pio216Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio216Pupdsel) -> u8 {
        Pio216Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio216Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio216Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio216Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio216Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio216Slewrate {
        Pio216Slewrate::from_bits(val)
    }
}
impl From<Pio216Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio216Slewrate) -> u8 {
        Pio216Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio217Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio217Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio217Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio217Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio217Amena {
        Pio217Amena::from_bits(val)
    }
}
impl From<Pio217Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio217Amena) -> u8 {
        Pio217Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio217Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio217Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio217Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio217Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio217Fsel {
        Pio217Fsel::from_bits(val)
    }
}
impl From<Pio217Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio217Fsel) -> u8 {
        Pio217Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio217Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio217Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio217Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio217Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio217Fulldrive {
        Pio217Fulldrive::from_bits(val)
    }
}
impl From<Pio217Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio217Fulldrive) -> u8 {
        Pio217Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio217Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio217Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio217Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio217Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio217Ibena {
        Pio217Ibena::from_bits(val)
    }
}
impl From<Pio217Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio217Ibena) -> u8 {
        Pio217Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio217Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio217Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio217Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio217Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio217Iiena {
        Pio217Iiena::from_bits(val)
    }
}
impl From<Pio217Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio217Iiena) -> u8 {
        Pio217Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio217Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio217Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio217Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio217Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio217Odena {
        Pio217Odena::from_bits(val)
    }
}
impl From<Pio217Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio217Odena) -> u8 {
        Pio217Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio217Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio217Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio217Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio217Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio217Pupdena {
        Pio217Pupdena::from_bits(val)
    }
}
impl From<Pio217Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio217Pupdena) -> u8 {
        Pio217Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio217Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio217Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio217Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio217Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio217Pupdsel {
        Pio217Pupdsel::from_bits(val)
    }
}
impl From<Pio217Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio217Pupdsel) -> u8 {
        Pio217Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio217Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio217Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio217Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio217Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio217Slewrate {
        Pio217Slewrate::from_bits(val)
    }
}
impl From<Pio217Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio217Slewrate) -> u8 {
        Pio217Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio218Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio218Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio218Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio218Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio218Amena {
        Pio218Amena::from_bits(val)
    }
}
impl From<Pio218Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio218Amena) -> u8 {
        Pio218Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio218Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio218Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio218Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio218Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio218Fsel {
        Pio218Fsel::from_bits(val)
    }
}
impl From<Pio218Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio218Fsel) -> u8 {
        Pio218Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio218Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio218Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio218Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio218Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio218Fulldrive {
        Pio218Fulldrive::from_bits(val)
    }
}
impl From<Pio218Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio218Fulldrive) -> u8 {
        Pio218Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio218Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio218Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio218Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio218Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio218Ibena {
        Pio218Ibena::from_bits(val)
    }
}
impl From<Pio218Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio218Ibena) -> u8 {
        Pio218Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio218Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio218Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio218Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio218Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio218Iiena {
        Pio218Iiena::from_bits(val)
    }
}
impl From<Pio218Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio218Iiena) -> u8 {
        Pio218Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio218Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio218Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio218Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio218Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio218Odena {
        Pio218Odena::from_bits(val)
    }
}
impl From<Pio218Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio218Odena) -> u8 {
        Pio218Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio218Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio218Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio218Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio218Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio218Pupdena {
        Pio218Pupdena::from_bits(val)
    }
}
impl From<Pio218Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio218Pupdena) -> u8 {
        Pio218Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio218Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio218Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio218Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio218Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio218Pupdsel {
        Pio218Pupdsel::from_bits(val)
    }
}
impl From<Pio218Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio218Pupdsel) -> u8 {
        Pio218Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio218Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio218Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio218Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio218Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio218Slewrate {
        Pio218Slewrate::from_bits(val)
    }
}
impl From<Pio218Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio218Slewrate) -> u8 {
        Pio218Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio219Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio219Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio219Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio219Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio219Amena {
        Pio219Amena::from_bits(val)
    }
}
impl From<Pio219Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio219Amena) -> u8 {
        Pio219Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio219Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio219Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio219Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio219Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio219Fsel {
        Pio219Fsel::from_bits(val)
    }
}
impl From<Pio219Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio219Fsel) -> u8 {
        Pio219Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio219Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio219Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio219Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio219Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio219Fulldrive {
        Pio219Fulldrive::from_bits(val)
    }
}
impl From<Pio219Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio219Fulldrive) -> u8 {
        Pio219Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio219Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio219Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio219Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio219Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio219Ibena {
        Pio219Ibena::from_bits(val)
    }
}
impl From<Pio219Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio219Ibena) -> u8 {
        Pio219Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio219Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio219Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio219Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio219Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio219Iiena {
        Pio219Iiena::from_bits(val)
    }
}
impl From<Pio219Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio219Iiena) -> u8 {
        Pio219Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio219Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio219Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio219Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio219Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio219Odena {
        Pio219Odena::from_bits(val)
    }
}
impl From<Pio219Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio219Odena) -> u8 {
        Pio219Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio219Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio219Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio219Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio219Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio219Pupdena {
        Pio219Pupdena::from_bits(val)
    }
}
impl From<Pio219Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio219Pupdena) -> u8 {
        Pio219Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio219Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio219Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio219Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio219Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio219Pupdsel {
        Pio219Pupdsel::from_bits(val)
    }
}
impl From<Pio219Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio219Pupdsel) -> u8 {
        Pio219Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio219Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio219Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio219Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio219Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio219Slewrate {
        Pio219Slewrate::from_bits(val)
    }
}
impl From<Pio219Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio219Slewrate) -> u8 {
        Pio219Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio21Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio21Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio21Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio21Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio21Amena {
        Pio21Amena::from_bits(val)
    }
}
impl From<Pio21Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio21Amena) -> u8 {
        Pio21Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio21Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio21Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio21Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio21Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio21Fsel {
        Pio21Fsel::from_bits(val)
    }
}
impl From<Pio21Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio21Fsel) -> u8 {
        Pio21Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio21Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio21Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio21Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio21Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio21Fulldrive {
        Pio21Fulldrive::from_bits(val)
    }
}
impl From<Pio21Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio21Fulldrive) -> u8 {
        Pio21Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio21Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio21Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio21Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio21Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio21Ibena {
        Pio21Ibena::from_bits(val)
    }
}
impl From<Pio21Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio21Ibena) -> u8 {
        Pio21Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio21Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio21Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio21Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio21Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio21Iiena {
        Pio21Iiena::from_bits(val)
    }
}
impl From<Pio21Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio21Iiena) -> u8 {
        Pio21Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio21Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio21Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio21Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio21Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio21Odena {
        Pio21Odena::from_bits(val)
    }
}
impl From<Pio21Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio21Odena) -> u8 {
        Pio21Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio21Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio21Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio21Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio21Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio21Pupdena {
        Pio21Pupdena::from_bits(val)
    }
}
impl From<Pio21Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio21Pupdena) -> u8 {
        Pio21Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio21Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio21Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio21Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio21Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio21Pupdsel {
        Pio21Pupdsel::from_bits(val)
    }
}
impl From<Pio21Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio21Pupdsel) -> u8 {
        Pio21Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio21Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio21Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio21Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio21Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio21Slewrate {
        Pio21Slewrate::from_bits(val)
    }
}
impl From<Pio21Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio21Slewrate) -> u8 {
        Pio21Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio220Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio220Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio220Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio220Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio220Amena {
        Pio220Amena::from_bits(val)
    }
}
impl From<Pio220Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio220Amena) -> u8 {
        Pio220Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio220Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio220Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio220Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio220Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio220Fsel {
        Pio220Fsel::from_bits(val)
    }
}
impl From<Pio220Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio220Fsel) -> u8 {
        Pio220Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio220Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio220Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio220Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio220Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio220Fulldrive {
        Pio220Fulldrive::from_bits(val)
    }
}
impl From<Pio220Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio220Fulldrive) -> u8 {
        Pio220Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio220Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio220Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio220Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio220Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio220Ibena {
        Pio220Ibena::from_bits(val)
    }
}
impl From<Pio220Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio220Ibena) -> u8 {
        Pio220Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio220Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio220Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio220Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio220Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio220Iiena {
        Pio220Iiena::from_bits(val)
    }
}
impl From<Pio220Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio220Iiena) -> u8 {
        Pio220Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio220Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio220Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio220Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio220Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio220Odena {
        Pio220Odena::from_bits(val)
    }
}
impl From<Pio220Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio220Odena) -> u8 {
        Pio220Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio220Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio220Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio220Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio220Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio220Pupdena {
        Pio220Pupdena::from_bits(val)
    }
}
impl From<Pio220Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio220Pupdena) -> u8 {
        Pio220Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio220Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio220Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio220Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio220Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio220Pupdsel {
        Pio220Pupdsel::from_bits(val)
    }
}
impl From<Pio220Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio220Pupdsel) -> u8 {
        Pio220Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio220Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio220Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio220Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio220Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio220Slewrate {
        Pio220Slewrate::from_bits(val)
    }
}
impl From<Pio220Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio220Slewrate) -> u8 {
        Pio220Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio221Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio221Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio221Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio221Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio221Amena {
        Pio221Amena::from_bits(val)
    }
}
impl From<Pio221Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio221Amena) -> u8 {
        Pio221Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio221Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio221Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio221Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio221Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio221Fsel {
        Pio221Fsel::from_bits(val)
    }
}
impl From<Pio221Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio221Fsel) -> u8 {
        Pio221Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio221Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio221Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio221Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio221Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio221Fulldrive {
        Pio221Fulldrive::from_bits(val)
    }
}
impl From<Pio221Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio221Fulldrive) -> u8 {
        Pio221Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio221Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio221Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio221Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio221Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio221Ibena {
        Pio221Ibena::from_bits(val)
    }
}
impl From<Pio221Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio221Ibena) -> u8 {
        Pio221Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio221Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio221Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio221Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio221Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio221Iiena {
        Pio221Iiena::from_bits(val)
    }
}
impl From<Pio221Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio221Iiena) -> u8 {
        Pio221Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio221Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio221Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio221Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio221Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio221Odena {
        Pio221Odena::from_bits(val)
    }
}
impl From<Pio221Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio221Odena) -> u8 {
        Pio221Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio221Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio221Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio221Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio221Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio221Pupdena {
        Pio221Pupdena::from_bits(val)
    }
}
impl From<Pio221Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio221Pupdena) -> u8 {
        Pio221Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio221Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio221Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio221Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio221Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio221Pupdsel {
        Pio221Pupdsel::from_bits(val)
    }
}
impl From<Pio221Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio221Pupdsel) -> u8 {
        Pio221Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio221Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio221Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio221Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio221Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio221Slewrate {
        Pio221Slewrate::from_bits(val)
    }
}
impl From<Pio221Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio221Slewrate) -> u8 {
        Pio221Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio222Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio222Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio222Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio222Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio222Amena {
        Pio222Amena::from_bits(val)
    }
}
impl From<Pio222Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio222Amena) -> u8 {
        Pio222Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio222Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio222Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio222Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio222Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio222Fsel {
        Pio222Fsel::from_bits(val)
    }
}
impl From<Pio222Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio222Fsel) -> u8 {
        Pio222Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio222Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio222Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio222Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio222Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio222Fulldrive {
        Pio222Fulldrive::from_bits(val)
    }
}
impl From<Pio222Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio222Fulldrive) -> u8 {
        Pio222Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio222Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio222Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio222Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio222Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio222Ibena {
        Pio222Ibena::from_bits(val)
    }
}
impl From<Pio222Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio222Ibena) -> u8 {
        Pio222Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio222Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio222Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio222Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio222Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio222Iiena {
        Pio222Iiena::from_bits(val)
    }
}
impl From<Pio222Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio222Iiena) -> u8 {
        Pio222Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio222Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio222Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio222Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio222Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio222Odena {
        Pio222Odena::from_bits(val)
    }
}
impl From<Pio222Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio222Odena) -> u8 {
        Pio222Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio222Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio222Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio222Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio222Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio222Pupdena {
        Pio222Pupdena::from_bits(val)
    }
}
impl From<Pio222Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio222Pupdena) -> u8 {
        Pio222Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio222Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio222Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio222Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio222Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio222Pupdsel {
        Pio222Pupdsel::from_bits(val)
    }
}
impl From<Pio222Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio222Pupdsel) -> u8 {
        Pio222Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio222Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio222Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio222Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio222Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio222Slewrate {
        Pio222Slewrate::from_bits(val)
    }
}
impl From<Pio222Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio222Slewrate) -> u8 {
        Pio222Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio223Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio223Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio223Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio223Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio223Amena {
        Pio223Amena::from_bits(val)
    }
}
impl From<Pio223Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio223Amena) -> u8 {
        Pio223Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio223Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio223Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio223Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio223Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio223Fsel {
        Pio223Fsel::from_bits(val)
    }
}
impl From<Pio223Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio223Fsel) -> u8 {
        Pio223Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio223Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio223Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio223Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio223Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio223Fulldrive {
        Pio223Fulldrive::from_bits(val)
    }
}
impl From<Pio223Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio223Fulldrive) -> u8 {
        Pio223Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio223Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio223Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio223Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio223Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio223Ibena {
        Pio223Ibena::from_bits(val)
    }
}
impl From<Pio223Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio223Ibena) -> u8 {
        Pio223Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio223Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio223Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio223Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio223Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio223Iiena {
        Pio223Iiena::from_bits(val)
    }
}
impl From<Pio223Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio223Iiena) -> u8 {
        Pio223Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio223Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio223Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio223Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio223Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio223Odena {
        Pio223Odena::from_bits(val)
    }
}
impl From<Pio223Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio223Odena) -> u8 {
        Pio223Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio223Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio223Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio223Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio223Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio223Pupdena {
        Pio223Pupdena::from_bits(val)
    }
}
impl From<Pio223Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio223Pupdena) -> u8 {
        Pio223Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio223Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio223Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio223Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio223Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio223Pupdsel {
        Pio223Pupdsel::from_bits(val)
    }
}
impl From<Pio223Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio223Pupdsel) -> u8 {
        Pio223Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio223Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio223Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio223Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio223Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio223Slewrate {
        Pio223Slewrate::from_bits(val)
    }
}
impl From<Pio223Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio223Slewrate) -> u8 {
        Pio223Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio224Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio224Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio224Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio224Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio224Amena {
        Pio224Amena::from_bits(val)
    }
}
impl From<Pio224Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio224Amena) -> u8 {
        Pio224Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio224Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio224Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio224Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio224Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio224Fsel {
        Pio224Fsel::from_bits(val)
    }
}
impl From<Pio224Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio224Fsel) -> u8 {
        Pio224Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio224Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio224Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio224Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio224Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio224Fulldrive {
        Pio224Fulldrive::from_bits(val)
    }
}
impl From<Pio224Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio224Fulldrive) -> u8 {
        Pio224Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio224Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio224Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio224Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio224Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio224Ibena {
        Pio224Ibena::from_bits(val)
    }
}
impl From<Pio224Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio224Ibena) -> u8 {
        Pio224Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio224Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio224Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio224Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio224Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio224Iiena {
        Pio224Iiena::from_bits(val)
    }
}
impl From<Pio224Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio224Iiena) -> u8 {
        Pio224Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio224Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio224Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio224Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio224Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio224Odena {
        Pio224Odena::from_bits(val)
    }
}
impl From<Pio224Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio224Odena) -> u8 {
        Pio224Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio224Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio224Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio224Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio224Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio224Pupdena {
        Pio224Pupdena::from_bits(val)
    }
}
impl From<Pio224Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio224Pupdena) -> u8 {
        Pio224Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio224Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio224Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio224Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio224Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio224Pupdsel {
        Pio224Pupdsel::from_bits(val)
    }
}
impl From<Pio224Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio224Pupdsel) -> u8 {
        Pio224Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio224Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio224Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio224Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio224Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio224Slewrate {
        Pio224Slewrate::from_bits(val)
    }
}
impl From<Pio224Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio224Slewrate) -> u8 {
        Pio224Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio225Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio225Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio225Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio225Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio225Amena {
        Pio225Amena::from_bits(val)
    }
}
impl From<Pio225Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio225Amena) -> u8 {
        Pio225Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio225Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio225Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio225Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio225Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio225Fsel {
        Pio225Fsel::from_bits(val)
    }
}
impl From<Pio225Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio225Fsel) -> u8 {
        Pio225Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio225Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio225Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio225Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio225Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio225Fulldrive {
        Pio225Fulldrive::from_bits(val)
    }
}
impl From<Pio225Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio225Fulldrive) -> u8 {
        Pio225Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio225Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio225Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio225Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio225Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio225Ibena {
        Pio225Ibena::from_bits(val)
    }
}
impl From<Pio225Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio225Ibena) -> u8 {
        Pio225Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio225Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio225Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio225Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio225Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio225Iiena {
        Pio225Iiena::from_bits(val)
    }
}
impl From<Pio225Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio225Iiena) -> u8 {
        Pio225Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio225Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio225Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio225Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio225Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio225Odena {
        Pio225Odena::from_bits(val)
    }
}
impl From<Pio225Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio225Odena) -> u8 {
        Pio225Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio225Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio225Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio225Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio225Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio225Pupdena {
        Pio225Pupdena::from_bits(val)
    }
}
impl From<Pio225Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio225Pupdena) -> u8 {
        Pio225Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio225Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio225Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio225Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio225Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio225Pupdsel {
        Pio225Pupdsel::from_bits(val)
    }
}
impl From<Pio225Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio225Pupdsel) -> u8 {
        Pio225Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio225Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio225Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio225Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio225Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio225Slewrate {
        Pio225Slewrate::from_bits(val)
    }
}
impl From<Pio225Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio225Slewrate) -> u8 {
        Pio225Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio226Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio226Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio226Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio226Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio226Amena {
        Pio226Amena::from_bits(val)
    }
}
impl From<Pio226Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio226Amena) -> u8 {
        Pio226Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio226Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio226Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio226Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio226Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio226Fsel {
        Pio226Fsel::from_bits(val)
    }
}
impl From<Pio226Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio226Fsel) -> u8 {
        Pio226Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio226Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio226Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio226Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio226Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio226Fulldrive {
        Pio226Fulldrive::from_bits(val)
    }
}
impl From<Pio226Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio226Fulldrive) -> u8 {
        Pio226Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio226Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio226Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio226Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio226Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio226Ibena {
        Pio226Ibena::from_bits(val)
    }
}
impl From<Pio226Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio226Ibena) -> u8 {
        Pio226Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio226Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio226Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio226Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio226Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio226Iiena {
        Pio226Iiena::from_bits(val)
    }
}
impl From<Pio226Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio226Iiena) -> u8 {
        Pio226Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio226Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio226Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio226Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio226Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio226Odena {
        Pio226Odena::from_bits(val)
    }
}
impl From<Pio226Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio226Odena) -> u8 {
        Pio226Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio226Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio226Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio226Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio226Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio226Pupdena {
        Pio226Pupdena::from_bits(val)
    }
}
impl From<Pio226Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio226Pupdena) -> u8 {
        Pio226Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio226Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio226Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio226Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio226Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio226Pupdsel {
        Pio226Pupdsel::from_bits(val)
    }
}
impl From<Pio226Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio226Pupdsel) -> u8 {
        Pio226Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio226Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio226Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio226Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio226Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio226Slewrate {
        Pio226Slewrate::from_bits(val)
    }
}
impl From<Pio226Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio226Slewrate) -> u8 {
        Pio226Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio227Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio227Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio227Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio227Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio227Amena {
        Pio227Amena::from_bits(val)
    }
}
impl From<Pio227Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio227Amena) -> u8 {
        Pio227Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio227Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio227Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio227Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio227Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio227Fsel {
        Pio227Fsel::from_bits(val)
    }
}
impl From<Pio227Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio227Fsel) -> u8 {
        Pio227Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio227Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio227Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio227Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio227Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio227Fulldrive {
        Pio227Fulldrive::from_bits(val)
    }
}
impl From<Pio227Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio227Fulldrive) -> u8 {
        Pio227Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio227Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio227Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio227Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio227Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio227Ibena {
        Pio227Ibena::from_bits(val)
    }
}
impl From<Pio227Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio227Ibena) -> u8 {
        Pio227Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio227Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio227Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio227Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio227Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio227Iiena {
        Pio227Iiena::from_bits(val)
    }
}
impl From<Pio227Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio227Iiena) -> u8 {
        Pio227Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio227Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio227Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio227Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio227Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio227Odena {
        Pio227Odena::from_bits(val)
    }
}
impl From<Pio227Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio227Odena) -> u8 {
        Pio227Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio227Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio227Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio227Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio227Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio227Pupdena {
        Pio227Pupdena::from_bits(val)
    }
}
impl From<Pio227Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio227Pupdena) -> u8 {
        Pio227Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio227Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio227Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio227Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio227Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio227Pupdsel {
        Pio227Pupdsel::from_bits(val)
    }
}
impl From<Pio227Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio227Pupdsel) -> u8 {
        Pio227Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio227Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio227Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio227Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio227Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio227Slewrate {
        Pio227Slewrate::from_bits(val)
    }
}
impl From<Pio227Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio227Slewrate) -> u8 {
        Pio227Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio228Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio228Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio228Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio228Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio228Amena {
        Pio228Amena::from_bits(val)
    }
}
impl From<Pio228Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio228Amena) -> u8 {
        Pio228Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio228Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio228Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio228Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio228Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio228Fsel {
        Pio228Fsel::from_bits(val)
    }
}
impl From<Pio228Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio228Fsel) -> u8 {
        Pio228Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio228Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio228Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio228Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio228Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio228Fulldrive {
        Pio228Fulldrive::from_bits(val)
    }
}
impl From<Pio228Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio228Fulldrive) -> u8 {
        Pio228Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio228Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio228Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio228Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio228Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio228Ibena {
        Pio228Ibena::from_bits(val)
    }
}
impl From<Pio228Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio228Ibena) -> u8 {
        Pio228Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio228Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio228Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio228Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio228Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio228Iiena {
        Pio228Iiena::from_bits(val)
    }
}
impl From<Pio228Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio228Iiena) -> u8 {
        Pio228Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio228Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio228Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio228Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio228Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio228Odena {
        Pio228Odena::from_bits(val)
    }
}
impl From<Pio228Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio228Odena) -> u8 {
        Pio228Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio228Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio228Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio228Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio228Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio228Pupdena {
        Pio228Pupdena::from_bits(val)
    }
}
impl From<Pio228Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio228Pupdena) -> u8 {
        Pio228Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio228Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio228Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio228Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio228Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio228Pupdsel {
        Pio228Pupdsel::from_bits(val)
    }
}
impl From<Pio228Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio228Pupdsel) -> u8 {
        Pio228Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio228Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio228Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio228Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio228Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio228Slewrate {
        Pio228Slewrate::from_bits(val)
    }
}
impl From<Pio228Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio228Slewrate) -> u8 {
        Pio228Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio229Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio229Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio229Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio229Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio229Amena {
        Pio229Amena::from_bits(val)
    }
}
impl From<Pio229Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio229Amena) -> u8 {
        Pio229Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio229Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio229Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio229Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio229Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio229Fsel {
        Pio229Fsel::from_bits(val)
    }
}
impl From<Pio229Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio229Fsel) -> u8 {
        Pio229Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio229Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio229Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio229Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio229Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio229Fulldrive {
        Pio229Fulldrive::from_bits(val)
    }
}
impl From<Pio229Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio229Fulldrive) -> u8 {
        Pio229Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio229Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio229Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio229Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio229Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio229Ibena {
        Pio229Ibena::from_bits(val)
    }
}
impl From<Pio229Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio229Ibena) -> u8 {
        Pio229Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio229Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio229Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio229Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio229Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio229Iiena {
        Pio229Iiena::from_bits(val)
    }
}
impl From<Pio229Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio229Iiena) -> u8 {
        Pio229Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio229Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio229Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio229Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio229Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio229Odena {
        Pio229Odena::from_bits(val)
    }
}
impl From<Pio229Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio229Odena) -> u8 {
        Pio229Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio229Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio229Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio229Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio229Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio229Pupdena {
        Pio229Pupdena::from_bits(val)
    }
}
impl From<Pio229Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio229Pupdena) -> u8 {
        Pio229Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio229Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio229Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio229Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio229Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio229Pupdsel {
        Pio229Pupdsel::from_bits(val)
    }
}
impl From<Pio229Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio229Pupdsel) -> u8 {
        Pio229Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio229Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio229Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio229Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio229Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio229Slewrate {
        Pio229Slewrate::from_bits(val)
    }
}
impl From<Pio229Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio229Slewrate) -> u8 {
        Pio229Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio22Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio22Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio22Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio22Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio22Amena {
        Pio22Amena::from_bits(val)
    }
}
impl From<Pio22Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio22Amena) -> u8 {
        Pio22Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio22Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio22Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio22Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio22Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio22Fsel {
        Pio22Fsel::from_bits(val)
    }
}
impl From<Pio22Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio22Fsel) -> u8 {
        Pio22Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio22Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio22Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio22Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio22Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio22Fulldrive {
        Pio22Fulldrive::from_bits(val)
    }
}
impl From<Pio22Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio22Fulldrive) -> u8 {
        Pio22Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio22Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio22Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio22Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio22Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio22Ibena {
        Pio22Ibena::from_bits(val)
    }
}
impl From<Pio22Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio22Ibena) -> u8 {
        Pio22Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio22Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio22Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio22Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio22Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio22Iiena {
        Pio22Iiena::from_bits(val)
    }
}
impl From<Pio22Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio22Iiena) -> u8 {
        Pio22Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio22Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio22Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio22Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio22Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio22Odena {
        Pio22Odena::from_bits(val)
    }
}
impl From<Pio22Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio22Odena) -> u8 {
        Pio22Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio22Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio22Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio22Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio22Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio22Pupdena {
        Pio22Pupdena::from_bits(val)
    }
}
impl From<Pio22Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio22Pupdena) -> u8 {
        Pio22Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio22Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio22Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio22Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio22Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio22Pupdsel {
        Pio22Pupdsel::from_bits(val)
    }
}
impl From<Pio22Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio22Pupdsel) -> u8 {
        Pio22Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio22Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio22Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio22Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio22Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio22Slewrate {
        Pio22Slewrate::from_bits(val)
    }
}
impl From<Pio22Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio22Slewrate) -> u8 {
        Pio22Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio230Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio230Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio230Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio230Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio230Amena {
        Pio230Amena::from_bits(val)
    }
}
impl From<Pio230Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio230Amena) -> u8 {
        Pio230Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio230Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio230Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio230Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio230Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio230Fsel {
        Pio230Fsel::from_bits(val)
    }
}
impl From<Pio230Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio230Fsel) -> u8 {
        Pio230Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio230Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio230Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio230Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio230Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio230Fulldrive {
        Pio230Fulldrive::from_bits(val)
    }
}
impl From<Pio230Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio230Fulldrive) -> u8 {
        Pio230Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio230Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio230Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio230Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio230Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio230Ibena {
        Pio230Ibena::from_bits(val)
    }
}
impl From<Pio230Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio230Ibena) -> u8 {
        Pio230Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio230Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio230Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio230Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio230Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio230Iiena {
        Pio230Iiena::from_bits(val)
    }
}
impl From<Pio230Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio230Iiena) -> u8 {
        Pio230Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio230Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio230Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio230Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio230Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio230Odena {
        Pio230Odena::from_bits(val)
    }
}
impl From<Pio230Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio230Odena) -> u8 {
        Pio230Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio230Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio230Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio230Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio230Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio230Pupdena {
        Pio230Pupdena::from_bits(val)
    }
}
impl From<Pio230Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio230Pupdena) -> u8 {
        Pio230Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio230Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio230Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio230Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio230Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio230Pupdsel {
        Pio230Pupdsel::from_bits(val)
    }
}
impl From<Pio230Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio230Pupdsel) -> u8 {
        Pio230Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio230Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio230Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio230Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio230Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio230Slewrate {
        Pio230Slewrate::from_bits(val)
    }
}
impl From<Pio230Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio230Slewrate) -> u8 {
        Pio230Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio231Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio231Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio231Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio231Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio231Amena {
        Pio231Amena::from_bits(val)
    }
}
impl From<Pio231Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio231Amena) -> u8 {
        Pio231Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio231Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio231Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio231Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio231Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio231Fsel {
        Pio231Fsel::from_bits(val)
    }
}
impl From<Pio231Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio231Fsel) -> u8 {
        Pio231Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio231Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio231Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio231Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio231Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio231Fulldrive {
        Pio231Fulldrive::from_bits(val)
    }
}
impl From<Pio231Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio231Fulldrive) -> u8 {
        Pio231Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio231Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio231Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio231Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio231Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio231Ibena {
        Pio231Ibena::from_bits(val)
    }
}
impl From<Pio231Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio231Ibena) -> u8 {
        Pio231Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio231Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio231Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio231Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio231Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio231Iiena {
        Pio231Iiena::from_bits(val)
    }
}
impl From<Pio231Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio231Iiena) -> u8 {
        Pio231Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio231Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio231Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio231Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio231Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio231Odena {
        Pio231Odena::from_bits(val)
    }
}
impl From<Pio231Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio231Odena) -> u8 {
        Pio231Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio231Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio231Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio231Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio231Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio231Pupdena {
        Pio231Pupdena::from_bits(val)
    }
}
impl From<Pio231Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio231Pupdena) -> u8 {
        Pio231Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio231Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio231Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio231Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio231Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio231Pupdsel {
        Pio231Pupdsel::from_bits(val)
    }
}
impl From<Pio231Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio231Pupdsel) -> u8 {
        Pio231Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio231Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio231Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio231Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio231Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio231Slewrate {
        Pio231Slewrate::from_bits(val)
    }
}
impl From<Pio231Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio231Slewrate) -> u8 {
        Pio231Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio23Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio23Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio23Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio23Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio23Amena {
        Pio23Amena::from_bits(val)
    }
}
impl From<Pio23Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio23Amena) -> u8 {
        Pio23Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio23Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio23Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio23Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio23Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio23Fsel {
        Pio23Fsel::from_bits(val)
    }
}
impl From<Pio23Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio23Fsel) -> u8 {
        Pio23Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio23Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio23Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio23Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio23Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio23Fulldrive {
        Pio23Fulldrive::from_bits(val)
    }
}
impl From<Pio23Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio23Fulldrive) -> u8 {
        Pio23Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio23Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio23Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio23Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio23Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio23Ibena {
        Pio23Ibena::from_bits(val)
    }
}
impl From<Pio23Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio23Ibena) -> u8 {
        Pio23Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio23Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio23Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio23Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio23Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio23Iiena {
        Pio23Iiena::from_bits(val)
    }
}
impl From<Pio23Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio23Iiena) -> u8 {
        Pio23Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio23Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio23Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio23Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio23Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio23Odena {
        Pio23Odena::from_bits(val)
    }
}
impl From<Pio23Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio23Odena) -> u8 {
        Pio23Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio23Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio23Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio23Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio23Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio23Pupdena {
        Pio23Pupdena::from_bits(val)
    }
}
impl From<Pio23Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio23Pupdena) -> u8 {
        Pio23Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio23Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio23Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio23Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio23Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio23Pupdsel {
        Pio23Pupdsel::from_bits(val)
    }
}
impl From<Pio23Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio23Pupdsel) -> u8 {
        Pio23Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio23Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio23Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio23Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio23Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio23Slewrate {
        Pio23Slewrate::from_bits(val)
    }
}
impl From<Pio23Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio23Slewrate) -> u8 {
        Pio23Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio24Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio24Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio24Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio24Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio24Amena {
        Pio24Amena::from_bits(val)
    }
}
impl From<Pio24Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio24Amena) -> u8 {
        Pio24Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio24Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio24Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio24Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio24Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio24Fsel {
        Pio24Fsel::from_bits(val)
    }
}
impl From<Pio24Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio24Fsel) -> u8 {
        Pio24Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio24Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio24Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio24Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio24Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio24Fulldrive {
        Pio24Fulldrive::from_bits(val)
    }
}
impl From<Pio24Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio24Fulldrive) -> u8 {
        Pio24Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio24Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio24Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio24Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio24Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio24Ibena {
        Pio24Ibena::from_bits(val)
    }
}
impl From<Pio24Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio24Ibena) -> u8 {
        Pio24Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio24Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio24Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio24Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio24Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio24Iiena {
        Pio24Iiena::from_bits(val)
    }
}
impl From<Pio24Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio24Iiena) -> u8 {
        Pio24Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio24Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio24Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio24Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio24Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio24Odena {
        Pio24Odena::from_bits(val)
    }
}
impl From<Pio24Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio24Odena) -> u8 {
        Pio24Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio24Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio24Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio24Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio24Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio24Pupdena {
        Pio24Pupdena::from_bits(val)
    }
}
impl From<Pio24Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio24Pupdena) -> u8 {
        Pio24Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio24Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio24Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio24Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio24Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio24Pupdsel {
        Pio24Pupdsel::from_bits(val)
    }
}
impl From<Pio24Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio24Pupdsel) -> u8 {
        Pio24Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio24Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio24Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio24Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio24Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio24Slewrate {
        Pio24Slewrate::from_bits(val)
    }
}
impl From<Pio24Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio24Slewrate) -> u8 {
        Pio24Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio25Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio25Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio25Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio25Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio25Amena {
        Pio25Amena::from_bits(val)
    }
}
impl From<Pio25Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio25Amena) -> u8 {
        Pio25Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio25Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio25Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio25Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio25Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio25Fsel {
        Pio25Fsel::from_bits(val)
    }
}
impl From<Pio25Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio25Fsel) -> u8 {
        Pio25Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio25Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio25Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio25Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio25Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio25Fulldrive {
        Pio25Fulldrive::from_bits(val)
    }
}
impl From<Pio25Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio25Fulldrive) -> u8 {
        Pio25Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio25Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio25Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio25Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio25Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio25Ibena {
        Pio25Ibena::from_bits(val)
    }
}
impl From<Pio25Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio25Ibena) -> u8 {
        Pio25Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio25Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio25Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio25Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio25Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio25Iiena {
        Pio25Iiena::from_bits(val)
    }
}
impl From<Pio25Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio25Iiena) -> u8 {
        Pio25Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio25Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio25Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio25Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio25Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio25Odena {
        Pio25Odena::from_bits(val)
    }
}
impl From<Pio25Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio25Odena) -> u8 {
        Pio25Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio25Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio25Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio25Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio25Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio25Pupdena {
        Pio25Pupdena::from_bits(val)
    }
}
impl From<Pio25Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio25Pupdena) -> u8 {
        Pio25Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio25Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio25Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio25Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio25Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio25Pupdsel {
        Pio25Pupdsel::from_bits(val)
    }
}
impl From<Pio25Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio25Pupdsel) -> u8 {
        Pio25Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio25Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio25Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio25Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio25Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio25Slewrate {
        Pio25Slewrate::from_bits(val)
    }
}
impl From<Pio25Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio25Slewrate) -> u8 {
        Pio25Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio26Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio26Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio26Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio26Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio26Amena {
        Pio26Amena::from_bits(val)
    }
}
impl From<Pio26Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio26Amena) -> u8 {
        Pio26Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio26Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio26Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio26Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio26Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio26Fsel {
        Pio26Fsel::from_bits(val)
    }
}
impl From<Pio26Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio26Fsel) -> u8 {
        Pio26Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio26Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio26Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio26Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio26Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio26Fulldrive {
        Pio26Fulldrive::from_bits(val)
    }
}
impl From<Pio26Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio26Fulldrive) -> u8 {
        Pio26Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio26Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio26Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio26Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio26Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio26Ibena {
        Pio26Ibena::from_bits(val)
    }
}
impl From<Pio26Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio26Ibena) -> u8 {
        Pio26Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio26Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio26Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio26Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio26Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio26Iiena {
        Pio26Iiena::from_bits(val)
    }
}
impl From<Pio26Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio26Iiena) -> u8 {
        Pio26Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio26Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio26Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio26Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio26Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio26Odena {
        Pio26Odena::from_bits(val)
    }
}
impl From<Pio26Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio26Odena) -> u8 {
        Pio26Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio26Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio26Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio26Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio26Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio26Pupdena {
        Pio26Pupdena::from_bits(val)
    }
}
impl From<Pio26Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio26Pupdena) -> u8 {
        Pio26Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio26Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio26Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio26Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio26Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio26Pupdsel {
        Pio26Pupdsel::from_bits(val)
    }
}
impl From<Pio26Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio26Pupdsel) -> u8 {
        Pio26Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio26Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio26Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio26Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio26Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio26Slewrate {
        Pio26Slewrate::from_bits(val)
    }
}
impl From<Pio26Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio26Slewrate) -> u8 {
        Pio26Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio27Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio27Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio27Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio27Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio27Amena {
        Pio27Amena::from_bits(val)
    }
}
impl From<Pio27Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio27Amena) -> u8 {
        Pio27Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio27Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio27Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio27Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio27Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio27Fsel {
        Pio27Fsel::from_bits(val)
    }
}
impl From<Pio27Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio27Fsel) -> u8 {
        Pio27Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio27Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio27Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio27Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio27Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio27Fulldrive {
        Pio27Fulldrive::from_bits(val)
    }
}
impl From<Pio27Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio27Fulldrive) -> u8 {
        Pio27Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio27Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio27Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio27Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio27Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio27Ibena {
        Pio27Ibena::from_bits(val)
    }
}
impl From<Pio27Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio27Ibena) -> u8 {
        Pio27Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio27Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio27Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio27Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio27Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio27Iiena {
        Pio27Iiena::from_bits(val)
    }
}
impl From<Pio27Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio27Iiena) -> u8 {
        Pio27Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio27Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio27Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio27Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio27Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio27Odena {
        Pio27Odena::from_bits(val)
    }
}
impl From<Pio27Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio27Odena) -> u8 {
        Pio27Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio27Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio27Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio27Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio27Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio27Pupdena {
        Pio27Pupdena::from_bits(val)
    }
}
impl From<Pio27Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio27Pupdena) -> u8 {
        Pio27Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio27Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio27Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio27Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio27Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio27Pupdsel {
        Pio27Pupdsel::from_bits(val)
    }
}
impl From<Pio27Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio27Pupdsel) -> u8 {
        Pio27Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio27Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio27Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio27Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio27Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio27Slewrate {
        Pio27Slewrate::from_bits(val)
    }
}
impl From<Pio27Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio27Slewrate) -> u8 {
        Pio27Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio28Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio28Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio28Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio28Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio28Amena {
        Pio28Amena::from_bits(val)
    }
}
impl From<Pio28Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio28Amena) -> u8 {
        Pio28Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio28Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio28Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio28Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio28Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio28Fsel {
        Pio28Fsel::from_bits(val)
    }
}
impl From<Pio28Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio28Fsel) -> u8 {
        Pio28Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio28Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio28Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio28Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio28Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio28Fulldrive {
        Pio28Fulldrive::from_bits(val)
    }
}
impl From<Pio28Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio28Fulldrive) -> u8 {
        Pio28Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio28Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio28Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio28Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio28Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio28Ibena {
        Pio28Ibena::from_bits(val)
    }
}
impl From<Pio28Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio28Ibena) -> u8 {
        Pio28Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio28Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio28Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio28Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio28Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio28Iiena {
        Pio28Iiena::from_bits(val)
    }
}
impl From<Pio28Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio28Iiena) -> u8 {
        Pio28Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio28Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio28Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio28Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio28Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio28Odena {
        Pio28Odena::from_bits(val)
    }
}
impl From<Pio28Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio28Odena) -> u8 {
        Pio28Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio28Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio28Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio28Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio28Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio28Pupdena {
        Pio28Pupdena::from_bits(val)
    }
}
impl From<Pio28Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio28Pupdena) -> u8 {
        Pio28Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio28Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio28Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio28Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio28Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio28Pupdsel {
        Pio28Pupdsel::from_bits(val)
    }
}
impl From<Pio28Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio28Pupdsel) -> u8 {
        Pio28Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio28Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio28Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio28Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio28Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio28Slewrate {
        Pio28Slewrate::from_bits(val)
    }
}
impl From<Pio28Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio28Slewrate) -> u8 {
        Pio28Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio29Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio29Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio29Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio29Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio29Amena {
        Pio29Amena::from_bits(val)
    }
}
impl From<Pio29Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio29Amena) -> u8 {
        Pio29Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio29Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio29Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio29Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio29Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio29Fsel {
        Pio29Fsel::from_bits(val)
    }
}
impl From<Pio29Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio29Fsel) -> u8 {
        Pio29Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio29Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio29Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio29Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio29Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio29Fulldrive {
        Pio29Fulldrive::from_bits(val)
    }
}
impl From<Pio29Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio29Fulldrive) -> u8 {
        Pio29Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio29Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio29Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio29Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio29Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio29Ibena {
        Pio29Ibena::from_bits(val)
    }
}
impl From<Pio29Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio29Ibena) -> u8 {
        Pio29Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio29Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio29Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio29Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio29Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio29Iiena {
        Pio29Iiena::from_bits(val)
    }
}
impl From<Pio29Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio29Iiena) -> u8 {
        Pio29Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio29Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio29Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio29Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio29Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio29Odena {
        Pio29Odena::from_bits(val)
    }
}
impl From<Pio29Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio29Odena) -> u8 {
        Pio29Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio29Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio29Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio29Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio29Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio29Pupdena {
        Pio29Pupdena::from_bits(val)
    }
}
impl From<Pio29Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio29Pupdena) -> u8 {
        Pio29Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio29Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio29Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio29Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio29Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio29Pupdsel {
        Pio29Pupdsel::from_bits(val)
    }
}
impl From<Pio29Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio29Pupdsel) -> u8 {
        Pio29Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio29Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio29Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio29Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio29Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio29Slewrate {
        Pio29Slewrate::from_bits(val)
    }
}
impl From<Pio29Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio29Slewrate) -> u8 {
        Pio29Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio30Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio30Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio30Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio30Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio30Amena {
        Pio30Amena::from_bits(val)
    }
}
impl From<Pio30Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio30Amena) -> u8 {
        Pio30Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio30Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio30Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio30Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio30Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio30Fsel {
        Pio30Fsel::from_bits(val)
    }
}
impl From<Pio30Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio30Fsel) -> u8 {
        Pio30Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio30Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio30Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio30Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio30Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio30Fulldrive {
        Pio30Fulldrive::from_bits(val)
    }
}
impl From<Pio30Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio30Fulldrive) -> u8 {
        Pio30Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio30Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio30Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio30Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio30Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio30Ibena {
        Pio30Ibena::from_bits(val)
    }
}
impl From<Pio30Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio30Ibena) -> u8 {
        Pio30Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio30Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio30Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio30Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio30Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio30Iiena {
        Pio30Iiena::from_bits(val)
    }
}
impl From<Pio30Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio30Iiena) -> u8 {
        Pio30Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio30Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio30Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio30Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio30Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio30Odena {
        Pio30Odena::from_bits(val)
    }
}
impl From<Pio30Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio30Odena) -> u8 {
        Pio30Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio30Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio30Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio30Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio30Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio30Pupdena {
        Pio30Pupdena::from_bits(val)
    }
}
impl From<Pio30Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio30Pupdena) -> u8 {
        Pio30Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio30Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio30Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio30Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio30Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio30Pupdsel {
        Pio30Pupdsel::from_bits(val)
    }
}
impl From<Pio30Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio30Pupdsel) -> u8 {
        Pio30Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio30Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio30Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio30Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio30Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio30Slewrate {
        Pio30Slewrate::from_bits(val)
    }
}
impl From<Pio30Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio30Slewrate) -> u8 {
        Pio30Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio310Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio310Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio310Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio310Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio310Amena {
        Pio310Amena::from_bits(val)
    }
}
impl From<Pio310Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio310Amena) -> u8 {
        Pio310Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio310Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio310Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio310Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio310Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio310Fsel {
        Pio310Fsel::from_bits(val)
    }
}
impl From<Pio310Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio310Fsel) -> u8 {
        Pio310Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio310Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio310Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio310Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio310Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio310Fulldrive {
        Pio310Fulldrive::from_bits(val)
    }
}
impl From<Pio310Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio310Fulldrive) -> u8 {
        Pio310Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio310Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio310Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio310Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio310Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio310Ibena {
        Pio310Ibena::from_bits(val)
    }
}
impl From<Pio310Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio310Ibena) -> u8 {
        Pio310Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio310Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio310Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio310Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio310Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio310Iiena {
        Pio310Iiena::from_bits(val)
    }
}
impl From<Pio310Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio310Iiena) -> u8 {
        Pio310Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio310Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio310Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio310Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio310Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio310Odena {
        Pio310Odena::from_bits(val)
    }
}
impl From<Pio310Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio310Odena) -> u8 {
        Pio310Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio310Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio310Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio310Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio310Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio310Pupdena {
        Pio310Pupdena::from_bits(val)
    }
}
impl From<Pio310Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio310Pupdena) -> u8 {
        Pio310Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio310Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio310Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio310Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio310Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio310Pupdsel {
        Pio310Pupdsel::from_bits(val)
    }
}
impl From<Pio310Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio310Pupdsel) -> u8 {
        Pio310Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio310Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio310Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio310Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio310Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio310Slewrate {
        Pio310Slewrate::from_bits(val)
    }
}
impl From<Pio310Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio310Slewrate) -> u8 {
        Pio310Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio311Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio311Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio311Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio311Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio311Amena {
        Pio311Amena::from_bits(val)
    }
}
impl From<Pio311Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio311Amena) -> u8 {
        Pio311Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio311Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio311Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio311Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio311Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio311Fsel {
        Pio311Fsel::from_bits(val)
    }
}
impl From<Pio311Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio311Fsel) -> u8 {
        Pio311Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio311Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio311Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio311Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio311Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio311Fulldrive {
        Pio311Fulldrive::from_bits(val)
    }
}
impl From<Pio311Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio311Fulldrive) -> u8 {
        Pio311Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio311Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio311Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio311Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio311Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio311Ibena {
        Pio311Ibena::from_bits(val)
    }
}
impl From<Pio311Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio311Ibena) -> u8 {
        Pio311Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio311Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio311Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio311Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio311Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio311Iiena {
        Pio311Iiena::from_bits(val)
    }
}
impl From<Pio311Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio311Iiena) -> u8 {
        Pio311Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio311Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio311Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio311Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio311Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio311Odena {
        Pio311Odena::from_bits(val)
    }
}
impl From<Pio311Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio311Odena) -> u8 {
        Pio311Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio311Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio311Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio311Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio311Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio311Pupdena {
        Pio311Pupdena::from_bits(val)
    }
}
impl From<Pio311Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio311Pupdena) -> u8 {
        Pio311Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio311Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio311Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio311Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio311Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio311Pupdsel {
        Pio311Pupdsel::from_bits(val)
    }
}
impl From<Pio311Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio311Pupdsel) -> u8 {
        Pio311Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio311Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio311Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio311Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio311Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio311Slewrate {
        Pio311Slewrate::from_bits(val)
    }
}
impl From<Pio311Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio311Slewrate) -> u8 {
        Pio311Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio312Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio312Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio312Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio312Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio312Amena {
        Pio312Amena::from_bits(val)
    }
}
impl From<Pio312Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio312Amena) -> u8 {
        Pio312Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio312Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio312Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio312Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio312Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio312Fsel {
        Pio312Fsel::from_bits(val)
    }
}
impl From<Pio312Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio312Fsel) -> u8 {
        Pio312Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio312Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio312Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio312Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio312Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio312Fulldrive {
        Pio312Fulldrive::from_bits(val)
    }
}
impl From<Pio312Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio312Fulldrive) -> u8 {
        Pio312Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio312Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio312Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio312Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio312Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio312Ibena {
        Pio312Ibena::from_bits(val)
    }
}
impl From<Pio312Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio312Ibena) -> u8 {
        Pio312Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio312Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio312Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio312Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio312Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio312Iiena {
        Pio312Iiena::from_bits(val)
    }
}
impl From<Pio312Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio312Iiena) -> u8 {
        Pio312Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio312Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio312Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio312Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio312Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio312Odena {
        Pio312Odena::from_bits(val)
    }
}
impl From<Pio312Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio312Odena) -> u8 {
        Pio312Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio312Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio312Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio312Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio312Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio312Pupdena {
        Pio312Pupdena::from_bits(val)
    }
}
impl From<Pio312Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio312Pupdena) -> u8 {
        Pio312Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio312Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio312Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio312Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio312Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio312Pupdsel {
        Pio312Pupdsel::from_bits(val)
    }
}
impl From<Pio312Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio312Pupdsel) -> u8 {
        Pio312Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio312Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio312Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio312Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio312Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio312Slewrate {
        Pio312Slewrate::from_bits(val)
    }
}
impl From<Pio312Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio312Slewrate) -> u8 {
        Pio312Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio313Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio313Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio313Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio313Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio313Amena {
        Pio313Amena::from_bits(val)
    }
}
impl From<Pio313Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio313Amena) -> u8 {
        Pio313Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio313Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio313Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio313Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio313Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio313Fsel {
        Pio313Fsel::from_bits(val)
    }
}
impl From<Pio313Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio313Fsel) -> u8 {
        Pio313Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio313Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio313Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio313Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio313Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio313Fulldrive {
        Pio313Fulldrive::from_bits(val)
    }
}
impl From<Pio313Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio313Fulldrive) -> u8 {
        Pio313Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio313Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio313Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio313Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio313Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio313Ibena {
        Pio313Ibena::from_bits(val)
    }
}
impl From<Pio313Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio313Ibena) -> u8 {
        Pio313Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio313Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio313Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio313Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio313Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio313Iiena {
        Pio313Iiena::from_bits(val)
    }
}
impl From<Pio313Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio313Iiena) -> u8 {
        Pio313Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio313Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio313Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio313Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio313Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio313Odena {
        Pio313Odena::from_bits(val)
    }
}
impl From<Pio313Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio313Odena) -> u8 {
        Pio313Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio313Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio313Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio313Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio313Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio313Pupdena {
        Pio313Pupdena::from_bits(val)
    }
}
impl From<Pio313Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio313Pupdena) -> u8 {
        Pio313Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio313Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio313Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio313Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio313Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio313Pupdsel {
        Pio313Pupdsel::from_bits(val)
    }
}
impl From<Pio313Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio313Pupdsel) -> u8 {
        Pio313Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio313Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio313Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio313Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio313Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio313Slewrate {
        Pio313Slewrate::from_bits(val)
    }
}
impl From<Pio313Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio313Slewrate) -> u8 {
        Pio313Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio314Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio314Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio314Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio314Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio314Amena {
        Pio314Amena::from_bits(val)
    }
}
impl From<Pio314Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio314Amena) -> u8 {
        Pio314Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio314Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio314Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio314Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio314Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio314Fsel {
        Pio314Fsel::from_bits(val)
    }
}
impl From<Pio314Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio314Fsel) -> u8 {
        Pio314Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio314Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio314Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio314Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio314Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio314Fulldrive {
        Pio314Fulldrive::from_bits(val)
    }
}
impl From<Pio314Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio314Fulldrive) -> u8 {
        Pio314Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio314Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio314Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio314Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio314Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio314Ibena {
        Pio314Ibena::from_bits(val)
    }
}
impl From<Pio314Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio314Ibena) -> u8 {
        Pio314Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio314Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio314Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio314Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio314Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio314Iiena {
        Pio314Iiena::from_bits(val)
    }
}
impl From<Pio314Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio314Iiena) -> u8 {
        Pio314Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio314Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio314Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio314Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio314Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio314Odena {
        Pio314Odena::from_bits(val)
    }
}
impl From<Pio314Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio314Odena) -> u8 {
        Pio314Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio314Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio314Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio314Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio314Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio314Pupdena {
        Pio314Pupdena::from_bits(val)
    }
}
impl From<Pio314Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio314Pupdena) -> u8 {
        Pio314Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio314Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio314Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio314Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio314Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio314Pupdsel {
        Pio314Pupdsel::from_bits(val)
    }
}
impl From<Pio314Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio314Pupdsel) -> u8 {
        Pio314Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio314Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio314Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio314Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio314Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio314Slewrate {
        Pio314Slewrate::from_bits(val)
    }
}
impl From<Pio314Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio314Slewrate) -> u8 {
        Pio314Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio315Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio315Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio315Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio315Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio315Amena {
        Pio315Amena::from_bits(val)
    }
}
impl From<Pio315Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio315Amena) -> u8 {
        Pio315Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio315Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio315Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio315Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio315Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio315Fsel {
        Pio315Fsel::from_bits(val)
    }
}
impl From<Pio315Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio315Fsel) -> u8 {
        Pio315Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio315Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio315Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio315Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio315Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio315Fulldrive {
        Pio315Fulldrive::from_bits(val)
    }
}
impl From<Pio315Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio315Fulldrive) -> u8 {
        Pio315Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio315Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio315Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio315Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio315Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio315Ibena {
        Pio315Ibena::from_bits(val)
    }
}
impl From<Pio315Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio315Ibena) -> u8 {
        Pio315Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio315Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio315Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio315Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio315Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio315Iiena {
        Pio315Iiena::from_bits(val)
    }
}
impl From<Pio315Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio315Iiena) -> u8 {
        Pio315Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio315Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio315Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio315Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio315Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio315Odena {
        Pio315Odena::from_bits(val)
    }
}
impl From<Pio315Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio315Odena) -> u8 {
        Pio315Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio315Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio315Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio315Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio315Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio315Pupdena {
        Pio315Pupdena::from_bits(val)
    }
}
impl From<Pio315Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio315Pupdena) -> u8 {
        Pio315Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio315Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio315Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio315Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio315Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio315Pupdsel {
        Pio315Pupdsel::from_bits(val)
    }
}
impl From<Pio315Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio315Pupdsel) -> u8 {
        Pio315Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio315Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio315Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio315Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio315Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio315Slewrate {
        Pio315Slewrate::from_bits(val)
    }
}
impl From<Pio315Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio315Slewrate) -> u8 {
        Pio315Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio316Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio316Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio316Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio316Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio316Amena {
        Pio316Amena::from_bits(val)
    }
}
impl From<Pio316Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio316Amena) -> u8 {
        Pio316Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio316Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio316Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio316Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio316Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio316Fsel {
        Pio316Fsel::from_bits(val)
    }
}
impl From<Pio316Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio316Fsel) -> u8 {
        Pio316Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio316Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio316Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio316Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio316Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio316Fulldrive {
        Pio316Fulldrive::from_bits(val)
    }
}
impl From<Pio316Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio316Fulldrive) -> u8 {
        Pio316Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio316Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio316Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio316Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio316Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio316Ibena {
        Pio316Ibena::from_bits(val)
    }
}
impl From<Pio316Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio316Ibena) -> u8 {
        Pio316Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio316Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio316Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio316Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio316Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio316Iiena {
        Pio316Iiena::from_bits(val)
    }
}
impl From<Pio316Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio316Iiena) -> u8 {
        Pio316Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio316Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio316Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio316Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio316Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio316Odena {
        Pio316Odena::from_bits(val)
    }
}
impl From<Pio316Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio316Odena) -> u8 {
        Pio316Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio316Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio316Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio316Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio316Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio316Pupdena {
        Pio316Pupdena::from_bits(val)
    }
}
impl From<Pio316Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio316Pupdena) -> u8 {
        Pio316Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio316Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio316Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio316Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio316Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio316Pupdsel {
        Pio316Pupdsel::from_bits(val)
    }
}
impl From<Pio316Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio316Pupdsel) -> u8 {
        Pio316Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio316Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio316Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio316Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio316Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio316Slewrate {
        Pio316Slewrate::from_bits(val)
    }
}
impl From<Pio316Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio316Slewrate) -> u8 {
        Pio316Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio317Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio317Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio317Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio317Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio317Amena {
        Pio317Amena::from_bits(val)
    }
}
impl From<Pio317Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio317Amena) -> u8 {
        Pio317Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio317Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio317Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio317Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio317Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio317Fsel {
        Pio317Fsel::from_bits(val)
    }
}
impl From<Pio317Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio317Fsel) -> u8 {
        Pio317Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio317Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio317Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio317Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio317Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio317Fulldrive {
        Pio317Fulldrive::from_bits(val)
    }
}
impl From<Pio317Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio317Fulldrive) -> u8 {
        Pio317Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio317Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio317Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio317Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio317Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio317Ibena {
        Pio317Ibena::from_bits(val)
    }
}
impl From<Pio317Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio317Ibena) -> u8 {
        Pio317Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio317Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio317Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio317Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio317Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio317Iiena {
        Pio317Iiena::from_bits(val)
    }
}
impl From<Pio317Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio317Iiena) -> u8 {
        Pio317Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio317Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio317Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio317Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio317Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio317Odena {
        Pio317Odena::from_bits(val)
    }
}
impl From<Pio317Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio317Odena) -> u8 {
        Pio317Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio317Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio317Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio317Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio317Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio317Pupdena {
        Pio317Pupdena::from_bits(val)
    }
}
impl From<Pio317Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio317Pupdena) -> u8 {
        Pio317Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio317Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio317Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio317Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio317Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio317Pupdsel {
        Pio317Pupdsel::from_bits(val)
    }
}
impl From<Pio317Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio317Pupdsel) -> u8 {
        Pio317Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio317Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio317Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio317Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio317Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio317Slewrate {
        Pio317Slewrate::from_bits(val)
    }
}
impl From<Pio317Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio317Slewrate) -> u8 {
        Pio317Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio318Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio318Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio318Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio318Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio318Amena {
        Pio318Amena::from_bits(val)
    }
}
impl From<Pio318Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio318Amena) -> u8 {
        Pio318Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio318Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio318Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio318Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio318Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio318Fsel {
        Pio318Fsel::from_bits(val)
    }
}
impl From<Pio318Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio318Fsel) -> u8 {
        Pio318Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio318Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio318Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio318Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio318Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio318Fulldrive {
        Pio318Fulldrive::from_bits(val)
    }
}
impl From<Pio318Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio318Fulldrive) -> u8 {
        Pio318Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio318Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio318Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio318Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio318Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio318Ibena {
        Pio318Ibena::from_bits(val)
    }
}
impl From<Pio318Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio318Ibena) -> u8 {
        Pio318Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio318Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio318Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio318Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio318Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio318Iiena {
        Pio318Iiena::from_bits(val)
    }
}
impl From<Pio318Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio318Iiena) -> u8 {
        Pio318Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio318Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio318Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio318Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio318Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio318Odena {
        Pio318Odena::from_bits(val)
    }
}
impl From<Pio318Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio318Odena) -> u8 {
        Pio318Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio318Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio318Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio318Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio318Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio318Pupdena {
        Pio318Pupdena::from_bits(val)
    }
}
impl From<Pio318Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio318Pupdena) -> u8 {
        Pio318Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio318Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio318Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio318Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio318Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio318Pupdsel {
        Pio318Pupdsel::from_bits(val)
    }
}
impl From<Pio318Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio318Pupdsel) -> u8 {
        Pio318Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio318Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio318Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio318Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio318Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio318Slewrate {
        Pio318Slewrate::from_bits(val)
    }
}
impl From<Pio318Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio318Slewrate) -> u8 {
        Pio318Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio319Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio319Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio319Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio319Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio319Amena {
        Pio319Amena::from_bits(val)
    }
}
impl From<Pio319Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio319Amena) -> u8 {
        Pio319Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio319Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio319Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio319Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio319Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio319Fsel {
        Pio319Fsel::from_bits(val)
    }
}
impl From<Pio319Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio319Fsel) -> u8 {
        Pio319Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio319Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio319Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio319Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio319Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio319Fulldrive {
        Pio319Fulldrive::from_bits(val)
    }
}
impl From<Pio319Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio319Fulldrive) -> u8 {
        Pio319Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio319Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio319Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio319Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio319Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio319Ibena {
        Pio319Ibena::from_bits(val)
    }
}
impl From<Pio319Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio319Ibena) -> u8 {
        Pio319Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio319Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio319Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio319Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio319Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio319Iiena {
        Pio319Iiena::from_bits(val)
    }
}
impl From<Pio319Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio319Iiena) -> u8 {
        Pio319Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio319Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio319Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio319Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio319Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio319Odena {
        Pio319Odena::from_bits(val)
    }
}
impl From<Pio319Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio319Odena) -> u8 {
        Pio319Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio319Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio319Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio319Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio319Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio319Pupdena {
        Pio319Pupdena::from_bits(val)
    }
}
impl From<Pio319Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio319Pupdena) -> u8 {
        Pio319Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio319Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio319Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio319Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio319Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio319Pupdsel {
        Pio319Pupdsel::from_bits(val)
    }
}
impl From<Pio319Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio319Pupdsel) -> u8 {
        Pio319Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio319Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio319Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio319Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio319Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio319Slewrate {
        Pio319Slewrate::from_bits(val)
    }
}
impl From<Pio319Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio319Slewrate) -> u8 {
        Pio319Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio31Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio31Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio31Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio31Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio31Amena {
        Pio31Amena::from_bits(val)
    }
}
impl From<Pio31Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio31Amena) -> u8 {
        Pio31Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio31Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio31Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio31Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio31Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio31Fsel {
        Pio31Fsel::from_bits(val)
    }
}
impl From<Pio31Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio31Fsel) -> u8 {
        Pio31Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio31Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio31Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio31Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio31Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio31Fulldrive {
        Pio31Fulldrive::from_bits(val)
    }
}
impl From<Pio31Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio31Fulldrive) -> u8 {
        Pio31Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio31Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio31Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio31Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio31Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio31Ibena {
        Pio31Ibena::from_bits(val)
    }
}
impl From<Pio31Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio31Ibena) -> u8 {
        Pio31Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio31Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio31Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio31Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio31Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio31Iiena {
        Pio31Iiena::from_bits(val)
    }
}
impl From<Pio31Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio31Iiena) -> u8 {
        Pio31Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio31Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio31Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio31Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio31Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio31Odena {
        Pio31Odena::from_bits(val)
    }
}
impl From<Pio31Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio31Odena) -> u8 {
        Pio31Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio31Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio31Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio31Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio31Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio31Pupdena {
        Pio31Pupdena::from_bits(val)
    }
}
impl From<Pio31Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio31Pupdena) -> u8 {
        Pio31Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio31Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio31Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio31Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio31Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio31Pupdsel {
        Pio31Pupdsel::from_bits(val)
    }
}
impl From<Pio31Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio31Pupdsel) -> u8 {
        Pio31Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio31Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio31Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio31Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio31Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio31Slewrate {
        Pio31Slewrate::from_bits(val)
    }
}
impl From<Pio31Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio31Slewrate) -> u8 {
        Pio31Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio320Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio320Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio320Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio320Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio320Amena {
        Pio320Amena::from_bits(val)
    }
}
impl From<Pio320Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio320Amena) -> u8 {
        Pio320Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio320Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio320Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio320Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio320Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio320Fsel {
        Pio320Fsel::from_bits(val)
    }
}
impl From<Pio320Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio320Fsel) -> u8 {
        Pio320Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio320Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio320Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio320Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio320Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio320Fulldrive {
        Pio320Fulldrive::from_bits(val)
    }
}
impl From<Pio320Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio320Fulldrive) -> u8 {
        Pio320Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio320Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio320Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio320Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio320Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio320Ibena {
        Pio320Ibena::from_bits(val)
    }
}
impl From<Pio320Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio320Ibena) -> u8 {
        Pio320Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio320Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio320Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio320Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio320Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio320Iiena {
        Pio320Iiena::from_bits(val)
    }
}
impl From<Pio320Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio320Iiena) -> u8 {
        Pio320Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio320Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio320Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio320Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio320Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio320Odena {
        Pio320Odena::from_bits(val)
    }
}
impl From<Pio320Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio320Odena) -> u8 {
        Pio320Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio320Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio320Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio320Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio320Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio320Pupdena {
        Pio320Pupdena::from_bits(val)
    }
}
impl From<Pio320Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio320Pupdena) -> u8 {
        Pio320Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio320Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio320Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio320Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio320Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio320Pupdsel {
        Pio320Pupdsel::from_bits(val)
    }
}
impl From<Pio320Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio320Pupdsel) -> u8 {
        Pio320Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio320Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio320Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio320Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio320Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio320Slewrate {
        Pio320Slewrate::from_bits(val)
    }
}
impl From<Pio320Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio320Slewrate) -> u8 {
        Pio320Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio321Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio321Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio321Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio321Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio321Amena {
        Pio321Amena::from_bits(val)
    }
}
impl From<Pio321Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio321Amena) -> u8 {
        Pio321Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio321Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio321Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio321Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio321Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio321Fsel {
        Pio321Fsel::from_bits(val)
    }
}
impl From<Pio321Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio321Fsel) -> u8 {
        Pio321Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio321Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio321Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio321Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio321Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio321Fulldrive {
        Pio321Fulldrive::from_bits(val)
    }
}
impl From<Pio321Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio321Fulldrive) -> u8 {
        Pio321Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio321Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio321Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio321Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio321Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio321Ibena {
        Pio321Ibena::from_bits(val)
    }
}
impl From<Pio321Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio321Ibena) -> u8 {
        Pio321Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio321Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio321Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio321Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio321Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio321Iiena {
        Pio321Iiena::from_bits(val)
    }
}
impl From<Pio321Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio321Iiena) -> u8 {
        Pio321Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio321Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio321Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio321Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio321Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio321Odena {
        Pio321Odena::from_bits(val)
    }
}
impl From<Pio321Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio321Odena) -> u8 {
        Pio321Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio321Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio321Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio321Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio321Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio321Pupdena {
        Pio321Pupdena::from_bits(val)
    }
}
impl From<Pio321Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio321Pupdena) -> u8 {
        Pio321Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio321Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio321Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio321Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio321Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio321Pupdsel {
        Pio321Pupdsel::from_bits(val)
    }
}
impl From<Pio321Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio321Pupdsel) -> u8 {
        Pio321Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio321Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio321Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio321Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio321Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio321Slewrate {
        Pio321Slewrate::from_bits(val)
    }
}
impl From<Pio321Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio321Slewrate) -> u8 {
        Pio321Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio322Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio322Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio322Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio322Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio322Amena {
        Pio322Amena::from_bits(val)
    }
}
impl From<Pio322Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio322Amena) -> u8 {
        Pio322Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio322Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio322Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio322Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio322Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio322Fsel {
        Pio322Fsel::from_bits(val)
    }
}
impl From<Pio322Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio322Fsel) -> u8 {
        Pio322Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio322Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio322Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio322Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio322Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio322Fulldrive {
        Pio322Fulldrive::from_bits(val)
    }
}
impl From<Pio322Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio322Fulldrive) -> u8 {
        Pio322Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio322Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio322Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio322Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio322Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio322Ibena {
        Pio322Ibena::from_bits(val)
    }
}
impl From<Pio322Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio322Ibena) -> u8 {
        Pio322Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio322Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio322Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio322Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio322Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio322Iiena {
        Pio322Iiena::from_bits(val)
    }
}
impl From<Pio322Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio322Iiena) -> u8 {
        Pio322Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio322Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio322Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio322Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio322Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio322Odena {
        Pio322Odena::from_bits(val)
    }
}
impl From<Pio322Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio322Odena) -> u8 {
        Pio322Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio322Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio322Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio322Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio322Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio322Pupdena {
        Pio322Pupdena::from_bits(val)
    }
}
impl From<Pio322Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio322Pupdena) -> u8 {
        Pio322Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio322Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio322Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio322Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio322Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio322Pupdsel {
        Pio322Pupdsel::from_bits(val)
    }
}
impl From<Pio322Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio322Pupdsel) -> u8 {
        Pio322Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio322Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio322Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio322Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio322Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio322Slewrate {
        Pio322Slewrate::from_bits(val)
    }
}
impl From<Pio322Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio322Slewrate) -> u8 {
        Pio322Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio323Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio323Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio323Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio323Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio323Amena {
        Pio323Amena::from_bits(val)
    }
}
impl From<Pio323Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio323Amena) -> u8 {
        Pio323Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio323Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio323Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio323Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio323Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio323Fsel {
        Pio323Fsel::from_bits(val)
    }
}
impl From<Pio323Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio323Fsel) -> u8 {
        Pio323Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio323Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio323Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio323Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio323Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio323Fulldrive {
        Pio323Fulldrive::from_bits(val)
    }
}
impl From<Pio323Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio323Fulldrive) -> u8 {
        Pio323Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio323Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio323Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio323Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio323Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio323Ibena {
        Pio323Ibena::from_bits(val)
    }
}
impl From<Pio323Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio323Ibena) -> u8 {
        Pio323Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio323Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio323Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio323Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio323Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio323Iiena {
        Pio323Iiena::from_bits(val)
    }
}
impl From<Pio323Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio323Iiena) -> u8 {
        Pio323Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio323Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio323Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio323Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio323Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio323Odena {
        Pio323Odena::from_bits(val)
    }
}
impl From<Pio323Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio323Odena) -> u8 {
        Pio323Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio323Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio323Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio323Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio323Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio323Pupdena {
        Pio323Pupdena::from_bits(val)
    }
}
impl From<Pio323Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio323Pupdena) -> u8 {
        Pio323Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio323Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio323Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio323Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio323Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio323Pupdsel {
        Pio323Pupdsel::from_bits(val)
    }
}
impl From<Pio323Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio323Pupdsel) -> u8 {
        Pio323Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio323Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio323Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio323Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio323Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio323Slewrate {
        Pio323Slewrate::from_bits(val)
    }
}
impl From<Pio323Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio323Slewrate) -> u8 {
        Pio323Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio324Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio324Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio324Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio324Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio324Amena {
        Pio324Amena::from_bits(val)
    }
}
impl From<Pio324Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio324Amena) -> u8 {
        Pio324Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio324Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio324Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio324Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio324Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio324Fsel {
        Pio324Fsel::from_bits(val)
    }
}
impl From<Pio324Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio324Fsel) -> u8 {
        Pio324Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio324Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio324Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio324Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio324Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio324Fulldrive {
        Pio324Fulldrive::from_bits(val)
    }
}
impl From<Pio324Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio324Fulldrive) -> u8 {
        Pio324Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio324Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio324Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio324Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio324Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio324Ibena {
        Pio324Ibena::from_bits(val)
    }
}
impl From<Pio324Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio324Ibena) -> u8 {
        Pio324Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio324Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio324Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio324Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio324Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio324Iiena {
        Pio324Iiena::from_bits(val)
    }
}
impl From<Pio324Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio324Iiena) -> u8 {
        Pio324Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio324Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio324Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio324Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio324Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio324Odena {
        Pio324Odena::from_bits(val)
    }
}
impl From<Pio324Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio324Odena) -> u8 {
        Pio324Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio324Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio324Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio324Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio324Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio324Pupdena {
        Pio324Pupdena::from_bits(val)
    }
}
impl From<Pio324Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio324Pupdena) -> u8 {
        Pio324Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio324Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio324Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio324Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio324Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio324Pupdsel {
        Pio324Pupdsel::from_bits(val)
    }
}
impl From<Pio324Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio324Pupdsel) -> u8 {
        Pio324Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio324Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio324Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio324Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio324Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio324Slewrate {
        Pio324Slewrate::from_bits(val)
    }
}
impl From<Pio324Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio324Slewrate) -> u8 {
        Pio324Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio325Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio325Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio325Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio325Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio325Amena {
        Pio325Amena::from_bits(val)
    }
}
impl From<Pio325Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio325Amena) -> u8 {
        Pio325Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio325Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio325Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio325Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio325Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio325Fsel {
        Pio325Fsel::from_bits(val)
    }
}
impl From<Pio325Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio325Fsel) -> u8 {
        Pio325Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio325Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio325Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio325Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio325Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio325Fulldrive {
        Pio325Fulldrive::from_bits(val)
    }
}
impl From<Pio325Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio325Fulldrive) -> u8 {
        Pio325Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio325Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio325Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio325Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio325Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio325Ibena {
        Pio325Ibena::from_bits(val)
    }
}
impl From<Pio325Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio325Ibena) -> u8 {
        Pio325Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio325Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio325Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio325Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio325Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio325Iiena {
        Pio325Iiena::from_bits(val)
    }
}
impl From<Pio325Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio325Iiena) -> u8 {
        Pio325Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio325Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio325Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio325Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio325Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio325Odena {
        Pio325Odena::from_bits(val)
    }
}
impl From<Pio325Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio325Odena) -> u8 {
        Pio325Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio325Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio325Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio325Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio325Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio325Pupdena {
        Pio325Pupdena::from_bits(val)
    }
}
impl From<Pio325Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio325Pupdena) -> u8 {
        Pio325Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio325Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio325Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio325Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio325Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio325Pupdsel {
        Pio325Pupdsel::from_bits(val)
    }
}
impl From<Pio325Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio325Pupdsel) -> u8 {
        Pio325Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio325Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio325Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio325Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio325Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio325Slewrate {
        Pio325Slewrate::from_bits(val)
    }
}
impl From<Pio325Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio325Slewrate) -> u8 {
        Pio325Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio326Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio326Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio326Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio326Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio326Amena {
        Pio326Amena::from_bits(val)
    }
}
impl From<Pio326Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio326Amena) -> u8 {
        Pio326Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio326Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio326Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio326Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio326Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio326Fsel {
        Pio326Fsel::from_bits(val)
    }
}
impl From<Pio326Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio326Fsel) -> u8 {
        Pio326Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio326Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio326Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio326Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio326Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio326Fulldrive {
        Pio326Fulldrive::from_bits(val)
    }
}
impl From<Pio326Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio326Fulldrive) -> u8 {
        Pio326Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio326Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio326Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio326Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio326Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio326Ibena {
        Pio326Ibena::from_bits(val)
    }
}
impl From<Pio326Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio326Ibena) -> u8 {
        Pio326Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio326Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio326Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio326Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio326Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio326Iiena {
        Pio326Iiena::from_bits(val)
    }
}
impl From<Pio326Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio326Iiena) -> u8 {
        Pio326Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio326Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio326Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio326Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio326Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio326Odena {
        Pio326Odena::from_bits(val)
    }
}
impl From<Pio326Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio326Odena) -> u8 {
        Pio326Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio326Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio326Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio326Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio326Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio326Pupdena {
        Pio326Pupdena::from_bits(val)
    }
}
impl From<Pio326Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio326Pupdena) -> u8 {
        Pio326Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio326Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio326Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio326Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio326Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio326Pupdsel {
        Pio326Pupdsel::from_bits(val)
    }
}
impl From<Pio326Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio326Pupdsel) -> u8 {
        Pio326Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio326Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio326Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio326Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio326Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio326Slewrate {
        Pio326Slewrate::from_bits(val)
    }
}
impl From<Pio326Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio326Slewrate) -> u8 {
        Pio326Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio327Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio327Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio327Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio327Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio327Amena {
        Pio327Amena::from_bits(val)
    }
}
impl From<Pio327Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio327Amena) -> u8 {
        Pio327Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio327Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio327Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio327Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio327Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio327Fsel {
        Pio327Fsel::from_bits(val)
    }
}
impl From<Pio327Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio327Fsel) -> u8 {
        Pio327Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio327Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio327Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio327Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio327Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio327Fulldrive {
        Pio327Fulldrive::from_bits(val)
    }
}
impl From<Pio327Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio327Fulldrive) -> u8 {
        Pio327Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio327Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio327Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio327Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio327Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio327Ibena {
        Pio327Ibena::from_bits(val)
    }
}
impl From<Pio327Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio327Ibena) -> u8 {
        Pio327Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio327Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio327Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio327Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio327Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio327Iiena {
        Pio327Iiena::from_bits(val)
    }
}
impl From<Pio327Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio327Iiena) -> u8 {
        Pio327Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio327Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio327Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio327Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio327Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio327Odena {
        Pio327Odena::from_bits(val)
    }
}
impl From<Pio327Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio327Odena) -> u8 {
        Pio327Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio327Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio327Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio327Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio327Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio327Pupdena {
        Pio327Pupdena::from_bits(val)
    }
}
impl From<Pio327Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio327Pupdena) -> u8 {
        Pio327Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio327Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio327Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio327Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio327Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio327Pupdsel {
        Pio327Pupdsel::from_bits(val)
    }
}
impl From<Pio327Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio327Pupdsel) -> u8 {
        Pio327Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio327Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio327Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio327Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio327Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio327Slewrate {
        Pio327Slewrate::from_bits(val)
    }
}
impl From<Pio327Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio327Slewrate) -> u8 {
        Pio327Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio328Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio328Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio328Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio328Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio328Amena {
        Pio328Amena::from_bits(val)
    }
}
impl From<Pio328Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio328Amena) -> u8 {
        Pio328Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio328Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio328Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio328Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio328Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio328Fsel {
        Pio328Fsel::from_bits(val)
    }
}
impl From<Pio328Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio328Fsel) -> u8 {
        Pio328Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio328Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio328Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio328Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio328Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio328Fulldrive {
        Pio328Fulldrive::from_bits(val)
    }
}
impl From<Pio328Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio328Fulldrive) -> u8 {
        Pio328Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio328Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio328Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio328Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio328Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio328Ibena {
        Pio328Ibena::from_bits(val)
    }
}
impl From<Pio328Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio328Ibena) -> u8 {
        Pio328Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio328Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio328Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio328Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio328Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio328Iiena {
        Pio328Iiena::from_bits(val)
    }
}
impl From<Pio328Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio328Iiena) -> u8 {
        Pio328Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio328Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio328Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio328Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio328Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio328Odena {
        Pio328Odena::from_bits(val)
    }
}
impl From<Pio328Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio328Odena) -> u8 {
        Pio328Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio328Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio328Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio328Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio328Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio328Pupdena {
        Pio328Pupdena::from_bits(val)
    }
}
impl From<Pio328Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio328Pupdena) -> u8 {
        Pio328Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio328Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio328Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio328Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio328Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio328Pupdsel {
        Pio328Pupdsel::from_bits(val)
    }
}
impl From<Pio328Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio328Pupdsel) -> u8 {
        Pio328Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio328Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio328Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio328Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio328Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio328Slewrate {
        Pio328Slewrate::from_bits(val)
    }
}
impl From<Pio328Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio328Slewrate) -> u8 {
        Pio328Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio329Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio329Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio329Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio329Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio329Amena {
        Pio329Amena::from_bits(val)
    }
}
impl From<Pio329Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio329Amena) -> u8 {
        Pio329Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio329Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio329Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio329Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio329Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio329Fsel {
        Pio329Fsel::from_bits(val)
    }
}
impl From<Pio329Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio329Fsel) -> u8 {
        Pio329Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio329Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio329Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio329Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio329Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio329Fulldrive {
        Pio329Fulldrive::from_bits(val)
    }
}
impl From<Pio329Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio329Fulldrive) -> u8 {
        Pio329Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio329Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio329Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio329Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio329Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio329Ibena {
        Pio329Ibena::from_bits(val)
    }
}
impl From<Pio329Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio329Ibena) -> u8 {
        Pio329Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio329Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio329Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio329Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio329Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio329Iiena {
        Pio329Iiena::from_bits(val)
    }
}
impl From<Pio329Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio329Iiena) -> u8 {
        Pio329Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio329Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio329Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio329Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio329Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio329Odena {
        Pio329Odena::from_bits(val)
    }
}
impl From<Pio329Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio329Odena) -> u8 {
        Pio329Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio329Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio329Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio329Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio329Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio329Pupdena {
        Pio329Pupdena::from_bits(val)
    }
}
impl From<Pio329Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio329Pupdena) -> u8 {
        Pio329Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio329Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio329Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio329Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio329Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio329Pupdsel {
        Pio329Pupdsel::from_bits(val)
    }
}
impl From<Pio329Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio329Pupdsel) -> u8 {
        Pio329Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio329Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio329Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio329Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio329Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio329Slewrate {
        Pio329Slewrate::from_bits(val)
    }
}
impl From<Pio329Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio329Slewrate) -> u8 {
        Pio329Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio32Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio32Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio32Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio32Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio32Amena {
        Pio32Amena::from_bits(val)
    }
}
impl From<Pio32Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio32Amena) -> u8 {
        Pio32Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio32Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio32Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio32Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio32Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio32Fsel {
        Pio32Fsel::from_bits(val)
    }
}
impl From<Pio32Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio32Fsel) -> u8 {
        Pio32Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio32Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio32Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio32Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio32Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio32Fulldrive {
        Pio32Fulldrive::from_bits(val)
    }
}
impl From<Pio32Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio32Fulldrive) -> u8 {
        Pio32Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio32Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio32Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio32Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio32Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio32Ibena {
        Pio32Ibena::from_bits(val)
    }
}
impl From<Pio32Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio32Ibena) -> u8 {
        Pio32Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio32Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio32Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio32Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio32Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio32Iiena {
        Pio32Iiena::from_bits(val)
    }
}
impl From<Pio32Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio32Iiena) -> u8 {
        Pio32Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio32Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio32Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio32Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio32Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio32Odena {
        Pio32Odena::from_bits(val)
    }
}
impl From<Pio32Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio32Odena) -> u8 {
        Pio32Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio32Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio32Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio32Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio32Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio32Pupdena {
        Pio32Pupdena::from_bits(val)
    }
}
impl From<Pio32Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio32Pupdena) -> u8 {
        Pio32Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio32Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio32Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio32Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio32Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio32Pupdsel {
        Pio32Pupdsel::from_bits(val)
    }
}
impl From<Pio32Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio32Pupdsel) -> u8 {
        Pio32Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio32Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio32Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio32Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio32Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio32Slewrate {
        Pio32Slewrate::from_bits(val)
    }
}
impl From<Pio32Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio32Slewrate) -> u8 {
        Pio32Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio330Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio330Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio330Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio330Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio330Amena {
        Pio330Amena::from_bits(val)
    }
}
impl From<Pio330Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio330Amena) -> u8 {
        Pio330Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio330Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio330Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio330Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio330Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio330Fsel {
        Pio330Fsel::from_bits(val)
    }
}
impl From<Pio330Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio330Fsel) -> u8 {
        Pio330Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio330Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio330Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio330Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio330Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio330Fulldrive {
        Pio330Fulldrive::from_bits(val)
    }
}
impl From<Pio330Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio330Fulldrive) -> u8 {
        Pio330Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio330Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio330Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio330Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio330Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio330Ibena {
        Pio330Ibena::from_bits(val)
    }
}
impl From<Pio330Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio330Ibena) -> u8 {
        Pio330Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio330Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio330Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio330Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio330Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio330Iiena {
        Pio330Iiena::from_bits(val)
    }
}
impl From<Pio330Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio330Iiena) -> u8 {
        Pio330Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio330Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio330Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio330Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio330Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio330Odena {
        Pio330Odena::from_bits(val)
    }
}
impl From<Pio330Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio330Odena) -> u8 {
        Pio330Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio330Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio330Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio330Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio330Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio330Pupdena {
        Pio330Pupdena::from_bits(val)
    }
}
impl From<Pio330Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio330Pupdena) -> u8 {
        Pio330Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio330Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio330Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio330Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio330Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio330Pupdsel {
        Pio330Pupdsel::from_bits(val)
    }
}
impl From<Pio330Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio330Pupdsel) -> u8 {
        Pio330Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio330Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio330Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio330Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio330Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio330Slewrate {
        Pio330Slewrate::from_bits(val)
    }
}
impl From<Pio330Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio330Slewrate) -> u8 {
        Pio330Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio331Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio331Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio331Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio331Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio331Amena {
        Pio331Amena::from_bits(val)
    }
}
impl From<Pio331Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio331Amena) -> u8 {
        Pio331Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio331Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio331Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio331Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio331Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio331Fsel {
        Pio331Fsel::from_bits(val)
    }
}
impl From<Pio331Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio331Fsel) -> u8 {
        Pio331Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio331Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio331Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio331Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio331Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio331Fulldrive {
        Pio331Fulldrive::from_bits(val)
    }
}
impl From<Pio331Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio331Fulldrive) -> u8 {
        Pio331Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio331Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio331Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio331Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio331Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio331Ibena {
        Pio331Ibena::from_bits(val)
    }
}
impl From<Pio331Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio331Ibena) -> u8 {
        Pio331Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio331Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio331Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio331Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio331Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio331Iiena {
        Pio331Iiena::from_bits(val)
    }
}
impl From<Pio331Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio331Iiena) -> u8 {
        Pio331Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio331Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio331Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio331Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio331Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio331Odena {
        Pio331Odena::from_bits(val)
    }
}
impl From<Pio331Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio331Odena) -> u8 {
        Pio331Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio331Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio331Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio331Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio331Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio331Pupdena {
        Pio331Pupdena::from_bits(val)
    }
}
impl From<Pio331Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio331Pupdena) -> u8 {
        Pio331Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio331Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio331Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio331Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio331Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio331Pupdsel {
        Pio331Pupdsel::from_bits(val)
    }
}
impl From<Pio331Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio331Pupdsel) -> u8 {
        Pio331Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio331Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio331Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio331Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio331Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio331Slewrate {
        Pio331Slewrate::from_bits(val)
    }
}
impl From<Pio331Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio331Slewrate) -> u8 {
        Pio331Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio33Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio33Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio33Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio33Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio33Amena {
        Pio33Amena::from_bits(val)
    }
}
impl From<Pio33Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio33Amena) -> u8 {
        Pio33Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio33Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio33Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio33Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio33Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio33Fsel {
        Pio33Fsel::from_bits(val)
    }
}
impl From<Pio33Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio33Fsel) -> u8 {
        Pio33Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio33Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio33Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio33Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio33Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio33Fulldrive {
        Pio33Fulldrive::from_bits(val)
    }
}
impl From<Pio33Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio33Fulldrive) -> u8 {
        Pio33Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio33Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio33Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio33Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio33Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio33Ibena {
        Pio33Ibena::from_bits(val)
    }
}
impl From<Pio33Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio33Ibena) -> u8 {
        Pio33Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio33Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio33Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio33Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio33Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio33Iiena {
        Pio33Iiena::from_bits(val)
    }
}
impl From<Pio33Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio33Iiena) -> u8 {
        Pio33Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio33Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio33Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio33Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio33Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio33Odena {
        Pio33Odena::from_bits(val)
    }
}
impl From<Pio33Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio33Odena) -> u8 {
        Pio33Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio33Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio33Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio33Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio33Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio33Pupdena {
        Pio33Pupdena::from_bits(val)
    }
}
impl From<Pio33Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio33Pupdena) -> u8 {
        Pio33Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio33Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio33Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio33Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio33Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio33Pupdsel {
        Pio33Pupdsel::from_bits(val)
    }
}
impl From<Pio33Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio33Pupdsel) -> u8 {
        Pio33Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio33Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio33Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio33Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio33Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio33Slewrate {
        Pio33Slewrate::from_bits(val)
    }
}
impl From<Pio33Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio33Slewrate) -> u8 {
        Pio33Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio34Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio34Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio34Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio34Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio34Amena {
        Pio34Amena::from_bits(val)
    }
}
impl From<Pio34Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio34Amena) -> u8 {
        Pio34Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio34Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio34Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio34Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio34Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio34Fsel {
        Pio34Fsel::from_bits(val)
    }
}
impl From<Pio34Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio34Fsel) -> u8 {
        Pio34Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio34Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio34Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio34Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio34Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio34Fulldrive {
        Pio34Fulldrive::from_bits(val)
    }
}
impl From<Pio34Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio34Fulldrive) -> u8 {
        Pio34Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio34Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio34Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio34Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio34Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio34Ibena {
        Pio34Ibena::from_bits(val)
    }
}
impl From<Pio34Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio34Ibena) -> u8 {
        Pio34Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio34Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio34Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio34Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio34Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio34Iiena {
        Pio34Iiena::from_bits(val)
    }
}
impl From<Pio34Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio34Iiena) -> u8 {
        Pio34Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio34Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio34Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio34Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio34Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio34Odena {
        Pio34Odena::from_bits(val)
    }
}
impl From<Pio34Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio34Odena) -> u8 {
        Pio34Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio34Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio34Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio34Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio34Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio34Pupdena {
        Pio34Pupdena::from_bits(val)
    }
}
impl From<Pio34Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio34Pupdena) -> u8 {
        Pio34Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio34Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio34Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio34Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio34Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio34Pupdsel {
        Pio34Pupdsel::from_bits(val)
    }
}
impl From<Pio34Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio34Pupdsel) -> u8 {
        Pio34Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio34Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio34Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio34Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio34Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio34Slewrate {
        Pio34Slewrate::from_bits(val)
    }
}
impl From<Pio34Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio34Slewrate) -> u8 {
        Pio34Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio35Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio35Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio35Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio35Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio35Amena {
        Pio35Amena::from_bits(val)
    }
}
impl From<Pio35Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio35Amena) -> u8 {
        Pio35Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio35Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio35Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio35Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio35Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio35Fsel {
        Pio35Fsel::from_bits(val)
    }
}
impl From<Pio35Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio35Fsel) -> u8 {
        Pio35Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio35Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio35Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio35Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio35Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio35Fulldrive {
        Pio35Fulldrive::from_bits(val)
    }
}
impl From<Pio35Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio35Fulldrive) -> u8 {
        Pio35Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio35Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio35Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio35Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio35Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio35Ibena {
        Pio35Ibena::from_bits(val)
    }
}
impl From<Pio35Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio35Ibena) -> u8 {
        Pio35Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio35Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio35Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio35Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio35Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio35Iiena {
        Pio35Iiena::from_bits(val)
    }
}
impl From<Pio35Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio35Iiena) -> u8 {
        Pio35Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio35Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio35Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio35Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio35Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio35Odena {
        Pio35Odena::from_bits(val)
    }
}
impl From<Pio35Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio35Odena) -> u8 {
        Pio35Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio35Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio35Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio35Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio35Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio35Pupdena {
        Pio35Pupdena::from_bits(val)
    }
}
impl From<Pio35Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio35Pupdena) -> u8 {
        Pio35Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio35Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio35Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio35Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio35Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio35Pupdsel {
        Pio35Pupdsel::from_bits(val)
    }
}
impl From<Pio35Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio35Pupdsel) -> u8 {
        Pio35Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio35Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio35Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio35Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio35Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio35Slewrate {
        Pio35Slewrate::from_bits(val)
    }
}
impl From<Pio35Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio35Slewrate) -> u8 {
        Pio35Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio36Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio36Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio36Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio36Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio36Amena {
        Pio36Amena::from_bits(val)
    }
}
impl From<Pio36Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio36Amena) -> u8 {
        Pio36Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio36Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio36Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio36Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio36Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio36Fsel {
        Pio36Fsel::from_bits(val)
    }
}
impl From<Pio36Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio36Fsel) -> u8 {
        Pio36Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio36Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio36Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio36Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio36Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio36Fulldrive {
        Pio36Fulldrive::from_bits(val)
    }
}
impl From<Pio36Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio36Fulldrive) -> u8 {
        Pio36Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio36Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio36Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio36Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio36Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio36Ibena {
        Pio36Ibena::from_bits(val)
    }
}
impl From<Pio36Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio36Ibena) -> u8 {
        Pio36Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio36Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio36Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio36Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio36Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio36Iiena {
        Pio36Iiena::from_bits(val)
    }
}
impl From<Pio36Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio36Iiena) -> u8 {
        Pio36Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio36Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio36Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio36Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio36Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio36Odena {
        Pio36Odena::from_bits(val)
    }
}
impl From<Pio36Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio36Odena) -> u8 {
        Pio36Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio36Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio36Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio36Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio36Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio36Pupdena {
        Pio36Pupdena::from_bits(val)
    }
}
impl From<Pio36Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio36Pupdena) -> u8 {
        Pio36Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio36Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio36Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio36Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio36Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio36Pupdsel {
        Pio36Pupdsel::from_bits(val)
    }
}
impl From<Pio36Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio36Pupdsel) -> u8 {
        Pio36Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio36Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio36Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio36Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio36Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio36Slewrate {
        Pio36Slewrate::from_bits(val)
    }
}
impl From<Pio36Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio36Slewrate) -> u8 {
        Pio36Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio37Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio37Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio37Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio37Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio37Amena {
        Pio37Amena::from_bits(val)
    }
}
impl From<Pio37Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio37Amena) -> u8 {
        Pio37Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio37Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio37Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio37Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio37Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio37Fsel {
        Pio37Fsel::from_bits(val)
    }
}
impl From<Pio37Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio37Fsel) -> u8 {
        Pio37Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio37Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio37Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio37Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio37Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio37Fulldrive {
        Pio37Fulldrive::from_bits(val)
    }
}
impl From<Pio37Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio37Fulldrive) -> u8 {
        Pio37Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio37Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio37Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio37Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio37Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio37Ibena {
        Pio37Ibena::from_bits(val)
    }
}
impl From<Pio37Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio37Ibena) -> u8 {
        Pio37Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio37Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio37Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio37Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio37Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio37Iiena {
        Pio37Iiena::from_bits(val)
    }
}
impl From<Pio37Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio37Iiena) -> u8 {
        Pio37Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio37Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio37Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio37Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio37Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio37Odena {
        Pio37Odena::from_bits(val)
    }
}
impl From<Pio37Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio37Odena) -> u8 {
        Pio37Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio37Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio37Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio37Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio37Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio37Pupdena {
        Pio37Pupdena::from_bits(val)
    }
}
impl From<Pio37Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio37Pupdena) -> u8 {
        Pio37Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio37Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio37Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio37Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio37Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio37Pupdsel {
        Pio37Pupdsel::from_bits(val)
    }
}
impl From<Pio37Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio37Pupdsel) -> u8 {
        Pio37Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio37Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio37Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio37Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio37Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio37Slewrate {
        Pio37Slewrate::from_bits(val)
    }
}
impl From<Pio37Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio37Slewrate) -> u8 {
        Pio37Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio38Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio38Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio38Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio38Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio38Amena {
        Pio38Amena::from_bits(val)
    }
}
impl From<Pio38Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio38Amena) -> u8 {
        Pio38Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio38Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio38Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio38Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio38Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio38Fsel {
        Pio38Fsel::from_bits(val)
    }
}
impl From<Pio38Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio38Fsel) -> u8 {
        Pio38Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio38Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio38Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio38Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio38Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio38Fulldrive {
        Pio38Fulldrive::from_bits(val)
    }
}
impl From<Pio38Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio38Fulldrive) -> u8 {
        Pio38Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio38Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio38Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio38Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio38Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio38Ibena {
        Pio38Ibena::from_bits(val)
    }
}
impl From<Pio38Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio38Ibena) -> u8 {
        Pio38Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio38Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio38Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio38Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio38Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio38Iiena {
        Pio38Iiena::from_bits(val)
    }
}
impl From<Pio38Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio38Iiena) -> u8 {
        Pio38Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio38Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio38Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio38Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio38Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio38Odena {
        Pio38Odena::from_bits(val)
    }
}
impl From<Pio38Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio38Odena) -> u8 {
        Pio38Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio38Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio38Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio38Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio38Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio38Pupdena {
        Pio38Pupdena::from_bits(val)
    }
}
impl From<Pio38Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio38Pupdena) -> u8 {
        Pio38Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio38Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio38Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio38Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio38Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio38Pupdsel {
        Pio38Pupdsel::from_bits(val)
    }
}
impl From<Pio38Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio38Pupdsel) -> u8 {
        Pio38Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio38Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio38Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio38Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio38Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio38Slewrate {
        Pio38Slewrate::from_bits(val)
    }
}
impl From<Pio38Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio38Slewrate) -> u8 {
        Pio38Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio39Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio39Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio39Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio39Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio39Amena {
        Pio39Amena::from_bits(val)
    }
}
impl From<Pio39Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio39Amena) -> u8 {
        Pio39Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio39Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio39Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio39Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio39Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio39Fsel {
        Pio39Fsel::from_bits(val)
    }
}
impl From<Pio39Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio39Fsel) -> u8 {
        Pio39Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio39Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio39Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio39Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio39Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio39Fulldrive {
        Pio39Fulldrive::from_bits(val)
    }
}
impl From<Pio39Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio39Fulldrive) -> u8 {
        Pio39Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio39Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio39Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio39Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio39Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio39Ibena {
        Pio39Ibena::from_bits(val)
    }
}
impl From<Pio39Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio39Ibena) -> u8 {
        Pio39Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio39Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio39Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio39Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio39Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio39Iiena {
        Pio39Iiena::from_bits(val)
    }
}
impl From<Pio39Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio39Iiena) -> u8 {
        Pio39Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio39Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio39Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio39Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio39Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio39Odena {
        Pio39Odena::from_bits(val)
    }
}
impl From<Pio39Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio39Odena) -> u8 {
        Pio39Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio39Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio39Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio39Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio39Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio39Pupdena {
        Pio39Pupdena::from_bits(val)
    }
}
impl From<Pio39Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio39Pupdena) -> u8 {
        Pio39Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio39Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio39Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio39Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio39Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio39Pupdsel {
        Pio39Pupdsel::from_bits(val)
    }
}
impl From<Pio39Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio39Pupdsel) -> u8 {
        Pio39Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio39Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio39Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio39Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio39Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio39Slewrate {
        Pio39Slewrate::from_bits(val)
    }
}
impl From<Pio39Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio39Slewrate) -> u8 {
        Pio39Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio40Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio40Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio40Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio40Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio40Amena {
        Pio40Amena::from_bits(val)
    }
}
impl From<Pio40Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio40Amena) -> u8 {
        Pio40Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio40Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio40Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio40Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio40Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio40Fsel {
        Pio40Fsel::from_bits(val)
    }
}
impl From<Pio40Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio40Fsel) -> u8 {
        Pio40Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio40Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio40Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio40Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio40Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio40Fulldrive {
        Pio40Fulldrive::from_bits(val)
    }
}
impl From<Pio40Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio40Fulldrive) -> u8 {
        Pio40Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio40Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio40Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio40Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio40Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio40Ibena {
        Pio40Ibena::from_bits(val)
    }
}
impl From<Pio40Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio40Ibena) -> u8 {
        Pio40Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio40Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio40Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio40Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio40Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio40Iiena {
        Pio40Iiena::from_bits(val)
    }
}
impl From<Pio40Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio40Iiena) -> u8 {
        Pio40Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio40Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio40Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio40Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio40Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio40Odena {
        Pio40Odena::from_bits(val)
    }
}
impl From<Pio40Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio40Odena) -> u8 {
        Pio40Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio40Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio40Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio40Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio40Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio40Pupdena {
        Pio40Pupdena::from_bits(val)
    }
}
impl From<Pio40Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio40Pupdena) -> u8 {
        Pio40Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio40Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio40Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio40Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio40Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio40Pupdsel {
        Pio40Pupdsel::from_bits(val)
    }
}
impl From<Pio40Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio40Pupdsel) -> u8 {
        Pio40Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio40Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio40Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio40Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio40Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio40Slewrate {
        Pio40Slewrate::from_bits(val)
    }
}
impl From<Pio40Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio40Slewrate) -> u8 {
        Pio40Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio410Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio410Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio410Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio410Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio410Amena {
        Pio410Amena::from_bits(val)
    }
}
impl From<Pio410Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio410Amena) -> u8 {
        Pio410Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio410Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio410Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio410Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio410Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio410Fsel {
        Pio410Fsel::from_bits(val)
    }
}
impl From<Pio410Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio410Fsel) -> u8 {
        Pio410Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio410Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio410Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio410Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio410Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio410Fulldrive {
        Pio410Fulldrive::from_bits(val)
    }
}
impl From<Pio410Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio410Fulldrive) -> u8 {
        Pio410Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio410Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio410Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio410Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio410Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio410Ibena {
        Pio410Ibena::from_bits(val)
    }
}
impl From<Pio410Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio410Ibena) -> u8 {
        Pio410Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio410Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio410Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio410Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio410Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio410Iiena {
        Pio410Iiena::from_bits(val)
    }
}
impl From<Pio410Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio410Iiena) -> u8 {
        Pio410Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio410Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio410Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio410Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio410Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio410Odena {
        Pio410Odena::from_bits(val)
    }
}
impl From<Pio410Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio410Odena) -> u8 {
        Pio410Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio410Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio410Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio410Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio410Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio410Pupdena {
        Pio410Pupdena::from_bits(val)
    }
}
impl From<Pio410Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio410Pupdena) -> u8 {
        Pio410Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio410Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio410Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio410Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio410Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio410Pupdsel {
        Pio410Pupdsel::from_bits(val)
    }
}
impl From<Pio410Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio410Pupdsel) -> u8 {
        Pio410Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio410Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio410Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio410Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio410Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio410Slewrate {
        Pio410Slewrate::from_bits(val)
    }
}
impl From<Pio410Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio410Slewrate) -> u8 {
        Pio410Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio411Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio411Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio411Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio411Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio411Amena {
        Pio411Amena::from_bits(val)
    }
}
impl From<Pio411Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio411Amena) -> u8 {
        Pio411Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio411Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio411Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio411Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio411Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio411Fsel {
        Pio411Fsel::from_bits(val)
    }
}
impl From<Pio411Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio411Fsel) -> u8 {
        Pio411Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio411Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio411Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio411Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio411Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio411Fulldrive {
        Pio411Fulldrive::from_bits(val)
    }
}
impl From<Pio411Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio411Fulldrive) -> u8 {
        Pio411Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio411Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio411Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio411Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio411Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio411Ibena {
        Pio411Ibena::from_bits(val)
    }
}
impl From<Pio411Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio411Ibena) -> u8 {
        Pio411Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio411Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio411Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio411Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio411Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio411Iiena {
        Pio411Iiena::from_bits(val)
    }
}
impl From<Pio411Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio411Iiena) -> u8 {
        Pio411Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio411Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio411Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio411Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio411Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio411Odena {
        Pio411Odena::from_bits(val)
    }
}
impl From<Pio411Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio411Odena) -> u8 {
        Pio411Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio411Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio411Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio411Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio411Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio411Pupdena {
        Pio411Pupdena::from_bits(val)
    }
}
impl From<Pio411Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio411Pupdena) -> u8 {
        Pio411Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio411Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio411Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio411Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio411Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio411Pupdsel {
        Pio411Pupdsel::from_bits(val)
    }
}
impl From<Pio411Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio411Pupdsel) -> u8 {
        Pio411Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio411Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio411Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio411Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio411Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio411Slewrate {
        Pio411Slewrate::from_bits(val)
    }
}
impl From<Pio411Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio411Slewrate) -> u8 {
        Pio411Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio412Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio412Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio412Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio412Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio412Amena {
        Pio412Amena::from_bits(val)
    }
}
impl From<Pio412Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio412Amena) -> u8 {
        Pio412Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio412Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio412Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio412Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio412Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio412Fsel {
        Pio412Fsel::from_bits(val)
    }
}
impl From<Pio412Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio412Fsel) -> u8 {
        Pio412Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio412Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio412Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio412Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio412Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio412Fulldrive {
        Pio412Fulldrive::from_bits(val)
    }
}
impl From<Pio412Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio412Fulldrive) -> u8 {
        Pio412Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio412Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio412Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio412Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio412Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio412Ibena {
        Pio412Ibena::from_bits(val)
    }
}
impl From<Pio412Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio412Ibena) -> u8 {
        Pio412Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio412Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio412Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio412Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio412Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio412Iiena {
        Pio412Iiena::from_bits(val)
    }
}
impl From<Pio412Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio412Iiena) -> u8 {
        Pio412Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio412Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio412Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio412Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio412Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio412Odena {
        Pio412Odena::from_bits(val)
    }
}
impl From<Pio412Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio412Odena) -> u8 {
        Pio412Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio412Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio412Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio412Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio412Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio412Pupdena {
        Pio412Pupdena::from_bits(val)
    }
}
impl From<Pio412Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio412Pupdena) -> u8 {
        Pio412Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio412Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio412Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio412Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio412Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio412Pupdsel {
        Pio412Pupdsel::from_bits(val)
    }
}
impl From<Pio412Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio412Pupdsel) -> u8 {
        Pio412Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio412Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio412Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio412Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio412Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio412Slewrate {
        Pio412Slewrate::from_bits(val)
    }
}
impl From<Pio412Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio412Slewrate) -> u8 {
        Pio412Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio413Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio413Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio413Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio413Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio413Amena {
        Pio413Amena::from_bits(val)
    }
}
impl From<Pio413Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio413Amena) -> u8 {
        Pio413Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio413Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio413Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio413Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio413Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio413Fsel {
        Pio413Fsel::from_bits(val)
    }
}
impl From<Pio413Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio413Fsel) -> u8 {
        Pio413Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio413Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio413Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio413Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio413Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio413Fulldrive {
        Pio413Fulldrive::from_bits(val)
    }
}
impl From<Pio413Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio413Fulldrive) -> u8 {
        Pio413Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio413Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio413Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio413Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio413Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio413Ibena {
        Pio413Ibena::from_bits(val)
    }
}
impl From<Pio413Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio413Ibena) -> u8 {
        Pio413Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio413Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio413Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio413Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio413Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio413Iiena {
        Pio413Iiena::from_bits(val)
    }
}
impl From<Pio413Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio413Iiena) -> u8 {
        Pio413Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio413Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio413Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio413Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio413Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio413Odena {
        Pio413Odena::from_bits(val)
    }
}
impl From<Pio413Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio413Odena) -> u8 {
        Pio413Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio413Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio413Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio413Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio413Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio413Pupdena {
        Pio413Pupdena::from_bits(val)
    }
}
impl From<Pio413Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio413Pupdena) -> u8 {
        Pio413Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio413Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio413Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio413Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio413Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio413Pupdsel {
        Pio413Pupdsel::from_bits(val)
    }
}
impl From<Pio413Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio413Pupdsel) -> u8 {
        Pio413Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio413Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio413Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio413Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio413Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio413Slewrate {
        Pio413Slewrate::from_bits(val)
    }
}
impl From<Pio413Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio413Slewrate) -> u8 {
        Pio413Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio414Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio414Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio414Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio414Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio414Amena {
        Pio414Amena::from_bits(val)
    }
}
impl From<Pio414Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio414Amena) -> u8 {
        Pio414Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio414Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio414Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio414Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio414Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio414Fsel {
        Pio414Fsel::from_bits(val)
    }
}
impl From<Pio414Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio414Fsel) -> u8 {
        Pio414Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio414Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio414Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio414Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio414Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio414Fulldrive {
        Pio414Fulldrive::from_bits(val)
    }
}
impl From<Pio414Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio414Fulldrive) -> u8 {
        Pio414Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio414Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio414Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio414Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio414Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio414Ibena {
        Pio414Ibena::from_bits(val)
    }
}
impl From<Pio414Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio414Ibena) -> u8 {
        Pio414Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio414Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio414Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio414Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio414Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio414Iiena {
        Pio414Iiena::from_bits(val)
    }
}
impl From<Pio414Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio414Iiena) -> u8 {
        Pio414Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio414Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio414Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio414Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio414Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio414Odena {
        Pio414Odena::from_bits(val)
    }
}
impl From<Pio414Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio414Odena) -> u8 {
        Pio414Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio414Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio414Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio414Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio414Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio414Pupdena {
        Pio414Pupdena::from_bits(val)
    }
}
impl From<Pio414Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio414Pupdena) -> u8 {
        Pio414Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio414Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio414Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio414Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio414Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio414Pupdsel {
        Pio414Pupdsel::from_bits(val)
    }
}
impl From<Pio414Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio414Pupdsel) -> u8 {
        Pio414Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio414Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio414Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio414Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio414Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio414Slewrate {
        Pio414Slewrate::from_bits(val)
    }
}
impl From<Pio414Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio414Slewrate) -> u8 {
        Pio414Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio415Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio415Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio415Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio415Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio415Amena {
        Pio415Amena::from_bits(val)
    }
}
impl From<Pio415Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio415Amena) -> u8 {
        Pio415Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio415Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio415Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio415Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio415Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio415Fsel {
        Pio415Fsel::from_bits(val)
    }
}
impl From<Pio415Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio415Fsel) -> u8 {
        Pio415Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio415Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio415Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio415Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio415Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio415Fulldrive {
        Pio415Fulldrive::from_bits(val)
    }
}
impl From<Pio415Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio415Fulldrive) -> u8 {
        Pio415Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio415Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio415Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio415Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio415Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio415Ibena {
        Pio415Ibena::from_bits(val)
    }
}
impl From<Pio415Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio415Ibena) -> u8 {
        Pio415Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio415Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio415Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio415Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio415Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio415Iiena {
        Pio415Iiena::from_bits(val)
    }
}
impl From<Pio415Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio415Iiena) -> u8 {
        Pio415Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio415Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio415Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio415Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio415Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio415Odena {
        Pio415Odena::from_bits(val)
    }
}
impl From<Pio415Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio415Odena) -> u8 {
        Pio415Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio415Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio415Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio415Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio415Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio415Pupdena {
        Pio415Pupdena::from_bits(val)
    }
}
impl From<Pio415Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio415Pupdena) -> u8 {
        Pio415Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio415Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio415Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio415Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio415Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio415Pupdsel {
        Pio415Pupdsel::from_bits(val)
    }
}
impl From<Pio415Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio415Pupdsel) -> u8 {
        Pio415Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio415Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio415Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio415Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio415Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio415Slewrate {
        Pio415Slewrate::from_bits(val)
    }
}
impl From<Pio415Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio415Slewrate) -> u8 {
        Pio415Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio416Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio416Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio416Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio416Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio416Amena {
        Pio416Amena::from_bits(val)
    }
}
impl From<Pio416Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio416Amena) -> u8 {
        Pio416Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio416Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio416Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio416Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio416Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio416Fsel {
        Pio416Fsel::from_bits(val)
    }
}
impl From<Pio416Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio416Fsel) -> u8 {
        Pio416Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio416Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio416Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio416Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio416Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio416Fulldrive {
        Pio416Fulldrive::from_bits(val)
    }
}
impl From<Pio416Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio416Fulldrive) -> u8 {
        Pio416Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio416Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio416Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio416Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio416Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio416Ibena {
        Pio416Ibena::from_bits(val)
    }
}
impl From<Pio416Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio416Ibena) -> u8 {
        Pio416Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio416Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio416Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio416Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio416Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio416Iiena {
        Pio416Iiena::from_bits(val)
    }
}
impl From<Pio416Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio416Iiena) -> u8 {
        Pio416Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio416Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio416Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio416Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio416Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio416Odena {
        Pio416Odena::from_bits(val)
    }
}
impl From<Pio416Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio416Odena) -> u8 {
        Pio416Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio416Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio416Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio416Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio416Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio416Pupdena {
        Pio416Pupdena::from_bits(val)
    }
}
impl From<Pio416Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio416Pupdena) -> u8 {
        Pio416Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio416Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio416Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio416Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio416Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio416Pupdsel {
        Pio416Pupdsel::from_bits(val)
    }
}
impl From<Pio416Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio416Pupdsel) -> u8 {
        Pio416Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio416Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio416Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio416Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio416Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio416Slewrate {
        Pio416Slewrate::from_bits(val)
    }
}
impl From<Pio416Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio416Slewrate) -> u8 {
        Pio416Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio417Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio417Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio417Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio417Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio417Amena {
        Pio417Amena::from_bits(val)
    }
}
impl From<Pio417Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio417Amena) -> u8 {
        Pio417Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio417Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio417Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio417Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio417Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio417Fsel {
        Pio417Fsel::from_bits(val)
    }
}
impl From<Pio417Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio417Fsel) -> u8 {
        Pio417Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio417Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio417Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio417Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio417Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio417Fulldrive {
        Pio417Fulldrive::from_bits(val)
    }
}
impl From<Pio417Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio417Fulldrive) -> u8 {
        Pio417Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio417Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio417Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio417Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio417Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio417Ibena {
        Pio417Ibena::from_bits(val)
    }
}
impl From<Pio417Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio417Ibena) -> u8 {
        Pio417Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio417Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio417Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio417Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio417Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio417Iiena {
        Pio417Iiena::from_bits(val)
    }
}
impl From<Pio417Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio417Iiena) -> u8 {
        Pio417Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio417Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio417Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio417Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio417Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio417Odena {
        Pio417Odena::from_bits(val)
    }
}
impl From<Pio417Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio417Odena) -> u8 {
        Pio417Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio417Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio417Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio417Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio417Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio417Pupdena {
        Pio417Pupdena::from_bits(val)
    }
}
impl From<Pio417Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio417Pupdena) -> u8 {
        Pio417Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio417Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio417Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio417Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio417Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio417Pupdsel {
        Pio417Pupdsel::from_bits(val)
    }
}
impl From<Pio417Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio417Pupdsel) -> u8 {
        Pio417Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio417Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio417Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio417Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio417Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio417Slewrate {
        Pio417Slewrate::from_bits(val)
    }
}
impl From<Pio417Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio417Slewrate) -> u8 {
        Pio417Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio418Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio418Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio418Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio418Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio418Amena {
        Pio418Amena::from_bits(val)
    }
}
impl From<Pio418Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio418Amena) -> u8 {
        Pio418Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio418Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio418Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio418Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio418Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio418Fsel {
        Pio418Fsel::from_bits(val)
    }
}
impl From<Pio418Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio418Fsel) -> u8 {
        Pio418Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio418Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio418Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio418Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio418Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio418Fulldrive {
        Pio418Fulldrive::from_bits(val)
    }
}
impl From<Pio418Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio418Fulldrive) -> u8 {
        Pio418Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio418Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio418Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio418Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio418Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio418Ibena {
        Pio418Ibena::from_bits(val)
    }
}
impl From<Pio418Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio418Ibena) -> u8 {
        Pio418Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio418Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio418Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio418Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio418Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio418Iiena {
        Pio418Iiena::from_bits(val)
    }
}
impl From<Pio418Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio418Iiena) -> u8 {
        Pio418Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio418Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio418Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio418Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio418Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio418Odena {
        Pio418Odena::from_bits(val)
    }
}
impl From<Pio418Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio418Odena) -> u8 {
        Pio418Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio418Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio418Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio418Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio418Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio418Pupdena {
        Pio418Pupdena::from_bits(val)
    }
}
impl From<Pio418Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio418Pupdena) -> u8 {
        Pio418Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio418Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio418Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio418Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio418Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio418Pupdsel {
        Pio418Pupdsel::from_bits(val)
    }
}
impl From<Pio418Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio418Pupdsel) -> u8 {
        Pio418Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio418Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio418Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio418Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio418Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio418Slewrate {
        Pio418Slewrate::from_bits(val)
    }
}
impl From<Pio418Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio418Slewrate) -> u8 {
        Pio418Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio419Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio419Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio419Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio419Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio419Amena {
        Pio419Amena::from_bits(val)
    }
}
impl From<Pio419Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio419Amena) -> u8 {
        Pio419Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio419Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio419Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio419Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio419Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio419Fsel {
        Pio419Fsel::from_bits(val)
    }
}
impl From<Pio419Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio419Fsel) -> u8 {
        Pio419Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio419Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio419Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio419Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio419Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio419Fulldrive {
        Pio419Fulldrive::from_bits(val)
    }
}
impl From<Pio419Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio419Fulldrive) -> u8 {
        Pio419Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio419Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio419Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio419Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio419Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio419Ibena {
        Pio419Ibena::from_bits(val)
    }
}
impl From<Pio419Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio419Ibena) -> u8 {
        Pio419Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio419Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio419Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio419Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio419Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio419Iiena {
        Pio419Iiena::from_bits(val)
    }
}
impl From<Pio419Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio419Iiena) -> u8 {
        Pio419Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio419Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio419Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio419Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio419Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio419Odena {
        Pio419Odena::from_bits(val)
    }
}
impl From<Pio419Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio419Odena) -> u8 {
        Pio419Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio419Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio419Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio419Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio419Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio419Pupdena {
        Pio419Pupdena::from_bits(val)
    }
}
impl From<Pio419Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio419Pupdena) -> u8 {
        Pio419Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio419Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio419Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio419Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio419Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio419Pupdsel {
        Pio419Pupdsel::from_bits(val)
    }
}
impl From<Pio419Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio419Pupdsel) -> u8 {
        Pio419Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio419Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio419Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio419Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio419Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio419Slewrate {
        Pio419Slewrate::from_bits(val)
    }
}
impl From<Pio419Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio419Slewrate) -> u8 {
        Pio419Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio41Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio41Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio41Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio41Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio41Amena {
        Pio41Amena::from_bits(val)
    }
}
impl From<Pio41Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio41Amena) -> u8 {
        Pio41Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio41Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio41Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio41Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio41Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio41Fsel {
        Pio41Fsel::from_bits(val)
    }
}
impl From<Pio41Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio41Fsel) -> u8 {
        Pio41Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio41Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio41Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio41Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio41Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio41Fulldrive {
        Pio41Fulldrive::from_bits(val)
    }
}
impl From<Pio41Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio41Fulldrive) -> u8 {
        Pio41Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio41Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio41Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio41Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio41Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio41Ibena {
        Pio41Ibena::from_bits(val)
    }
}
impl From<Pio41Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio41Ibena) -> u8 {
        Pio41Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio41Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio41Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio41Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio41Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio41Iiena {
        Pio41Iiena::from_bits(val)
    }
}
impl From<Pio41Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio41Iiena) -> u8 {
        Pio41Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio41Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio41Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio41Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio41Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio41Odena {
        Pio41Odena::from_bits(val)
    }
}
impl From<Pio41Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio41Odena) -> u8 {
        Pio41Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio41Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio41Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio41Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio41Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio41Pupdena {
        Pio41Pupdena::from_bits(val)
    }
}
impl From<Pio41Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio41Pupdena) -> u8 {
        Pio41Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio41Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio41Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio41Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio41Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio41Pupdsel {
        Pio41Pupdsel::from_bits(val)
    }
}
impl From<Pio41Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio41Pupdsel) -> u8 {
        Pio41Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio41Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio41Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio41Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio41Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio41Slewrate {
        Pio41Slewrate::from_bits(val)
    }
}
impl From<Pio41Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio41Slewrate) -> u8 {
        Pio41Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio420Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio420Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio420Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio420Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio420Amena {
        Pio420Amena::from_bits(val)
    }
}
impl From<Pio420Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio420Amena) -> u8 {
        Pio420Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio420Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio420Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio420Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio420Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio420Fsel {
        Pio420Fsel::from_bits(val)
    }
}
impl From<Pio420Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio420Fsel) -> u8 {
        Pio420Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio420Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio420Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio420Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio420Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio420Fulldrive {
        Pio420Fulldrive::from_bits(val)
    }
}
impl From<Pio420Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio420Fulldrive) -> u8 {
        Pio420Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio420Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio420Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio420Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio420Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio420Ibena {
        Pio420Ibena::from_bits(val)
    }
}
impl From<Pio420Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio420Ibena) -> u8 {
        Pio420Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio420Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio420Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio420Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio420Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio420Iiena {
        Pio420Iiena::from_bits(val)
    }
}
impl From<Pio420Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio420Iiena) -> u8 {
        Pio420Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio420Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio420Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio420Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio420Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio420Odena {
        Pio420Odena::from_bits(val)
    }
}
impl From<Pio420Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio420Odena) -> u8 {
        Pio420Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio420Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio420Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio420Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio420Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio420Pupdena {
        Pio420Pupdena::from_bits(val)
    }
}
impl From<Pio420Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio420Pupdena) -> u8 {
        Pio420Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio420Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio420Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio420Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio420Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio420Pupdsel {
        Pio420Pupdsel::from_bits(val)
    }
}
impl From<Pio420Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio420Pupdsel) -> u8 {
        Pio420Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio420Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio420Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio420Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio420Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio420Slewrate {
        Pio420Slewrate::from_bits(val)
    }
}
impl From<Pio420Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio420Slewrate) -> u8 {
        Pio420Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio421Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio421Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio421Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio421Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio421Amena {
        Pio421Amena::from_bits(val)
    }
}
impl From<Pio421Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio421Amena) -> u8 {
        Pio421Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio421Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio421Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio421Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio421Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio421Fsel {
        Pio421Fsel::from_bits(val)
    }
}
impl From<Pio421Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio421Fsel) -> u8 {
        Pio421Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio421Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio421Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio421Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio421Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio421Fulldrive {
        Pio421Fulldrive::from_bits(val)
    }
}
impl From<Pio421Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio421Fulldrive) -> u8 {
        Pio421Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio421Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio421Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio421Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio421Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio421Ibena {
        Pio421Ibena::from_bits(val)
    }
}
impl From<Pio421Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio421Ibena) -> u8 {
        Pio421Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio421Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio421Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio421Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio421Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio421Iiena {
        Pio421Iiena::from_bits(val)
    }
}
impl From<Pio421Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio421Iiena) -> u8 {
        Pio421Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio421Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio421Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio421Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio421Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio421Odena {
        Pio421Odena::from_bits(val)
    }
}
impl From<Pio421Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio421Odena) -> u8 {
        Pio421Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio421Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio421Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio421Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio421Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio421Pupdena {
        Pio421Pupdena::from_bits(val)
    }
}
impl From<Pio421Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio421Pupdena) -> u8 {
        Pio421Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio421Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio421Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio421Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio421Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio421Pupdsel {
        Pio421Pupdsel::from_bits(val)
    }
}
impl From<Pio421Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio421Pupdsel) -> u8 {
        Pio421Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio421Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio421Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio421Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio421Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio421Slewrate {
        Pio421Slewrate::from_bits(val)
    }
}
impl From<Pio421Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio421Slewrate) -> u8 {
        Pio421Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio422Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio422Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio422Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio422Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio422Amena {
        Pio422Amena::from_bits(val)
    }
}
impl From<Pio422Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio422Amena) -> u8 {
        Pio422Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio422Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio422Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio422Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio422Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio422Fsel {
        Pio422Fsel::from_bits(val)
    }
}
impl From<Pio422Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio422Fsel) -> u8 {
        Pio422Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio422Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio422Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio422Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio422Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio422Fulldrive {
        Pio422Fulldrive::from_bits(val)
    }
}
impl From<Pio422Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio422Fulldrive) -> u8 {
        Pio422Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio422Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio422Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio422Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio422Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio422Ibena {
        Pio422Ibena::from_bits(val)
    }
}
impl From<Pio422Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio422Ibena) -> u8 {
        Pio422Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio422Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio422Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio422Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio422Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio422Iiena {
        Pio422Iiena::from_bits(val)
    }
}
impl From<Pio422Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio422Iiena) -> u8 {
        Pio422Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio422Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio422Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio422Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio422Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio422Odena {
        Pio422Odena::from_bits(val)
    }
}
impl From<Pio422Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio422Odena) -> u8 {
        Pio422Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio422Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio422Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio422Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio422Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio422Pupdena {
        Pio422Pupdena::from_bits(val)
    }
}
impl From<Pio422Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio422Pupdena) -> u8 {
        Pio422Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio422Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio422Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio422Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio422Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio422Pupdsel {
        Pio422Pupdsel::from_bits(val)
    }
}
impl From<Pio422Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio422Pupdsel) -> u8 {
        Pio422Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio422Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio422Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio422Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio422Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio422Slewrate {
        Pio422Slewrate::from_bits(val)
    }
}
impl From<Pio422Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio422Slewrate) -> u8 {
        Pio422Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio423Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio423Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio423Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio423Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio423Amena {
        Pio423Amena::from_bits(val)
    }
}
impl From<Pio423Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio423Amena) -> u8 {
        Pio423Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio423Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio423Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio423Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio423Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio423Fsel {
        Pio423Fsel::from_bits(val)
    }
}
impl From<Pio423Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio423Fsel) -> u8 {
        Pio423Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio423Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio423Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio423Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio423Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio423Fulldrive {
        Pio423Fulldrive::from_bits(val)
    }
}
impl From<Pio423Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio423Fulldrive) -> u8 {
        Pio423Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio423Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio423Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio423Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio423Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio423Ibena {
        Pio423Ibena::from_bits(val)
    }
}
impl From<Pio423Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio423Ibena) -> u8 {
        Pio423Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio423Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio423Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio423Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio423Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio423Iiena {
        Pio423Iiena::from_bits(val)
    }
}
impl From<Pio423Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio423Iiena) -> u8 {
        Pio423Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio423Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio423Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio423Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio423Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio423Odena {
        Pio423Odena::from_bits(val)
    }
}
impl From<Pio423Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio423Odena) -> u8 {
        Pio423Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio423Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio423Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio423Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio423Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio423Pupdena {
        Pio423Pupdena::from_bits(val)
    }
}
impl From<Pio423Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio423Pupdena) -> u8 {
        Pio423Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio423Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio423Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio423Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio423Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio423Pupdsel {
        Pio423Pupdsel::from_bits(val)
    }
}
impl From<Pio423Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio423Pupdsel) -> u8 {
        Pio423Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio423Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio423Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio423Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio423Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio423Slewrate {
        Pio423Slewrate::from_bits(val)
    }
}
impl From<Pio423Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio423Slewrate) -> u8 {
        Pio423Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio424Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio424Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio424Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio424Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio424Amena {
        Pio424Amena::from_bits(val)
    }
}
impl From<Pio424Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio424Amena) -> u8 {
        Pio424Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio424Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio424Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio424Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio424Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio424Fsel {
        Pio424Fsel::from_bits(val)
    }
}
impl From<Pio424Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio424Fsel) -> u8 {
        Pio424Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio424Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio424Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio424Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio424Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio424Fulldrive {
        Pio424Fulldrive::from_bits(val)
    }
}
impl From<Pio424Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio424Fulldrive) -> u8 {
        Pio424Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio424Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio424Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio424Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio424Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio424Ibena {
        Pio424Ibena::from_bits(val)
    }
}
impl From<Pio424Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio424Ibena) -> u8 {
        Pio424Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio424Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio424Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio424Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio424Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio424Iiena {
        Pio424Iiena::from_bits(val)
    }
}
impl From<Pio424Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio424Iiena) -> u8 {
        Pio424Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio424Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio424Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio424Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio424Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio424Odena {
        Pio424Odena::from_bits(val)
    }
}
impl From<Pio424Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio424Odena) -> u8 {
        Pio424Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio424Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio424Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio424Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio424Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio424Pupdena {
        Pio424Pupdena::from_bits(val)
    }
}
impl From<Pio424Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio424Pupdena) -> u8 {
        Pio424Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio424Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio424Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio424Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio424Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio424Pupdsel {
        Pio424Pupdsel::from_bits(val)
    }
}
impl From<Pio424Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio424Pupdsel) -> u8 {
        Pio424Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio424Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio424Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio424Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio424Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio424Slewrate {
        Pio424Slewrate::from_bits(val)
    }
}
impl From<Pio424Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio424Slewrate) -> u8 {
        Pio424Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio425Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio425Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio425Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio425Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio425Amena {
        Pio425Amena::from_bits(val)
    }
}
impl From<Pio425Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio425Amena) -> u8 {
        Pio425Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio425Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio425Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio425Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio425Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio425Fsel {
        Pio425Fsel::from_bits(val)
    }
}
impl From<Pio425Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio425Fsel) -> u8 {
        Pio425Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio425Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio425Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio425Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio425Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio425Fulldrive {
        Pio425Fulldrive::from_bits(val)
    }
}
impl From<Pio425Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio425Fulldrive) -> u8 {
        Pio425Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio425Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio425Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio425Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio425Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio425Ibena {
        Pio425Ibena::from_bits(val)
    }
}
impl From<Pio425Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio425Ibena) -> u8 {
        Pio425Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio425Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio425Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio425Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio425Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio425Iiena {
        Pio425Iiena::from_bits(val)
    }
}
impl From<Pio425Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio425Iiena) -> u8 {
        Pio425Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio425Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio425Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio425Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio425Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio425Odena {
        Pio425Odena::from_bits(val)
    }
}
impl From<Pio425Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio425Odena) -> u8 {
        Pio425Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio425Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio425Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio425Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio425Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio425Pupdena {
        Pio425Pupdena::from_bits(val)
    }
}
impl From<Pio425Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio425Pupdena) -> u8 {
        Pio425Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio425Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio425Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio425Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio425Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio425Pupdsel {
        Pio425Pupdsel::from_bits(val)
    }
}
impl From<Pio425Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio425Pupdsel) -> u8 {
        Pio425Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio425Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio425Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio425Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio425Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio425Slewrate {
        Pio425Slewrate::from_bits(val)
    }
}
impl From<Pio425Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio425Slewrate) -> u8 {
        Pio425Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio426Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio426Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio426Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio426Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio426Amena {
        Pio426Amena::from_bits(val)
    }
}
impl From<Pio426Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio426Amena) -> u8 {
        Pio426Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio426Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio426Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio426Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio426Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio426Fsel {
        Pio426Fsel::from_bits(val)
    }
}
impl From<Pio426Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio426Fsel) -> u8 {
        Pio426Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio426Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio426Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio426Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio426Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio426Fulldrive {
        Pio426Fulldrive::from_bits(val)
    }
}
impl From<Pio426Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio426Fulldrive) -> u8 {
        Pio426Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio426Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio426Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio426Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio426Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio426Ibena {
        Pio426Ibena::from_bits(val)
    }
}
impl From<Pio426Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio426Ibena) -> u8 {
        Pio426Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio426Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio426Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio426Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio426Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio426Iiena {
        Pio426Iiena::from_bits(val)
    }
}
impl From<Pio426Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio426Iiena) -> u8 {
        Pio426Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio426Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio426Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio426Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio426Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio426Odena {
        Pio426Odena::from_bits(val)
    }
}
impl From<Pio426Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio426Odena) -> u8 {
        Pio426Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio426Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio426Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio426Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio426Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio426Pupdena {
        Pio426Pupdena::from_bits(val)
    }
}
impl From<Pio426Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio426Pupdena) -> u8 {
        Pio426Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio426Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio426Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio426Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio426Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio426Pupdsel {
        Pio426Pupdsel::from_bits(val)
    }
}
impl From<Pio426Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio426Pupdsel) -> u8 {
        Pio426Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio426Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio426Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio426Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio426Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio426Slewrate {
        Pio426Slewrate::from_bits(val)
    }
}
impl From<Pio426Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio426Slewrate) -> u8 {
        Pio426Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio427Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio427Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio427Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio427Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio427Amena {
        Pio427Amena::from_bits(val)
    }
}
impl From<Pio427Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio427Amena) -> u8 {
        Pio427Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio427Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio427Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio427Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio427Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio427Fsel {
        Pio427Fsel::from_bits(val)
    }
}
impl From<Pio427Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio427Fsel) -> u8 {
        Pio427Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio427Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio427Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio427Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio427Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio427Fulldrive {
        Pio427Fulldrive::from_bits(val)
    }
}
impl From<Pio427Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio427Fulldrive) -> u8 {
        Pio427Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio427Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio427Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio427Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio427Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio427Ibena {
        Pio427Ibena::from_bits(val)
    }
}
impl From<Pio427Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio427Ibena) -> u8 {
        Pio427Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio427Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio427Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio427Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio427Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio427Iiena {
        Pio427Iiena::from_bits(val)
    }
}
impl From<Pio427Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio427Iiena) -> u8 {
        Pio427Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio427Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio427Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio427Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio427Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio427Odena {
        Pio427Odena::from_bits(val)
    }
}
impl From<Pio427Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio427Odena) -> u8 {
        Pio427Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio427Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio427Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio427Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio427Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio427Pupdena {
        Pio427Pupdena::from_bits(val)
    }
}
impl From<Pio427Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio427Pupdena) -> u8 {
        Pio427Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio427Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio427Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio427Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio427Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio427Pupdsel {
        Pio427Pupdsel::from_bits(val)
    }
}
impl From<Pio427Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio427Pupdsel) -> u8 {
        Pio427Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio427Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio427Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio427Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio427Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio427Slewrate {
        Pio427Slewrate::from_bits(val)
    }
}
impl From<Pio427Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio427Slewrate) -> u8 {
        Pio427Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio428Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio428Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio428Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio428Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio428Amena {
        Pio428Amena::from_bits(val)
    }
}
impl From<Pio428Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio428Amena) -> u8 {
        Pio428Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio428Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio428Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio428Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio428Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio428Fsel {
        Pio428Fsel::from_bits(val)
    }
}
impl From<Pio428Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio428Fsel) -> u8 {
        Pio428Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio428Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio428Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio428Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio428Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio428Fulldrive {
        Pio428Fulldrive::from_bits(val)
    }
}
impl From<Pio428Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio428Fulldrive) -> u8 {
        Pio428Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio428Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio428Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio428Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio428Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio428Ibena {
        Pio428Ibena::from_bits(val)
    }
}
impl From<Pio428Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio428Ibena) -> u8 {
        Pio428Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio428Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio428Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio428Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio428Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio428Iiena {
        Pio428Iiena::from_bits(val)
    }
}
impl From<Pio428Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio428Iiena) -> u8 {
        Pio428Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio428Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio428Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio428Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio428Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio428Odena {
        Pio428Odena::from_bits(val)
    }
}
impl From<Pio428Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio428Odena) -> u8 {
        Pio428Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio428Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio428Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio428Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio428Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio428Pupdena {
        Pio428Pupdena::from_bits(val)
    }
}
impl From<Pio428Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio428Pupdena) -> u8 {
        Pio428Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio428Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio428Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio428Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio428Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio428Pupdsel {
        Pio428Pupdsel::from_bits(val)
    }
}
impl From<Pio428Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio428Pupdsel) -> u8 {
        Pio428Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio428Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio428Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio428Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio428Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio428Slewrate {
        Pio428Slewrate::from_bits(val)
    }
}
impl From<Pio428Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio428Slewrate) -> u8 {
        Pio428Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio429Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio429Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio429Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio429Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio429Amena {
        Pio429Amena::from_bits(val)
    }
}
impl From<Pio429Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio429Amena) -> u8 {
        Pio429Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio429Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio429Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio429Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio429Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio429Fsel {
        Pio429Fsel::from_bits(val)
    }
}
impl From<Pio429Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio429Fsel) -> u8 {
        Pio429Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio429Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio429Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio429Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio429Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio429Fulldrive {
        Pio429Fulldrive::from_bits(val)
    }
}
impl From<Pio429Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio429Fulldrive) -> u8 {
        Pio429Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio429Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio429Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio429Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio429Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio429Ibena {
        Pio429Ibena::from_bits(val)
    }
}
impl From<Pio429Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio429Ibena) -> u8 {
        Pio429Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio429Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio429Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio429Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio429Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio429Iiena {
        Pio429Iiena::from_bits(val)
    }
}
impl From<Pio429Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio429Iiena) -> u8 {
        Pio429Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio429Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio429Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio429Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio429Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio429Odena {
        Pio429Odena::from_bits(val)
    }
}
impl From<Pio429Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio429Odena) -> u8 {
        Pio429Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio429Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio429Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio429Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio429Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio429Pupdena {
        Pio429Pupdena::from_bits(val)
    }
}
impl From<Pio429Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio429Pupdena) -> u8 {
        Pio429Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio429Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio429Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio429Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio429Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio429Pupdsel {
        Pio429Pupdsel::from_bits(val)
    }
}
impl From<Pio429Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio429Pupdsel) -> u8 {
        Pio429Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio429Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio429Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio429Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio429Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio429Slewrate {
        Pio429Slewrate::from_bits(val)
    }
}
impl From<Pio429Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio429Slewrate) -> u8 {
        Pio429Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio42Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio42Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio42Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio42Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio42Amena {
        Pio42Amena::from_bits(val)
    }
}
impl From<Pio42Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio42Amena) -> u8 {
        Pio42Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio42Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio42Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio42Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio42Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio42Fsel {
        Pio42Fsel::from_bits(val)
    }
}
impl From<Pio42Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio42Fsel) -> u8 {
        Pio42Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio42Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio42Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio42Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio42Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio42Fulldrive {
        Pio42Fulldrive::from_bits(val)
    }
}
impl From<Pio42Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio42Fulldrive) -> u8 {
        Pio42Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio42Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio42Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio42Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio42Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio42Ibena {
        Pio42Ibena::from_bits(val)
    }
}
impl From<Pio42Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio42Ibena) -> u8 {
        Pio42Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio42Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio42Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio42Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio42Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio42Iiena {
        Pio42Iiena::from_bits(val)
    }
}
impl From<Pio42Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio42Iiena) -> u8 {
        Pio42Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio42Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio42Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio42Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio42Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio42Odena {
        Pio42Odena::from_bits(val)
    }
}
impl From<Pio42Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio42Odena) -> u8 {
        Pio42Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio42Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio42Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio42Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio42Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio42Pupdena {
        Pio42Pupdena::from_bits(val)
    }
}
impl From<Pio42Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio42Pupdena) -> u8 {
        Pio42Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio42Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio42Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio42Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio42Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio42Pupdsel {
        Pio42Pupdsel::from_bits(val)
    }
}
impl From<Pio42Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio42Pupdsel) -> u8 {
        Pio42Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio42Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio42Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio42Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio42Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio42Slewrate {
        Pio42Slewrate::from_bits(val)
    }
}
impl From<Pio42Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio42Slewrate) -> u8 {
        Pio42Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio430Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio430Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio430Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio430Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio430Amena {
        Pio430Amena::from_bits(val)
    }
}
impl From<Pio430Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio430Amena) -> u8 {
        Pio430Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio430Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio430Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio430Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio430Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio430Fsel {
        Pio430Fsel::from_bits(val)
    }
}
impl From<Pio430Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio430Fsel) -> u8 {
        Pio430Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio430Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio430Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio430Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio430Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio430Fulldrive {
        Pio430Fulldrive::from_bits(val)
    }
}
impl From<Pio430Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio430Fulldrive) -> u8 {
        Pio430Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio430Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio430Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio430Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio430Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio430Ibena {
        Pio430Ibena::from_bits(val)
    }
}
impl From<Pio430Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio430Ibena) -> u8 {
        Pio430Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio430Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio430Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio430Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio430Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio430Iiena {
        Pio430Iiena::from_bits(val)
    }
}
impl From<Pio430Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio430Iiena) -> u8 {
        Pio430Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio430Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio430Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio430Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio430Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio430Odena {
        Pio430Odena::from_bits(val)
    }
}
impl From<Pio430Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio430Odena) -> u8 {
        Pio430Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio430Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio430Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio430Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio430Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio430Pupdena {
        Pio430Pupdena::from_bits(val)
    }
}
impl From<Pio430Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio430Pupdena) -> u8 {
        Pio430Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio430Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio430Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio430Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio430Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio430Pupdsel {
        Pio430Pupdsel::from_bits(val)
    }
}
impl From<Pio430Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio430Pupdsel) -> u8 {
        Pio430Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio430Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio430Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio430Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio430Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio430Slewrate {
        Pio430Slewrate::from_bits(val)
    }
}
impl From<Pio430Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio430Slewrate) -> u8 {
        Pio430Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio431Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio431Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio431Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio431Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio431Amena {
        Pio431Amena::from_bits(val)
    }
}
impl From<Pio431Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio431Amena) -> u8 {
        Pio431Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio431Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio431Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio431Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio431Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio431Fsel {
        Pio431Fsel::from_bits(val)
    }
}
impl From<Pio431Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio431Fsel) -> u8 {
        Pio431Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio431Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio431Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio431Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio431Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio431Fulldrive {
        Pio431Fulldrive::from_bits(val)
    }
}
impl From<Pio431Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio431Fulldrive) -> u8 {
        Pio431Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio431Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio431Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio431Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio431Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio431Ibena {
        Pio431Ibena::from_bits(val)
    }
}
impl From<Pio431Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio431Ibena) -> u8 {
        Pio431Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio431Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio431Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio431Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio431Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio431Iiena {
        Pio431Iiena::from_bits(val)
    }
}
impl From<Pio431Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio431Iiena) -> u8 {
        Pio431Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio431Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio431Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio431Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio431Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio431Odena {
        Pio431Odena::from_bits(val)
    }
}
impl From<Pio431Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio431Odena) -> u8 {
        Pio431Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio431Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio431Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio431Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio431Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio431Pupdena {
        Pio431Pupdena::from_bits(val)
    }
}
impl From<Pio431Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio431Pupdena) -> u8 {
        Pio431Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio431Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio431Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio431Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio431Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio431Pupdsel {
        Pio431Pupdsel::from_bits(val)
    }
}
impl From<Pio431Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio431Pupdsel) -> u8 {
        Pio431Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio431Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio431Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio431Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio431Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio431Slewrate {
        Pio431Slewrate::from_bits(val)
    }
}
impl From<Pio431Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio431Slewrate) -> u8 {
        Pio431Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio43Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio43Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio43Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio43Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio43Amena {
        Pio43Amena::from_bits(val)
    }
}
impl From<Pio43Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio43Amena) -> u8 {
        Pio43Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio43Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio43Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio43Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio43Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio43Fsel {
        Pio43Fsel::from_bits(val)
    }
}
impl From<Pio43Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio43Fsel) -> u8 {
        Pio43Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio43Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio43Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio43Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio43Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio43Fulldrive {
        Pio43Fulldrive::from_bits(val)
    }
}
impl From<Pio43Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio43Fulldrive) -> u8 {
        Pio43Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio43Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio43Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio43Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio43Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio43Ibena {
        Pio43Ibena::from_bits(val)
    }
}
impl From<Pio43Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio43Ibena) -> u8 {
        Pio43Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio43Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio43Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio43Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio43Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio43Iiena {
        Pio43Iiena::from_bits(val)
    }
}
impl From<Pio43Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio43Iiena) -> u8 {
        Pio43Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio43Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio43Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio43Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio43Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio43Odena {
        Pio43Odena::from_bits(val)
    }
}
impl From<Pio43Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio43Odena) -> u8 {
        Pio43Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio43Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio43Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio43Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio43Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio43Pupdena {
        Pio43Pupdena::from_bits(val)
    }
}
impl From<Pio43Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio43Pupdena) -> u8 {
        Pio43Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio43Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio43Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio43Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio43Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio43Pupdsel {
        Pio43Pupdsel::from_bits(val)
    }
}
impl From<Pio43Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio43Pupdsel) -> u8 {
        Pio43Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio43Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio43Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio43Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio43Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio43Slewrate {
        Pio43Slewrate::from_bits(val)
    }
}
impl From<Pio43Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio43Slewrate) -> u8 {
        Pio43Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio44Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio44Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio44Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio44Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio44Amena {
        Pio44Amena::from_bits(val)
    }
}
impl From<Pio44Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio44Amena) -> u8 {
        Pio44Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio44Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio44Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio44Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio44Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio44Fsel {
        Pio44Fsel::from_bits(val)
    }
}
impl From<Pio44Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio44Fsel) -> u8 {
        Pio44Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio44Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio44Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio44Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio44Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio44Fulldrive {
        Pio44Fulldrive::from_bits(val)
    }
}
impl From<Pio44Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio44Fulldrive) -> u8 {
        Pio44Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio44Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio44Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio44Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio44Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio44Ibena {
        Pio44Ibena::from_bits(val)
    }
}
impl From<Pio44Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio44Ibena) -> u8 {
        Pio44Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio44Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio44Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio44Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio44Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio44Iiena {
        Pio44Iiena::from_bits(val)
    }
}
impl From<Pio44Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio44Iiena) -> u8 {
        Pio44Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio44Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio44Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio44Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio44Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio44Odena {
        Pio44Odena::from_bits(val)
    }
}
impl From<Pio44Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio44Odena) -> u8 {
        Pio44Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio44Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio44Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio44Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio44Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio44Pupdena {
        Pio44Pupdena::from_bits(val)
    }
}
impl From<Pio44Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio44Pupdena) -> u8 {
        Pio44Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio44Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio44Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio44Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio44Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio44Pupdsel {
        Pio44Pupdsel::from_bits(val)
    }
}
impl From<Pio44Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio44Pupdsel) -> u8 {
        Pio44Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio44Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio44Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio44Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio44Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio44Slewrate {
        Pio44Slewrate::from_bits(val)
    }
}
impl From<Pio44Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio44Slewrate) -> u8 {
        Pio44Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio45Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio45Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio45Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio45Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio45Amena {
        Pio45Amena::from_bits(val)
    }
}
impl From<Pio45Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio45Amena) -> u8 {
        Pio45Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio45Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio45Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio45Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio45Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio45Fsel {
        Pio45Fsel::from_bits(val)
    }
}
impl From<Pio45Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio45Fsel) -> u8 {
        Pio45Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio45Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio45Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio45Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio45Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio45Fulldrive {
        Pio45Fulldrive::from_bits(val)
    }
}
impl From<Pio45Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio45Fulldrive) -> u8 {
        Pio45Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio45Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio45Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio45Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio45Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio45Ibena {
        Pio45Ibena::from_bits(val)
    }
}
impl From<Pio45Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio45Ibena) -> u8 {
        Pio45Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio45Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio45Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio45Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio45Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio45Iiena {
        Pio45Iiena::from_bits(val)
    }
}
impl From<Pio45Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio45Iiena) -> u8 {
        Pio45Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio45Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio45Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio45Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio45Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio45Odena {
        Pio45Odena::from_bits(val)
    }
}
impl From<Pio45Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio45Odena) -> u8 {
        Pio45Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio45Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio45Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio45Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio45Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio45Pupdena {
        Pio45Pupdena::from_bits(val)
    }
}
impl From<Pio45Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio45Pupdena) -> u8 {
        Pio45Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio45Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio45Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio45Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio45Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio45Pupdsel {
        Pio45Pupdsel::from_bits(val)
    }
}
impl From<Pio45Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio45Pupdsel) -> u8 {
        Pio45Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio45Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio45Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio45Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio45Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio45Slewrate {
        Pio45Slewrate::from_bits(val)
    }
}
impl From<Pio45Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio45Slewrate) -> u8 {
        Pio45Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio46Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio46Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio46Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio46Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio46Amena {
        Pio46Amena::from_bits(val)
    }
}
impl From<Pio46Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio46Amena) -> u8 {
        Pio46Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio46Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio46Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio46Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio46Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio46Fsel {
        Pio46Fsel::from_bits(val)
    }
}
impl From<Pio46Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio46Fsel) -> u8 {
        Pio46Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio46Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio46Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio46Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio46Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio46Fulldrive {
        Pio46Fulldrive::from_bits(val)
    }
}
impl From<Pio46Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio46Fulldrive) -> u8 {
        Pio46Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio46Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio46Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio46Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio46Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio46Ibena {
        Pio46Ibena::from_bits(val)
    }
}
impl From<Pio46Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio46Ibena) -> u8 {
        Pio46Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio46Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio46Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio46Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio46Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio46Iiena {
        Pio46Iiena::from_bits(val)
    }
}
impl From<Pio46Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio46Iiena) -> u8 {
        Pio46Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio46Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio46Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio46Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio46Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio46Odena {
        Pio46Odena::from_bits(val)
    }
}
impl From<Pio46Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio46Odena) -> u8 {
        Pio46Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio46Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio46Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio46Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio46Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio46Pupdena {
        Pio46Pupdena::from_bits(val)
    }
}
impl From<Pio46Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio46Pupdena) -> u8 {
        Pio46Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio46Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio46Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio46Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio46Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio46Pupdsel {
        Pio46Pupdsel::from_bits(val)
    }
}
impl From<Pio46Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio46Pupdsel) -> u8 {
        Pio46Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio46Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio46Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio46Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio46Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio46Slewrate {
        Pio46Slewrate::from_bits(val)
    }
}
impl From<Pio46Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio46Slewrate) -> u8 {
        Pio46Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio47Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio47Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio47Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio47Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio47Amena {
        Pio47Amena::from_bits(val)
    }
}
impl From<Pio47Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio47Amena) -> u8 {
        Pio47Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio47Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio47Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio47Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio47Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio47Fsel {
        Pio47Fsel::from_bits(val)
    }
}
impl From<Pio47Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio47Fsel) -> u8 {
        Pio47Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio47Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio47Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio47Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio47Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio47Fulldrive {
        Pio47Fulldrive::from_bits(val)
    }
}
impl From<Pio47Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio47Fulldrive) -> u8 {
        Pio47Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio47Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio47Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio47Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio47Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio47Ibena {
        Pio47Ibena::from_bits(val)
    }
}
impl From<Pio47Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio47Ibena) -> u8 {
        Pio47Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio47Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio47Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio47Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio47Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio47Iiena {
        Pio47Iiena::from_bits(val)
    }
}
impl From<Pio47Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio47Iiena) -> u8 {
        Pio47Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio47Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio47Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio47Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio47Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio47Odena {
        Pio47Odena::from_bits(val)
    }
}
impl From<Pio47Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio47Odena) -> u8 {
        Pio47Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio47Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio47Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio47Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio47Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio47Pupdena {
        Pio47Pupdena::from_bits(val)
    }
}
impl From<Pio47Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio47Pupdena) -> u8 {
        Pio47Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio47Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio47Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio47Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio47Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio47Pupdsel {
        Pio47Pupdsel::from_bits(val)
    }
}
impl From<Pio47Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio47Pupdsel) -> u8 {
        Pio47Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio47Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio47Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio47Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio47Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio47Slewrate {
        Pio47Slewrate::from_bits(val)
    }
}
impl From<Pio47Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio47Slewrate) -> u8 {
        Pio47Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio48Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio48Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio48Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio48Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio48Amena {
        Pio48Amena::from_bits(val)
    }
}
impl From<Pio48Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio48Amena) -> u8 {
        Pio48Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio48Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio48Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio48Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio48Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio48Fsel {
        Pio48Fsel::from_bits(val)
    }
}
impl From<Pio48Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio48Fsel) -> u8 {
        Pio48Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio48Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio48Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio48Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio48Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio48Fulldrive {
        Pio48Fulldrive::from_bits(val)
    }
}
impl From<Pio48Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio48Fulldrive) -> u8 {
        Pio48Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio48Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio48Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio48Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio48Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio48Ibena {
        Pio48Ibena::from_bits(val)
    }
}
impl From<Pio48Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio48Ibena) -> u8 {
        Pio48Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio48Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio48Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio48Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio48Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio48Iiena {
        Pio48Iiena::from_bits(val)
    }
}
impl From<Pio48Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio48Iiena) -> u8 {
        Pio48Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio48Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio48Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio48Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio48Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio48Odena {
        Pio48Odena::from_bits(val)
    }
}
impl From<Pio48Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio48Odena) -> u8 {
        Pio48Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio48Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio48Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio48Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio48Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio48Pupdena {
        Pio48Pupdena::from_bits(val)
    }
}
impl From<Pio48Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio48Pupdena) -> u8 {
        Pio48Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio48Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio48Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio48Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio48Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio48Pupdsel {
        Pio48Pupdsel::from_bits(val)
    }
}
impl From<Pio48Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio48Pupdsel) -> u8 {
        Pio48Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio48Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio48Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio48Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio48Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio48Slewrate {
        Pio48Slewrate::from_bits(val)
    }
}
impl From<Pio48Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio48Slewrate) -> u8 {
        Pio48Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio49Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio49Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio49Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio49Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio49Amena {
        Pio49Amena::from_bits(val)
    }
}
impl From<Pio49Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio49Amena) -> u8 {
        Pio49Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio49Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio49Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio49Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio49Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio49Fsel {
        Pio49Fsel::from_bits(val)
    }
}
impl From<Pio49Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio49Fsel) -> u8 {
        Pio49Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio49Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio49Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio49Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio49Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio49Fulldrive {
        Pio49Fulldrive::from_bits(val)
    }
}
impl From<Pio49Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio49Fulldrive) -> u8 {
        Pio49Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio49Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio49Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio49Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio49Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio49Ibena {
        Pio49Ibena::from_bits(val)
    }
}
impl From<Pio49Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio49Ibena) -> u8 {
        Pio49Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio49Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio49Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio49Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio49Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio49Iiena {
        Pio49Iiena::from_bits(val)
    }
}
impl From<Pio49Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio49Iiena) -> u8 {
        Pio49Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio49Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio49Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio49Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio49Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio49Odena {
        Pio49Odena::from_bits(val)
    }
}
impl From<Pio49Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio49Odena) -> u8 {
        Pio49Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio49Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio49Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio49Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio49Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio49Pupdena {
        Pio49Pupdena::from_bits(val)
    }
}
impl From<Pio49Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio49Pupdena) -> u8 {
        Pio49Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio49Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio49Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio49Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio49Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio49Pupdsel {
        Pio49Pupdsel::from_bits(val)
    }
}
impl From<Pio49Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio49Pupdsel) -> u8 {
        Pio49Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio49Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio49Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio49Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio49Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio49Slewrate {
        Pio49Slewrate::from_bits(val)
    }
}
impl From<Pio49Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio49Slewrate) -> u8 {
        Pio49Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio50Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio50Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio50Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio50Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio50Amena {
        Pio50Amena::from_bits(val)
    }
}
impl From<Pio50Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio50Amena) -> u8 {
        Pio50Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio50Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio50Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio50Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio50Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio50Fsel {
        Pio50Fsel::from_bits(val)
    }
}
impl From<Pio50Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio50Fsel) -> u8 {
        Pio50Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio50Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio50Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio50Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio50Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio50Fulldrive {
        Pio50Fulldrive::from_bits(val)
    }
}
impl From<Pio50Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio50Fulldrive) -> u8 {
        Pio50Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio50Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio50Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio50Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio50Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio50Ibena {
        Pio50Ibena::from_bits(val)
    }
}
impl From<Pio50Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio50Ibena) -> u8 {
        Pio50Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio50Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio50Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio50Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio50Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio50Iiena {
        Pio50Iiena::from_bits(val)
    }
}
impl From<Pio50Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio50Iiena) -> u8 {
        Pio50Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio50Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio50Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio50Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio50Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio50Odena {
        Pio50Odena::from_bits(val)
    }
}
impl From<Pio50Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio50Odena) -> u8 {
        Pio50Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio50Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio50Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio50Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio50Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio50Pupdena {
        Pio50Pupdena::from_bits(val)
    }
}
impl From<Pio50Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio50Pupdena) -> u8 {
        Pio50Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio50Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio50Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio50Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio50Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio50Pupdsel {
        Pio50Pupdsel::from_bits(val)
    }
}
impl From<Pio50Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio50Pupdsel) -> u8 {
        Pio50Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio50Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio50Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio50Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio50Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio50Slewrate {
        Pio50Slewrate::from_bits(val)
    }
}
impl From<Pio50Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio50Slewrate) -> u8 {
        Pio50Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio510Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio510Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio510Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio510Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio510Amena {
        Pio510Amena::from_bits(val)
    }
}
impl From<Pio510Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio510Amena) -> u8 {
        Pio510Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio510Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio510Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio510Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio510Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio510Fsel {
        Pio510Fsel::from_bits(val)
    }
}
impl From<Pio510Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio510Fsel) -> u8 {
        Pio510Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio510Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio510Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio510Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio510Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio510Fulldrive {
        Pio510Fulldrive::from_bits(val)
    }
}
impl From<Pio510Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio510Fulldrive) -> u8 {
        Pio510Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio510Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio510Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio510Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio510Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio510Ibena {
        Pio510Ibena::from_bits(val)
    }
}
impl From<Pio510Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio510Ibena) -> u8 {
        Pio510Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio510Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio510Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio510Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio510Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio510Iiena {
        Pio510Iiena::from_bits(val)
    }
}
impl From<Pio510Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio510Iiena) -> u8 {
        Pio510Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio510Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio510Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio510Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio510Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio510Odena {
        Pio510Odena::from_bits(val)
    }
}
impl From<Pio510Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio510Odena) -> u8 {
        Pio510Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio510Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio510Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio510Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio510Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio510Pupdena {
        Pio510Pupdena::from_bits(val)
    }
}
impl From<Pio510Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio510Pupdena) -> u8 {
        Pio510Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio510Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio510Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio510Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio510Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio510Pupdsel {
        Pio510Pupdsel::from_bits(val)
    }
}
impl From<Pio510Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio510Pupdsel) -> u8 {
        Pio510Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio510Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio510Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio510Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio510Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio510Slewrate {
        Pio510Slewrate::from_bits(val)
    }
}
impl From<Pio510Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio510Slewrate) -> u8 {
        Pio510Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio511Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio511Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio511Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio511Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio511Amena {
        Pio511Amena::from_bits(val)
    }
}
impl From<Pio511Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio511Amena) -> u8 {
        Pio511Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio511Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio511Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio511Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio511Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio511Fsel {
        Pio511Fsel::from_bits(val)
    }
}
impl From<Pio511Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio511Fsel) -> u8 {
        Pio511Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio511Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio511Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio511Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio511Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio511Fulldrive {
        Pio511Fulldrive::from_bits(val)
    }
}
impl From<Pio511Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio511Fulldrive) -> u8 {
        Pio511Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio511Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio511Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio511Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio511Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio511Ibena {
        Pio511Ibena::from_bits(val)
    }
}
impl From<Pio511Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio511Ibena) -> u8 {
        Pio511Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio511Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio511Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio511Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio511Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio511Iiena {
        Pio511Iiena::from_bits(val)
    }
}
impl From<Pio511Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio511Iiena) -> u8 {
        Pio511Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio511Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio511Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio511Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio511Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio511Odena {
        Pio511Odena::from_bits(val)
    }
}
impl From<Pio511Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio511Odena) -> u8 {
        Pio511Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio511Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio511Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio511Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio511Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio511Pupdena {
        Pio511Pupdena::from_bits(val)
    }
}
impl From<Pio511Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio511Pupdena) -> u8 {
        Pio511Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio511Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio511Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio511Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio511Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio511Pupdsel {
        Pio511Pupdsel::from_bits(val)
    }
}
impl From<Pio511Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio511Pupdsel) -> u8 {
        Pio511Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio511Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio511Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio511Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio511Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio511Slewrate {
        Pio511Slewrate::from_bits(val)
    }
}
impl From<Pio511Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio511Slewrate) -> u8 {
        Pio511Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio512Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio512Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio512Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio512Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio512Amena {
        Pio512Amena::from_bits(val)
    }
}
impl From<Pio512Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio512Amena) -> u8 {
        Pio512Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio512Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio512Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio512Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio512Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio512Fsel {
        Pio512Fsel::from_bits(val)
    }
}
impl From<Pio512Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio512Fsel) -> u8 {
        Pio512Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio512Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio512Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio512Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio512Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio512Fulldrive {
        Pio512Fulldrive::from_bits(val)
    }
}
impl From<Pio512Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio512Fulldrive) -> u8 {
        Pio512Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio512Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio512Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio512Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio512Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio512Ibena {
        Pio512Ibena::from_bits(val)
    }
}
impl From<Pio512Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio512Ibena) -> u8 {
        Pio512Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio512Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio512Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio512Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio512Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio512Iiena {
        Pio512Iiena::from_bits(val)
    }
}
impl From<Pio512Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio512Iiena) -> u8 {
        Pio512Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio512Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio512Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio512Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio512Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio512Odena {
        Pio512Odena::from_bits(val)
    }
}
impl From<Pio512Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio512Odena) -> u8 {
        Pio512Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio512Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio512Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio512Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio512Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio512Pupdena {
        Pio512Pupdena::from_bits(val)
    }
}
impl From<Pio512Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio512Pupdena) -> u8 {
        Pio512Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio512Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio512Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio512Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio512Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio512Pupdsel {
        Pio512Pupdsel::from_bits(val)
    }
}
impl From<Pio512Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio512Pupdsel) -> u8 {
        Pio512Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio512Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio512Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio512Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio512Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio512Slewrate {
        Pio512Slewrate::from_bits(val)
    }
}
impl From<Pio512Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio512Slewrate) -> u8 {
        Pio512Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio513Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio513Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio513Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio513Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio513Amena {
        Pio513Amena::from_bits(val)
    }
}
impl From<Pio513Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio513Amena) -> u8 {
        Pio513Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio513Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio513Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio513Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio513Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio513Fsel {
        Pio513Fsel::from_bits(val)
    }
}
impl From<Pio513Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio513Fsel) -> u8 {
        Pio513Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio513Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio513Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio513Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio513Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio513Fulldrive {
        Pio513Fulldrive::from_bits(val)
    }
}
impl From<Pio513Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio513Fulldrive) -> u8 {
        Pio513Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio513Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio513Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio513Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio513Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio513Ibena {
        Pio513Ibena::from_bits(val)
    }
}
impl From<Pio513Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio513Ibena) -> u8 {
        Pio513Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio513Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio513Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio513Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio513Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio513Iiena {
        Pio513Iiena::from_bits(val)
    }
}
impl From<Pio513Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio513Iiena) -> u8 {
        Pio513Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio513Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio513Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio513Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio513Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio513Odena {
        Pio513Odena::from_bits(val)
    }
}
impl From<Pio513Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio513Odena) -> u8 {
        Pio513Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio513Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio513Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio513Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio513Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio513Pupdena {
        Pio513Pupdena::from_bits(val)
    }
}
impl From<Pio513Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio513Pupdena) -> u8 {
        Pio513Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio513Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio513Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio513Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio513Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio513Pupdsel {
        Pio513Pupdsel::from_bits(val)
    }
}
impl From<Pio513Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio513Pupdsel) -> u8 {
        Pio513Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio513Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio513Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio513Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio513Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio513Slewrate {
        Pio513Slewrate::from_bits(val)
    }
}
impl From<Pio513Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio513Slewrate) -> u8 {
        Pio513Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio514Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio514Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio514Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio514Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio514Amena {
        Pio514Amena::from_bits(val)
    }
}
impl From<Pio514Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio514Amena) -> u8 {
        Pio514Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio514Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio514Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio514Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio514Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio514Fsel {
        Pio514Fsel::from_bits(val)
    }
}
impl From<Pio514Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio514Fsel) -> u8 {
        Pio514Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio514Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio514Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio514Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio514Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio514Fulldrive {
        Pio514Fulldrive::from_bits(val)
    }
}
impl From<Pio514Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio514Fulldrive) -> u8 {
        Pio514Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio514Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio514Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio514Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio514Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio514Ibena {
        Pio514Ibena::from_bits(val)
    }
}
impl From<Pio514Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio514Ibena) -> u8 {
        Pio514Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio514Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio514Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio514Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio514Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio514Iiena {
        Pio514Iiena::from_bits(val)
    }
}
impl From<Pio514Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio514Iiena) -> u8 {
        Pio514Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio514Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio514Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio514Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio514Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio514Odena {
        Pio514Odena::from_bits(val)
    }
}
impl From<Pio514Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio514Odena) -> u8 {
        Pio514Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio514Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio514Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio514Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio514Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio514Pupdena {
        Pio514Pupdena::from_bits(val)
    }
}
impl From<Pio514Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio514Pupdena) -> u8 {
        Pio514Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio514Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio514Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio514Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio514Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio514Pupdsel {
        Pio514Pupdsel::from_bits(val)
    }
}
impl From<Pio514Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio514Pupdsel) -> u8 {
        Pio514Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio514Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio514Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio514Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio514Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio514Slewrate {
        Pio514Slewrate::from_bits(val)
    }
}
impl From<Pio514Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio514Slewrate) -> u8 {
        Pio514Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio515Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio515Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio515Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio515Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio515Amena {
        Pio515Amena::from_bits(val)
    }
}
impl From<Pio515Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio515Amena) -> u8 {
        Pio515Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio515Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio515Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio515Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio515Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio515Fsel {
        Pio515Fsel::from_bits(val)
    }
}
impl From<Pio515Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio515Fsel) -> u8 {
        Pio515Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio515Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio515Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio515Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio515Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio515Fulldrive {
        Pio515Fulldrive::from_bits(val)
    }
}
impl From<Pio515Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio515Fulldrive) -> u8 {
        Pio515Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio515Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio515Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio515Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio515Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio515Ibena {
        Pio515Ibena::from_bits(val)
    }
}
impl From<Pio515Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio515Ibena) -> u8 {
        Pio515Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio515Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio515Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio515Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio515Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio515Iiena {
        Pio515Iiena::from_bits(val)
    }
}
impl From<Pio515Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio515Iiena) -> u8 {
        Pio515Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio515Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio515Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio515Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio515Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio515Odena {
        Pio515Odena::from_bits(val)
    }
}
impl From<Pio515Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio515Odena) -> u8 {
        Pio515Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio515Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio515Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio515Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio515Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio515Pupdena {
        Pio515Pupdena::from_bits(val)
    }
}
impl From<Pio515Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio515Pupdena) -> u8 {
        Pio515Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio515Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio515Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio515Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio515Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio515Pupdsel {
        Pio515Pupdsel::from_bits(val)
    }
}
impl From<Pio515Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio515Pupdsel) -> u8 {
        Pio515Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio515Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio515Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio515Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio515Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio515Slewrate {
        Pio515Slewrate::from_bits(val)
    }
}
impl From<Pio515Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio515Slewrate) -> u8 {
        Pio515Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio516Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio516Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio516Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio516Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio516Amena {
        Pio516Amena::from_bits(val)
    }
}
impl From<Pio516Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio516Amena) -> u8 {
        Pio516Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio516Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio516Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio516Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio516Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio516Fsel {
        Pio516Fsel::from_bits(val)
    }
}
impl From<Pio516Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio516Fsel) -> u8 {
        Pio516Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio516Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio516Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio516Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio516Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio516Fulldrive {
        Pio516Fulldrive::from_bits(val)
    }
}
impl From<Pio516Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio516Fulldrive) -> u8 {
        Pio516Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio516Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio516Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio516Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio516Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio516Ibena {
        Pio516Ibena::from_bits(val)
    }
}
impl From<Pio516Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio516Ibena) -> u8 {
        Pio516Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio516Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio516Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio516Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio516Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio516Iiena {
        Pio516Iiena::from_bits(val)
    }
}
impl From<Pio516Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio516Iiena) -> u8 {
        Pio516Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio516Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio516Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio516Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio516Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio516Odena {
        Pio516Odena::from_bits(val)
    }
}
impl From<Pio516Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio516Odena) -> u8 {
        Pio516Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio516Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio516Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio516Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio516Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio516Pupdena {
        Pio516Pupdena::from_bits(val)
    }
}
impl From<Pio516Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio516Pupdena) -> u8 {
        Pio516Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio516Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio516Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio516Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio516Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio516Pupdsel {
        Pio516Pupdsel::from_bits(val)
    }
}
impl From<Pio516Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio516Pupdsel) -> u8 {
        Pio516Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio516Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio516Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio516Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio516Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio516Slewrate {
        Pio516Slewrate::from_bits(val)
    }
}
impl From<Pio516Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio516Slewrate) -> u8 {
        Pio516Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio517Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio517Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio517Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio517Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio517Amena {
        Pio517Amena::from_bits(val)
    }
}
impl From<Pio517Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio517Amena) -> u8 {
        Pio517Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio517Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio517Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio517Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio517Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio517Fsel {
        Pio517Fsel::from_bits(val)
    }
}
impl From<Pio517Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio517Fsel) -> u8 {
        Pio517Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio517Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio517Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio517Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio517Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio517Fulldrive {
        Pio517Fulldrive::from_bits(val)
    }
}
impl From<Pio517Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio517Fulldrive) -> u8 {
        Pio517Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio517Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio517Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio517Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio517Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio517Ibena {
        Pio517Ibena::from_bits(val)
    }
}
impl From<Pio517Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio517Ibena) -> u8 {
        Pio517Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio517Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio517Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio517Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio517Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio517Iiena {
        Pio517Iiena::from_bits(val)
    }
}
impl From<Pio517Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio517Iiena) -> u8 {
        Pio517Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio517Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio517Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio517Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio517Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio517Odena {
        Pio517Odena::from_bits(val)
    }
}
impl From<Pio517Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio517Odena) -> u8 {
        Pio517Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio517Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio517Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio517Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio517Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio517Pupdena {
        Pio517Pupdena::from_bits(val)
    }
}
impl From<Pio517Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio517Pupdena) -> u8 {
        Pio517Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio517Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio517Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio517Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio517Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio517Pupdsel {
        Pio517Pupdsel::from_bits(val)
    }
}
impl From<Pio517Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio517Pupdsel) -> u8 {
        Pio517Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio517Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio517Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio517Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio517Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio517Slewrate {
        Pio517Slewrate::from_bits(val)
    }
}
impl From<Pio517Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio517Slewrate) -> u8 {
        Pio517Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio518Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio518Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio518Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio518Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio518Amena {
        Pio518Amena::from_bits(val)
    }
}
impl From<Pio518Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio518Amena) -> u8 {
        Pio518Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio518Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio518Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio518Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio518Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio518Fsel {
        Pio518Fsel::from_bits(val)
    }
}
impl From<Pio518Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio518Fsel) -> u8 {
        Pio518Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio518Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio518Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio518Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio518Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio518Fulldrive {
        Pio518Fulldrive::from_bits(val)
    }
}
impl From<Pio518Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio518Fulldrive) -> u8 {
        Pio518Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio518Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio518Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio518Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio518Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio518Ibena {
        Pio518Ibena::from_bits(val)
    }
}
impl From<Pio518Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio518Ibena) -> u8 {
        Pio518Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio518Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio518Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio518Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio518Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio518Iiena {
        Pio518Iiena::from_bits(val)
    }
}
impl From<Pio518Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio518Iiena) -> u8 {
        Pio518Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio518Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio518Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio518Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio518Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio518Odena {
        Pio518Odena::from_bits(val)
    }
}
impl From<Pio518Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio518Odena) -> u8 {
        Pio518Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio518Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio518Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio518Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio518Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio518Pupdena {
        Pio518Pupdena::from_bits(val)
    }
}
impl From<Pio518Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio518Pupdena) -> u8 {
        Pio518Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio518Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio518Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio518Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio518Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio518Pupdsel {
        Pio518Pupdsel::from_bits(val)
    }
}
impl From<Pio518Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio518Pupdsel) -> u8 {
        Pio518Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio518Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio518Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio518Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio518Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio518Slewrate {
        Pio518Slewrate::from_bits(val)
    }
}
impl From<Pio518Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio518Slewrate) -> u8 {
        Pio518Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio519Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio519Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio519Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio519Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio519Amena {
        Pio519Amena::from_bits(val)
    }
}
impl From<Pio519Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio519Amena) -> u8 {
        Pio519Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio519Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio519Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio519Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio519Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio519Fsel {
        Pio519Fsel::from_bits(val)
    }
}
impl From<Pio519Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio519Fsel) -> u8 {
        Pio519Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio519Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio519Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio519Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio519Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio519Fulldrive {
        Pio519Fulldrive::from_bits(val)
    }
}
impl From<Pio519Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio519Fulldrive) -> u8 {
        Pio519Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio519Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio519Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio519Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio519Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio519Ibena {
        Pio519Ibena::from_bits(val)
    }
}
impl From<Pio519Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio519Ibena) -> u8 {
        Pio519Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio519Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio519Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio519Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio519Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio519Iiena {
        Pio519Iiena::from_bits(val)
    }
}
impl From<Pio519Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio519Iiena) -> u8 {
        Pio519Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio519Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio519Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio519Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio519Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio519Odena {
        Pio519Odena::from_bits(val)
    }
}
impl From<Pio519Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio519Odena) -> u8 {
        Pio519Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio519Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio519Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio519Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio519Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio519Pupdena {
        Pio519Pupdena::from_bits(val)
    }
}
impl From<Pio519Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio519Pupdena) -> u8 {
        Pio519Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio519Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio519Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio519Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio519Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio519Pupdsel {
        Pio519Pupdsel::from_bits(val)
    }
}
impl From<Pio519Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio519Pupdsel) -> u8 {
        Pio519Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio519Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio519Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio519Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio519Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio519Slewrate {
        Pio519Slewrate::from_bits(val)
    }
}
impl From<Pio519Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio519Slewrate) -> u8 {
        Pio519Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio51Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio51Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio51Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio51Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio51Amena {
        Pio51Amena::from_bits(val)
    }
}
impl From<Pio51Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio51Amena) -> u8 {
        Pio51Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio51Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio51Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio51Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio51Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio51Fsel {
        Pio51Fsel::from_bits(val)
    }
}
impl From<Pio51Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio51Fsel) -> u8 {
        Pio51Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio51Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio51Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio51Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio51Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio51Fulldrive {
        Pio51Fulldrive::from_bits(val)
    }
}
impl From<Pio51Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio51Fulldrive) -> u8 {
        Pio51Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio51Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio51Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio51Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio51Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio51Ibena {
        Pio51Ibena::from_bits(val)
    }
}
impl From<Pio51Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio51Ibena) -> u8 {
        Pio51Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio51Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio51Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio51Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio51Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio51Iiena {
        Pio51Iiena::from_bits(val)
    }
}
impl From<Pio51Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio51Iiena) -> u8 {
        Pio51Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio51Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio51Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio51Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio51Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio51Odena {
        Pio51Odena::from_bits(val)
    }
}
impl From<Pio51Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio51Odena) -> u8 {
        Pio51Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio51Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio51Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio51Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio51Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio51Pupdena {
        Pio51Pupdena::from_bits(val)
    }
}
impl From<Pio51Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio51Pupdena) -> u8 {
        Pio51Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio51Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio51Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio51Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio51Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio51Pupdsel {
        Pio51Pupdsel::from_bits(val)
    }
}
impl From<Pio51Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio51Pupdsel) -> u8 {
        Pio51Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio51Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio51Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio51Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio51Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio51Slewrate {
        Pio51Slewrate::from_bits(val)
    }
}
impl From<Pio51Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio51Slewrate) -> u8 {
        Pio51Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio520Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio520Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio520Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio520Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio520Amena {
        Pio520Amena::from_bits(val)
    }
}
impl From<Pio520Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio520Amena) -> u8 {
        Pio520Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio520Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio520Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio520Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio520Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio520Fsel {
        Pio520Fsel::from_bits(val)
    }
}
impl From<Pio520Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio520Fsel) -> u8 {
        Pio520Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio520Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio520Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio520Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio520Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio520Fulldrive {
        Pio520Fulldrive::from_bits(val)
    }
}
impl From<Pio520Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio520Fulldrive) -> u8 {
        Pio520Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio520Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio520Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio520Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio520Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio520Ibena {
        Pio520Ibena::from_bits(val)
    }
}
impl From<Pio520Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio520Ibena) -> u8 {
        Pio520Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio520Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio520Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio520Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio520Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio520Iiena {
        Pio520Iiena::from_bits(val)
    }
}
impl From<Pio520Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio520Iiena) -> u8 {
        Pio520Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio520Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio520Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio520Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio520Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio520Odena {
        Pio520Odena::from_bits(val)
    }
}
impl From<Pio520Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio520Odena) -> u8 {
        Pio520Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio520Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio520Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio520Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio520Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio520Pupdena {
        Pio520Pupdena::from_bits(val)
    }
}
impl From<Pio520Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio520Pupdena) -> u8 {
        Pio520Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio520Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio520Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio520Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio520Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio520Pupdsel {
        Pio520Pupdsel::from_bits(val)
    }
}
impl From<Pio520Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio520Pupdsel) -> u8 {
        Pio520Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio520Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio520Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio520Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio520Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio520Slewrate {
        Pio520Slewrate::from_bits(val)
    }
}
impl From<Pio520Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio520Slewrate) -> u8 {
        Pio520Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio521Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio521Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio521Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio521Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio521Amena {
        Pio521Amena::from_bits(val)
    }
}
impl From<Pio521Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio521Amena) -> u8 {
        Pio521Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio521Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio521Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio521Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio521Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio521Fsel {
        Pio521Fsel::from_bits(val)
    }
}
impl From<Pio521Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio521Fsel) -> u8 {
        Pio521Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio521Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio521Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio521Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio521Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio521Fulldrive {
        Pio521Fulldrive::from_bits(val)
    }
}
impl From<Pio521Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio521Fulldrive) -> u8 {
        Pio521Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio521Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio521Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio521Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio521Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio521Ibena {
        Pio521Ibena::from_bits(val)
    }
}
impl From<Pio521Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio521Ibena) -> u8 {
        Pio521Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio521Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio521Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio521Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio521Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio521Iiena {
        Pio521Iiena::from_bits(val)
    }
}
impl From<Pio521Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio521Iiena) -> u8 {
        Pio521Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio521Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio521Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio521Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio521Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio521Odena {
        Pio521Odena::from_bits(val)
    }
}
impl From<Pio521Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio521Odena) -> u8 {
        Pio521Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio521Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio521Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio521Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio521Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio521Pupdena {
        Pio521Pupdena::from_bits(val)
    }
}
impl From<Pio521Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio521Pupdena) -> u8 {
        Pio521Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio521Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio521Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio521Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio521Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio521Pupdsel {
        Pio521Pupdsel::from_bits(val)
    }
}
impl From<Pio521Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio521Pupdsel) -> u8 {
        Pio521Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio521Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio521Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio521Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio521Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio521Slewrate {
        Pio521Slewrate::from_bits(val)
    }
}
impl From<Pio521Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio521Slewrate) -> u8 {
        Pio521Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio522Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio522Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio522Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio522Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio522Amena {
        Pio522Amena::from_bits(val)
    }
}
impl From<Pio522Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio522Amena) -> u8 {
        Pio522Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio522Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio522Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio522Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio522Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio522Fsel {
        Pio522Fsel::from_bits(val)
    }
}
impl From<Pio522Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio522Fsel) -> u8 {
        Pio522Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio522Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio522Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio522Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio522Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio522Fulldrive {
        Pio522Fulldrive::from_bits(val)
    }
}
impl From<Pio522Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio522Fulldrive) -> u8 {
        Pio522Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio522Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio522Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio522Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio522Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio522Ibena {
        Pio522Ibena::from_bits(val)
    }
}
impl From<Pio522Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio522Ibena) -> u8 {
        Pio522Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio522Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio522Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio522Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio522Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio522Iiena {
        Pio522Iiena::from_bits(val)
    }
}
impl From<Pio522Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio522Iiena) -> u8 {
        Pio522Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio522Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio522Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio522Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio522Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio522Odena {
        Pio522Odena::from_bits(val)
    }
}
impl From<Pio522Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio522Odena) -> u8 {
        Pio522Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio522Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio522Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio522Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio522Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio522Pupdena {
        Pio522Pupdena::from_bits(val)
    }
}
impl From<Pio522Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio522Pupdena) -> u8 {
        Pio522Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio522Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio522Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio522Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio522Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio522Pupdsel {
        Pio522Pupdsel::from_bits(val)
    }
}
impl From<Pio522Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio522Pupdsel) -> u8 {
        Pio522Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio522Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio522Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio522Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio522Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio522Slewrate {
        Pio522Slewrate::from_bits(val)
    }
}
impl From<Pio522Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio522Slewrate) -> u8 {
        Pio522Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio523Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio523Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio523Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio523Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio523Amena {
        Pio523Amena::from_bits(val)
    }
}
impl From<Pio523Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio523Amena) -> u8 {
        Pio523Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio523Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio523Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio523Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio523Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio523Fsel {
        Pio523Fsel::from_bits(val)
    }
}
impl From<Pio523Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio523Fsel) -> u8 {
        Pio523Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio523Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio523Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio523Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio523Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio523Fulldrive {
        Pio523Fulldrive::from_bits(val)
    }
}
impl From<Pio523Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio523Fulldrive) -> u8 {
        Pio523Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio523Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio523Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio523Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio523Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio523Ibena {
        Pio523Ibena::from_bits(val)
    }
}
impl From<Pio523Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio523Ibena) -> u8 {
        Pio523Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio523Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio523Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio523Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio523Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio523Iiena {
        Pio523Iiena::from_bits(val)
    }
}
impl From<Pio523Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio523Iiena) -> u8 {
        Pio523Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio523Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio523Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio523Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio523Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio523Odena {
        Pio523Odena::from_bits(val)
    }
}
impl From<Pio523Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio523Odena) -> u8 {
        Pio523Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio523Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio523Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio523Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio523Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio523Pupdena {
        Pio523Pupdena::from_bits(val)
    }
}
impl From<Pio523Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio523Pupdena) -> u8 {
        Pio523Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio523Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio523Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio523Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio523Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio523Pupdsel {
        Pio523Pupdsel::from_bits(val)
    }
}
impl From<Pio523Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio523Pupdsel) -> u8 {
        Pio523Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio523Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio523Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio523Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio523Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio523Slewrate {
        Pio523Slewrate::from_bits(val)
    }
}
impl From<Pio523Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio523Slewrate) -> u8 {
        Pio523Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio524Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio524Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio524Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio524Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio524Amena {
        Pio524Amena::from_bits(val)
    }
}
impl From<Pio524Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio524Amena) -> u8 {
        Pio524Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio524Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio524Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio524Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio524Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio524Fsel {
        Pio524Fsel::from_bits(val)
    }
}
impl From<Pio524Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio524Fsel) -> u8 {
        Pio524Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio524Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio524Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio524Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio524Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio524Fulldrive {
        Pio524Fulldrive::from_bits(val)
    }
}
impl From<Pio524Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio524Fulldrive) -> u8 {
        Pio524Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio524Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio524Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio524Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio524Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio524Ibena {
        Pio524Ibena::from_bits(val)
    }
}
impl From<Pio524Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio524Ibena) -> u8 {
        Pio524Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio524Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio524Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio524Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio524Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio524Iiena {
        Pio524Iiena::from_bits(val)
    }
}
impl From<Pio524Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio524Iiena) -> u8 {
        Pio524Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio524Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio524Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio524Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio524Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio524Odena {
        Pio524Odena::from_bits(val)
    }
}
impl From<Pio524Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio524Odena) -> u8 {
        Pio524Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio524Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio524Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio524Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio524Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio524Pupdena {
        Pio524Pupdena::from_bits(val)
    }
}
impl From<Pio524Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio524Pupdena) -> u8 {
        Pio524Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio524Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio524Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio524Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio524Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio524Pupdsel {
        Pio524Pupdsel::from_bits(val)
    }
}
impl From<Pio524Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio524Pupdsel) -> u8 {
        Pio524Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio524Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio524Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio524Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio524Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio524Slewrate {
        Pio524Slewrate::from_bits(val)
    }
}
impl From<Pio524Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio524Slewrate) -> u8 {
        Pio524Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio525Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio525Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio525Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio525Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio525Amena {
        Pio525Amena::from_bits(val)
    }
}
impl From<Pio525Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio525Amena) -> u8 {
        Pio525Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio525Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio525Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio525Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio525Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio525Fsel {
        Pio525Fsel::from_bits(val)
    }
}
impl From<Pio525Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio525Fsel) -> u8 {
        Pio525Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio525Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio525Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio525Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio525Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio525Fulldrive {
        Pio525Fulldrive::from_bits(val)
    }
}
impl From<Pio525Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio525Fulldrive) -> u8 {
        Pio525Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio525Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio525Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio525Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio525Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio525Ibena {
        Pio525Ibena::from_bits(val)
    }
}
impl From<Pio525Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio525Ibena) -> u8 {
        Pio525Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio525Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio525Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio525Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio525Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio525Iiena {
        Pio525Iiena::from_bits(val)
    }
}
impl From<Pio525Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio525Iiena) -> u8 {
        Pio525Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio525Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio525Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio525Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio525Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio525Odena {
        Pio525Odena::from_bits(val)
    }
}
impl From<Pio525Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio525Odena) -> u8 {
        Pio525Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio525Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio525Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio525Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio525Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio525Pupdena {
        Pio525Pupdena::from_bits(val)
    }
}
impl From<Pio525Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio525Pupdena) -> u8 {
        Pio525Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio525Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio525Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio525Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio525Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio525Pupdsel {
        Pio525Pupdsel::from_bits(val)
    }
}
impl From<Pio525Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio525Pupdsel) -> u8 {
        Pio525Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio525Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio525Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio525Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio525Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio525Slewrate {
        Pio525Slewrate::from_bits(val)
    }
}
impl From<Pio525Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio525Slewrate) -> u8 {
        Pio525Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio526Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio526Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio526Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio526Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio526Amena {
        Pio526Amena::from_bits(val)
    }
}
impl From<Pio526Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio526Amena) -> u8 {
        Pio526Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio526Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio526Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio526Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio526Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio526Fsel {
        Pio526Fsel::from_bits(val)
    }
}
impl From<Pio526Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio526Fsel) -> u8 {
        Pio526Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio526Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio526Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio526Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio526Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio526Fulldrive {
        Pio526Fulldrive::from_bits(val)
    }
}
impl From<Pio526Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio526Fulldrive) -> u8 {
        Pio526Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio526Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio526Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio526Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio526Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio526Ibena {
        Pio526Ibena::from_bits(val)
    }
}
impl From<Pio526Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio526Ibena) -> u8 {
        Pio526Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio526Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio526Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio526Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio526Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio526Iiena {
        Pio526Iiena::from_bits(val)
    }
}
impl From<Pio526Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio526Iiena) -> u8 {
        Pio526Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio526Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio526Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio526Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio526Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio526Odena {
        Pio526Odena::from_bits(val)
    }
}
impl From<Pio526Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio526Odena) -> u8 {
        Pio526Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio526Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio526Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio526Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio526Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio526Pupdena {
        Pio526Pupdena::from_bits(val)
    }
}
impl From<Pio526Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio526Pupdena) -> u8 {
        Pio526Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio526Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio526Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio526Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio526Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio526Pupdsel {
        Pio526Pupdsel::from_bits(val)
    }
}
impl From<Pio526Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio526Pupdsel) -> u8 {
        Pio526Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio526Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio526Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio526Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio526Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio526Slewrate {
        Pio526Slewrate::from_bits(val)
    }
}
impl From<Pio526Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio526Slewrate) -> u8 {
        Pio526Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio527Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio527Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio527Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio527Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio527Amena {
        Pio527Amena::from_bits(val)
    }
}
impl From<Pio527Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio527Amena) -> u8 {
        Pio527Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio527Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio527Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio527Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio527Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio527Fsel {
        Pio527Fsel::from_bits(val)
    }
}
impl From<Pio527Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio527Fsel) -> u8 {
        Pio527Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio527Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio527Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio527Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio527Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio527Fulldrive {
        Pio527Fulldrive::from_bits(val)
    }
}
impl From<Pio527Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio527Fulldrive) -> u8 {
        Pio527Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio527Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio527Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio527Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio527Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio527Ibena {
        Pio527Ibena::from_bits(val)
    }
}
impl From<Pio527Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio527Ibena) -> u8 {
        Pio527Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio527Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio527Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio527Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio527Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio527Iiena {
        Pio527Iiena::from_bits(val)
    }
}
impl From<Pio527Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio527Iiena) -> u8 {
        Pio527Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio527Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio527Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio527Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio527Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio527Odena {
        Pio527Odena::from_bits(val)
    }
}
impl From<Pio527Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio527Odena) -> u8 {
        Pio527Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio527Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio527Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio527Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio527Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio527Pupdena {
        Pio527Pupdena::from_bits(val)
    }
}
impl From<Pio527Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio527Pupdena) -> u8 {
        Pio527Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio527Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio527Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio527Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio527Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio527Pupdsel {
        Pio527Pupdsel::from_bits(val)
    }
}
impl From<Pio527Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio527Pupdsel) -> u8 {
        Pio527Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio527Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio527Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio527Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio527Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio527Slewrate {
        Pio527Slewrate::from_bits(val)
    }
}
impl From<Pio527Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio527Slewrate) -> u8 {
        Pio527Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio528Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio528Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio528Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio528Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio528Amena {
        Pio528Amena::from_bits(val)
    }
}
impl From<Pio528Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio528Amena) -> u8 {
        Pio528Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio528Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio528Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio528Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio528Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio528Fsel {
        Pio528Fsel::from_bits(val)
    }
}
impl From<Pio528Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio528Fsel) -> u8 {
        Pio528Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio528Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio528Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio528Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio528Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio528Fulldrive {
        Pio528Fulldrive::from_bits(val)
    }
}
impl From<Pio528Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio528Fulldrive) -> u8 {
        Pio528Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio528Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio528Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio528Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio528Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio528Ibena {
        Pio528Ibena::from_bits(val)
    }
}
impl From<Pio528Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio528Ibena) -> u8 {
        Pio528Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio528Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio528Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio528Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio528Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio528Iiena {
        Pio528Iiena::from_bits(val)
    }
}
impl From<Pio528Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio528Iiena) -> u8 {
        Pio528Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio528Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio528Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio528Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio528Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio528Odena {
        Pio528Odena::from_bits(val)
    }
}
impl From<Pio528Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio528Odena) -> u8 {
        Pio528Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio528Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio528Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio528Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio528Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio528Pupdena {
        Pio528Pupdena::from_bits(val)
    }
}
impl From<Pio528Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio528Pupdena) -> u8 {
        Pio528Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio528Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio528Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio528Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio528Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio528Pupdsel {
        Pio528Pupdsel::from_bits(val)
    }
}
impl From<Pio528Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio528Pupdsel) -> u8 {
        Pio528Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio528Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio528Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio528Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio528Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio528Slewrate {
        Pio528Slewrate::from_bits(val)
    }
}
impl From<Pio528Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio528Slewrate) -> u8 {
        Pio528Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio529Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio529Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio529Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio529Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio529Amena {
        Pio529Amena::from_bits(val)
    }
}
impl From<Pio529Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio529Amena) -> u8 {
        Pio529Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio529Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio529Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio529Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio529Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio529Fsel {
        Pio529Fsel::from_bits(val)
    }
}
impl From<Pio529Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio529Fsel) -> u8 {
        Pio529Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio529Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio529Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio529Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio529Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio529Fulldrive {
        Pio529Fulldrive::from_bits(val)
    }
}
impl From<Pio529Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio529Fulldrive) -> u8 {
        Pio529Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio529Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio529Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio529Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio529Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio529Ibena {
        Pio529Ibena::from_bits(val)
    }
}
impl From<Pio529Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio529Ibena) -> u8 {
        Pio529Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio529Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio529Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio529Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio529Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio529Iiena {
        Pio529Iiena::from_bits(val)
    }
}
impl From<Pio529Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio529Iiena) -> u8 {
        Pio529Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio529Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio529Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio529Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio529Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio529Odena {
        Pio529Odena::from_bits(val)
    }
}
impl From<Pio529Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio529Odena) -> u8 {
        Pio529Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio529Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio529Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio529Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio529Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio529Pupdena {
        Pio529Pupdena::from_bits(val)
    }
}
impl From<Pio529Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio529Pupdena) -> u8 {
        Pio529Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio529Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio529Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio529Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio529Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio529Pupdsel {
        Pio529Pupdsel::from_bits(val)
    }
}
impl From<Pio529Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio529Pupdsel) -> u8 {
        Pio529Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio529Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio529Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio529Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio529Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio529Slewrate {
        Pio529Slewrate::from_bits(val)
    }
}
impl From<Pio529Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio529Slewrate) -> u8 {
        Pio529Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio52Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio52Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio52Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio52Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio52Amena {
        Pio52Amena::from_bits(val)
    }
}
impl From<Pio52Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio52Amena) -> u8 {
        Pio52Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio52Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio52Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio52Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio52Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio52Fsel {
        Pio52Fsel::from_bits(val)
    }
}
impl From<Pio52Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio52Fsel) -> u8 {
        Pio52Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio52Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio52Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio52Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio52Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio52Fulldrive {
        Pio52Fulldrive::from_bits(val)
    }
}
impl From<Pio52Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio52Fulldrive) -> u8 {
        Pio52Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio52Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio52Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio52Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio52Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio52Ibena {
        Pio52Ibena::from_bits(val)
    }
}
impl From<Pio52Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio52Ibena) -> u8 {
        Pio52Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio52Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio52Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio52Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio52Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio52Iiena {
        Pio52Iiena::from_bits(val)
    }
}
impl From<Pio52Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio52Iiena) -> u8 {
        Pio52Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio52Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio52Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio52Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio52Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio52Odena {
        Pio52Odena::from_bits(val)
    }
}
impl From<Pio52Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio52Odena) -> u8 {
        Pio52Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio52Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio52Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio52Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio52Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio52Pupdena {
        Pio52Pupdena::from_bits(val)
    }
}
impl From<Pio52Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio52Pupdena) -> u8 {
        Pio52Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio52Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio52Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio52Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio52Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio52Pupdsel {
        Pio52Pupdsel::from_bits(val)
    }
}
impl From<Pio52Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio52Pupdsel) -> u8 {
        Pio52Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio52Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio52Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio52Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio52Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio52Slewrate {
        Pio52Slewrate::from_bits(val)
    }
}
impl From<Pio52Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio52Slewrate) -> u8 {
        Pio52Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio530Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio530Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio530Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio530Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio530Amena {
        Pio530Amena::from_bits(val)
    }
}
impl From<Pio530Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio530Amena) -> u8 {
        Pio530Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio530Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio530Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio530Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio530Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio530Fsel {
        Pio530Fsel::from_bits(val)
    }
}
impl From<Pio530Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio530Fsel) -> u8 {
        Pio530Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio530Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio530Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio530Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio530Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio530Fulldrive {
        Pio530Fulldrive::from_bits(val)
    }
}
impl From<Pio530Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio530Fulldrive) -> u8 {
        Pio530Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio530Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio530Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio530Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio530Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio530Ibena {
        Pio530Ibena::from_bits(val)
    }
}
impl From<Pio530Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio530Ibena) -> u8 {
        Pio530Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio530Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio530Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio530Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio530Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio530Iiena {
        Pio530Iiena::from_bits(val)
    }
}
impl From<Pio530Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio530Iiena) -> u8 {
        Pio530Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio530Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio530Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio530Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio530Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio530Odena {
        Pio530Odena::from_bits(val)
    }
}
impl From<Pio530Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio530Odena) -> u8 {
        Pio530Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio530Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio530Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio530Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio530Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio530Pupdena {
        Pio530Pupdena::from_bits(val)
    }
}
impl From<Pio530Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio530Pupdena) -> u8 {
        Pio530Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio530Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio530Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio530Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio530Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio530Pupdsel {
        Pio530Pupdsel::from_bits(val)
    }
}
impl From<Pio530Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio530Pupdsel) -> u8 {
        Pio530Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio530Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio530Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio530Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio530Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio530Slewrate {
        Pio530Slewrate::from_bits(val)
    }
}
impl From<Pio530Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio530Slewrate) -> u8 {
        Pio530Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio531Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio531Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio531Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio531Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio531Amena {
        Pio531Amena::from_bits(val)
    }
}
impl From<Pio531Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio531Amena) -> u8 {
        Pio531Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio531Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio531Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio531Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio531Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio531Fsel {
        Pio531Fsel::from_bits(val)
    }
}
impl From<Pio531Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio531Fsel) -> u8 {
        Pio531Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio531Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio531Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio531Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio531Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio531Fulldrive {
        Pio531Fulldrive::from_bits(val)
    }
}
impl From<Pio531Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio531Fulldrive) -> u8 {
        Pio531Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio531Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio531Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio531Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio531Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio531Ibena {
        Pio531Ibena::from_bits(val)
    }
}
impl From<Pio531Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio531Ibena) -> u8 {
        Pio531Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio531Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio531Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio531Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio531Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio531Iiena {
        Pio531Iiena::from_bits(val)
    }
}
impl From<Pio531Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio531Iiena) -> u8 {
        Pio531Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio531Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio531Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio531Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio531Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio531Odena {
        Pio531Odena::from_bits(val)
    }
}
impl From<Pio531Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio531Odena) -> u8 {
        Pio531Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio531Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio531Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio531Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio531Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio531Pupdena {
        Pio531Pupdena::from_bits(val)
    }
}
impl From<Pio531Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio531Pupdena) -> u8 {
        Pio531Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio531Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio531Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio531Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio531Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio531Pupdsel {
        Pio531Pupdsel::from_bits(val)
    }
}
impl From<Pio531Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio531Pupdsel) -> u8 {
        Pio531Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio531Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio531Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio531Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio531Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio531Slewrate {
        Pio531Slewrate::from_bits(val)
    }
}
impl From<Pio531Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio531Slewrate) -> u8 {
        Pio531Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio53Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio53Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio53Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio53Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio53Amena {
        Pio53Amena::from_bits(val)
    }
}
impl From<Pio53Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio53Amena) -> u8 {
        Pio53Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio53Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio53Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio53Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio53Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio53Fsel {
        Pio53Fsel::from_bits(val)
    }
}
impl From<Pio53Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio53Fsel) -> u8 {
        Pio53Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio53Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio53Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio53Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio53Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio53Fulldrive {
        Pio53Fulldrive::from_bits(val)
    }
}
impl From<Pio53Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio53Fulldrive) -> u8 {
        Pio53Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio53Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio53Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio53Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio53Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio53Ibena {
        Pio53Ibena::from_bits(val)
    }
}
impl From<Pio53Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio53Ibena) -> u8 {
        Pio53Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio53Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio53Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio53Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio53Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio53Iiena {
        Pio53Iiena::from_bits(val)
    }
}
impl From<Pio53Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio53Iiena) -> u8 {
        Pio53Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio53Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio53Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio53Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio53Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio53Odena {
        Pio53Odena::from_bits(val)
    }
}
impl From<Pio53Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio53Odena) -> u8 {
        Pio53Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio53Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio53Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio53Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio53Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio53Pupdena {
        Pio53Pupdena::from_bits(val)
    }
}
impl From<Pio53Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio53Pupdena) -> u8 {
        Pio53Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio53Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio53Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio53Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio53Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio53Pupdsel {
        Pio53Pupdsel::from_bits(val)
    }
}
impl From<Pio53Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio53Pupdsel) -> u8 {
        Pio53Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio53Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio53Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio53Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio53Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio53Slewrate {
        Pio53Slewrate::from_bits(val)
    }
}
impl From<Pio53Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio53Slewrate) -> u8 {
        Pio53Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio54Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio54Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio54Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio54Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio54Amena {
        Pio54Amena::from_bits(val)
    }
}
impl From<Pio54Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio54Amena) -> u8 {
        Pio54Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio54Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio54Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio54Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio54Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio54Fsel {
        Pio54Fsel::from_bits(val)
    }
}
impl From<Pio54Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio54Fsel) -> u8 {
        Pio54Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio54Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio54Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio54Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio54Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio54Fulldrive {
        Pio54Fulldrive::from_bits(val)
    }
}
impl From<Pio54Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio54Fulldrive) -> u8 {
        Pio54Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio54Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio54Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio54Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio54Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio54Ibena {
        Pio54Ibena::from_bits(val)
    }
}
impl From<Pio54Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio54Ibena) -> u8 {
        Pio54Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio54Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio54Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio54Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio54Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio54Iiena {
        Pio54Iiena::from_bits(val)
    }
}
impl From<Pio54Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio54Iiena) -> u8 {
        Pio54Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio54Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio54Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio54Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio54Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio54Odena {
        Pio54Odena::from_bits(val)
    }
}
impl From<Pio54Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio54Odena) -> u8 {
        Pio54Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio54Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio54Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio54Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio54Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio54Pupdena {
        Pio54Pupdena::from_bits(val)
    }
}
impl From<Pio54Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio54Pupdena) -> u8 {
        Pio54Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio54Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio54Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio54Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio54Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio54Pupdsel {
        Pio54Pupdsel::from_bits(val)
    }
}
impl From<Pio54Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio54Pupdsel) -> u8 {
        Pio54Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio54Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio54Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio54Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio54Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio54Slewrate {
        Pio54Slewrate::from_bits(val)
    }
}
impl From<Pio54Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio54Slewrate) -> u8 {
        Pio54Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio55Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio55Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio55Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio55Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio55Amena {
        Pio55Amena::from_bits(val)
    }
}
impl From<Pio55Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio55Amena) -> u8 {
        Pio55Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio55Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio55Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio55Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio55Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio55Fsel {
        Pio55Fsel::from_bits(val)
    }
}
impl From<Pio55Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio55Fsel) -> u8 {
        Pio55Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio55Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio55Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio55Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio55Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio55Fulldrive {
        Pio55Fulldrive::from_bits(val)
    }
}
impl From<Pio55Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio55Fulldrive) -> u8 {
        Pio55Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio55Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio55Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio55Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio55Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio55Ibena {
        Pio55Ibena::from_bits(val)
    }
}
impl From<Pio55Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio55Ibena) -> u8 {
        Pio55Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio55Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio55Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio55Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio55Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio55Iiena {
        Pio55Iiena::from_bits(val)
    }
}
impl From<Pio55Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio55Iiena) -> u8 {
        Pio55Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio55Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio55Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio55Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio55Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio55Odena {
        Pio55Odena::from_bits(val)
    }
}
impl From<Pio55Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio55Odena) -> u8 {
        Pio55Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio55Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio55Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio55Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio55Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio55Pupdena {
        Pio55Pupdena::from_bits(val)
    }
}
impl From<Pio55Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio55Pupdena) -> u8 {
        Pio55Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio55Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio55Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio55Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio55Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio55Pupdsel {
        Pio55Pupdsel::from_bits(val)
    }
}
impl From<Pio55Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio55Pupdsel) -> u8 {
        Pio55Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio55Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio55Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio55Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio55Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio55Slewrate {
        Pio55Slewrate::from_bits(val)
    }
}
impl From<Pio55Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio55Slewrate) -> u8 {
        Pio55Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio56Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio56Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio56Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio56Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio56Amena {
        Pio56Amena::from_bits(val)
    }
}
impl From<Pio56Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio56Amena) -> u8 {
        Pio56Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio56Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio56Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio56Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio56Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio56Fsel {
        Pio56Fsel::from_bits(val)
    }
}
impl From<Pio56Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio56Fsel) -> u8 {
        Pio56Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio56Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio56Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio56Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio56Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio56Fulldrive {
        Pio56Fulldrive::from_bits(val)
    }
}
impl From<Pio56Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio56Fulldrive) -> u8 {
        Pio56Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio56Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio56Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio56Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio56Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio56Ibena {
        Pio56Ibena::from_bits(val)
    }
}
impl From<Pio56Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio56Ibena) -> u8 {
        Pio56Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio56Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio56Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio56Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio56Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio56Iiena {
        Pio56Iiena::from_bits(val)
    }
}
impl From<Pio56Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio56Iiena) -> u8 {
        Pio56Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio56Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio56Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio56Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio56Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio56Odena {
        Pio56Odena::from_bits(val)
    }
}
impl From<Pio56Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio56Odena) -> u8 {
        Pio56Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio56Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio56Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio56Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio56Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio56Pupdena {
        Pio56Pupdena::from_bits(val)
    }
}
impl From<Pio56Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio56Pupdena) -> u8 {
        Pio56Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio56Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio56Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio56Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio56Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio56Pupdsel {
        Pio56Pupdsel::from_bits(val)
    }
}
impl From<Pio56Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio56Pupdsel) -> u8 {
        Pio56Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio56Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio56Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio56Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio56Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio56Slewrate {
        Pio56Slewrate::from_bits(val)
    }
}
impl From<Pio56Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio56Slewrate) -> u8 {
        Pio56Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio57Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio57Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio57Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio57Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio57Amena {
        Pio57Amena::from_bits(val)
    }
}
impl From<Pio57Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio57Amena) -> u8 {
        Pio57Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio57Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio57Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio57Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio57Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio57Fsel {
        Pio57Fsel::from_bits(val)
    }
}
impl From<Pio57Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio57Fsel) -> u8 {
        Pio57Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio57Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio57Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio57Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio57Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio57Fulldrive {
        Pio57Fulldrive::from_bits(val)
    }
}
impl From<Pio57Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio57Fulldrive) -> u8 {
        Pio57Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio57Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio57Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio57Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio57Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio57Ibena {
        Pio57Ibena::from_bits(val)
    }
}
impl From<Pio57Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio57Ibena) -> u8 {
        Pio57Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio57Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio57Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio57Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio57Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio57Iiena {
        Pio57Iiena::from_bits(val)
    }
}
impl From<Pio57Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio57Iiena) -> u8 {
        Pio57Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio57Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio57Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio57Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio57Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio57Odena {
        Pio57Odena::from_bits(val)
    }
}
impl From<Pio57Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio57Odena) -> u8 {
        Pio57Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio57Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio57Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio57Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio57Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio57Pupdena {
        Pio57Pupdena::from_bits(val)
    }
}
impl From<Pio57Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio57Pupdena) -> u8 {
        Pio57Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio57Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio57Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio57Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio57Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio57Pupdsel {
        Pio57Pupdsel::from_bits(val)
    }
}
impl From<Pio57Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio57Pupdsel) -> u8 {
        Pio57Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio57Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio57Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio57Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio57Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio57Slewrate {
        Pio57Slewrate::from_bits(val)
    }
}
impl From<Pio57Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio57Slewrate) -> u8 {
        Pio57Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio58Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio58Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio58Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio58Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio58Amena {
        Pio58Amena::from_bits(val)
    }
}
impl From<Pio58Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio58Amena) -> u8 {
        Pio58Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio58Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio58Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio58Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio58Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio58Fsel {
        Pio58Fsel::from_bits(val)
    }
}
impl From<Pio58Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio58Fsel) -> u8 {
        Pio58Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio58Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio58Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio58Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio58Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio58Fulldrive {
        Pio58Fulldrive::from_bits(val)
    }
}
impl From<Pio58Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio58Fulldrive) -> u8 {
        Pio58Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio58Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio58Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio58Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio58Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio58Ibena {
        Pio58Ibena::from_bits(val)
    }
}
impl From<Pio58Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio58Ibena) -> u8 {
        Pio58Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio58Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio58Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio58Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio58Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio58Iiena {
        Pio58Iiena::from_bits(val)
    }
}
impl From<Pio58Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio58Iiena) -> u8 {
        Pio58Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio58Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio58Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio58Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio58Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio58Odena {
        Pio58Odena::from_bits(val)
    }
}
impl From<Pio58Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio58Odena) -> u8 {
        Pio58Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio58Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio58Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio58Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio58Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio58Pupdena {
        Pio58Pupdena::from_bits(val)
    }
}
impl From<Pio58Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio58Pupdena) -> u8 {
        Pio58Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio58Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio58Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio58Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio58Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio58Pupdsel {
        Pio58Pupdsel::from_bits(val)
    }
}
impl From<Pio58Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio58Pupdsel) -> u8 {
        Pio58Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio58Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio58Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio58Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio58Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio58Slewrate {
        Pio58Slewrate::from_bits(val)
    }
}
impl From<Pio58Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio58Slewrate) -> u8 {
        Pio58Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio59Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio59Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio59Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio59Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio59Amena {
        Pio59Amena::from_bits(val)
    }
}
impl From<Pio59Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio59Amena) -> u8 {
        Pio59Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio59Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio59Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio59Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio59Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio59Fsel {
        Pio59Fsel::from_bits(val)
    }
}
impl From<Pio59Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio59Fsel) -> u8 {
        Pio59Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio59Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio59Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio59Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio59Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio59Fulldrive {
        Pio59Fulldrive::from_bits(val)
    }
}
impl From<Pio59Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio59Fulldrive) -> u8 {
        Pio59Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio59Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio59Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio59Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio59Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio59Ibena {
        Pio59Ibena::from_bits(val)
    }
}
impl From<Pio59Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio59Ibena) -> u8 {
        Pio59Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio59Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio59Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio59Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio59Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio59Iiena {
        Pio59Iiena::from_bits(val)
    }
}
impl From<Pio59Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio59Iiena) -> u8 {
        Pio59Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio59Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio59Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio59Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio59Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio59Odena {
        Pio59Odena::from_bits(val)
    }
}
impl From<Pio59Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio59Odena) -> u8 {
        Pio59Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio59Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio59Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio59Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio59Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio59Pupdena {
        Pio59Pupdena::from_bits(val)
    }
}
impl From<Pio59Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio59Pupdena) -> u8 {
        Pio59Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio59Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio59Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio59Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio59Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio59Pupdsel {
        Pio59Pupdsel::from_bits(val)
    }
}
impl From<Pio59Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio59Pupdsel) -> u8 {
        Pio59Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio59Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio59Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio59Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio59Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio59Slewrate {
        Pio59Slewrate::from_bits(val)
    }
}
impl From<Pio59Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio59Slewrate) -> u8 {
        Pio59Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio60Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio60Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio60Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio60Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio60Amena {
        Pio60Amena::from_bits(val)
    }
}
impl From<Pio60Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio60Amena) -> u8 {
        Pio60Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio60Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio60Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio60Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio60Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio60Fsel {
        Pio60Fsel::from_bits(val)
    }
}
impl From<Pio60Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio60Fsel) -> u8 {
        Pio60Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio60Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio60Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio60Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio60Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio60Fulldrive {
        Pio60Fulldrive::from_bits(val)
    }
}
impl From<Pio60Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio60Fulldrive) -> u8 {
        Pio60Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio60Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio60Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio60Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio60Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio60Ibena {
        Pio60Ibena::from_bits(val)
    }
}
impl From<Pio60Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio60Ibena) -> u8 {
        Pio60Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio60Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio60Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio60Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio60Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio60Iiena {
        Pio60Iiena::from_bits(val)
    }
}
impl From<Pio60Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio60Iiena) -> u8 {
        Pio60Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio60Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio60Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio60Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio60Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio60Odena {
        Pio60Odena::from_bits(val)
    }
}
impl From<Pio60Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio60Odena) -> u8 {
        Pio60Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio60Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio60Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio60Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio60Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio60Pupdena {
        Pio60Pupdena::from_bits(val)
    }
}
impl From<Pio60Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio60Pupdena) -> u8 {
        Pio60Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio60Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio60Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio60Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio60Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio60Pupdsel {
        Pio60Pupdsel::from_bits(val)
    }
}
impl From<Pio60Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio60Pupdsel) -> u8 {
        Pio60Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio60Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio60Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio60Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio60Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio60Slewrate {
        Pio60Slewrate::from_bits(val)
    }
}
impl From<Pio60Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio60Slewrate) -> u8 {
        Pio60Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio610Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio610Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio610Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio610Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio610Amena {
        Pio610Amena::from_bits(val)
    }
}
impl From<Pio610Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio610Amena) -> u8 {
        Pio610Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio610Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio610Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio610Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio610Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio610Fsel {
        Pio610Fsel::from_bits(val)
    }
}
impl From<Pio610Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio610Fsel) -> u8 {
        Pio610Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio610Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio610Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio610Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio610Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio610Fulldrive {
        Pio610Fulldrive::from_bits(val)
    }
}
impl From<Pio610Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio610Fulldrive) -> u8 {
        Pio610Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio610Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio610Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio610Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio610Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio610Ibena {
        Pio610Ibena::from_bits(val)
    }
}
impl From<Pio610Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio610Ibena) -> u8 {
        Pio610Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio610Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio610Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio610Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio610Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio610Iiena {
        Pio610Iiena::from_bits(val)
    }
}
impl From<Pio610Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio610Iiena) -> u8 {
        Pio610Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio610Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio610Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio610Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio610Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio610Odena {
        Pio610Odena::from_bits(val)
    }
}
impl From<Pio610Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio610Odena) -> u8 {
        Pio610Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio610Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio610Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio610Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio610Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio610Pupdena {
        Pio610Pupdena::from_bits(val)
    }
}
impl From<Pio610Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio610Pupdena) -> u8 {
        Pio610Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio610Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio610Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio610Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio610Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio610Pupdsel {
        Pio610Pupdsel::from_bits(val)
    }
}
impl From<Pio610Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio610Pupdsel) -> u8 {
        Pio610Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio610Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio610Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio610Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio610Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio610Slewrate {
        Pio610Slewrate::from_bits(val)
    }
}
impl From<Pio610Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio610Slewrate) -> u8 {
        Pio610Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio611Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio611Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio611Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio611Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio611Amena {
        Pio611Amena::from_bits(val)
    }
}
impl From<Pio611Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio611Amena) -> u8 {
        Pio611Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio611Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio611Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio611Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio611Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio611Fsel {
        Pio611Fsel::from_bits(val)
    }
}
impl From<Pio611Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio611Fsel) -> u8 {
        Pio611Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio611Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio611Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio611Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio611Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio611Fulldrive {
        Pio611Fulldrive::from_bits(val)
    }
}
impl From<Pio611Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio611Fulldrive) -> u8 {
        Pio611Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio611Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio611Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio611Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio611Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio611Ibena {
        Pio611Ibena::from_bits(val)
    }
}
impl From<Pio611Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio611Ibena) -> u8 {
        Pio611Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio611Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio611Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio611Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio611Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio611Iiena {
        Pio611Iiena::from_bits(val)
    }
}
impl From<Pio611Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio611Iiena) -> u8 {
        Pio611Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio611Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio611Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio611Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio611Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio611Odena {
        Pio611Odena::from_bits(val)
    }
}
impl From<Pio611Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio611Odena) -> u8 {
        Pio611Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio611Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio611Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio611Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio611Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio611Pupdena {
        Pio611Pupdena::from_bits(val)
    }
}
impl From<Pio611Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio611Pupdena) -> u8 {
        Pio611Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio611Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio611Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio611Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio611Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio611Pupdsel {
        Pio611Pupdsel::from_bits(val)
    }
}
impl From<Pio611Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio611Pupdsel) -> u8 {
        Pio611Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio611Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio611Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio611Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio611Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio611Slewrate {
        Pio611Slewrate::from_bits(val)
    }
}
impl From<Pio611Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio611Slewrate) -> u8 {
        Pio611Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio612Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio612Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio612Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio612Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio612Amena {
        Pio612Amena::from_bits(val)
    }
}
impl From<Pio612Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio612Amena) -> u8 {
        Pio612Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio612Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio612Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio612Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio612Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio612Fsel {
        Pio612Fsel::from_bits(val)
    }
}
impl From<Pio612Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio612Fsel) -> u8 {
        Pio612Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio612Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio612Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio612Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio612Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio612Fulldrive {
        Pio612Fulldrive::from_bits(val)
    }
}
impl From<Pio612Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio612Fulldrive) -> u8 {
        Pio612Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio612Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio612Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio612Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio612Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio612Ibena {
        Pio612Ibena::from_bits(val)
    }
}
impl From<Pio612Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio612Ibena) -> u8 {
        Pio612Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio612Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio612Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio612Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio612Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio612Iiena {
        Pio612Iiena::from_bits(val)
    }
}
impl From<Pio612Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio612Iiena) -> u8 {
        Pio612Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio612Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio612Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio612Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio612Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio612Odena {
        Pio612Odena::from_bits(val)
    }
}
impl From<Pio612Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio612Odena) -> u8 {
        Pio612Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio612Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio612Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio612Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio612Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio612Pupdena {
        Pio612Pupdena::from_bits(val)
    }
}
impl From<Pio612Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio612Pupdena) -> u8 {
        Pio612Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio612Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio612Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio612Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio612Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio612Pupdsel {
        Pio612Pupdsel::from_bits(val)
    }
}
impl From<Pio612Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio612Pupdsel) -> u8 {
        Pio612Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio612Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio612Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio612Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio612Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio612Slewrate {
        Pio612Slewrate::from_bits(val)
    }
}
impl From<Pio612Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio612Slewrate) -> u8 {
        Pio612Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio613Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio613Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio613Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio613Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio613Amena {
        Pio613Amena::from_bits(val)
    }
}
impl From<Pio613Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio613Amena) -> u8 {
        Pio613Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio613Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio613Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio613Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio613Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio613Fsel {
        Pio613Fsel::from_bits(val)
    }
}
impl From<Pio613Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio613Fsel) -> u8 {
        Pio613Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio613Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio613Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio613Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio613Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio613Fulldrive {
        Pio613Fulldrive::from_bits(val)
    }
}
impl From<Pio613Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio613Fulldrive) -> u8 {
        Pio613Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio613Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio613Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio613Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio613Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio613Ibena {
        Pio613Ibena::from_bits(val)
    }
}
impl From<Pio613Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio613Ibena) -> u8 {
        Pio613Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio613Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio613Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio613Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio613Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio613Iiena {
        Pio613Iiena::from_bits(val)
    }
}
impl From<Pio613Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio613Iiena) -> u8 {
        Pio613Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio613Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio613Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio613Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio613Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio613Odena {
        Pio613Odena::from_bits(val)
    }
}
impl From<Pio613Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio613Odena) -> u8 {
        Pio613Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio613Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio613Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio613Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio613Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio613Pupdena {
        Pio613Pupdena::from_bits(val)
    }
}
impl From<Pio613Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio613Pupdena) -> u8 {
        Pio613Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio613Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio613Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio613Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio613Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio613Pupdsel {
        Pio613Pupdsel::from_bits(val)
    }
}
impl From<Pio613Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio613Pupdsel) -> u8 {
        Pio613Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio613Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio613Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio613Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio613Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio613Slewrate {
        Pio613Slewrate::from_bits(val)
    }
}
impl From<Pio613Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio613Slewrate) -> u8 {
        Pio613Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio614Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio614Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio614Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio614Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio614Amena {
        Pio614Amena::from_bits(val)
    }
}
impl From<Pio614Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio614Amena) -> u8 {
        Pio614Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio614Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio614Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio614Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio614Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio614Fsel {
        Pio614Fsel::from_bits(val)
    }
}
impl From<Pio614Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio614Fsel) -> u8 {
        Pio614Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio614Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio614Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio614Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio614Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio614Fulldrive {
        Pio614Fulldrive::from_bits(val)
    }
}
impl From<Pio614Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio614Fulldrive) -> u8 {
        Pio614Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio614Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio614Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio614Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio614Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio614Ibena {
        Pio614Ibena::from_bits(val)
    }
}
impl From<Pio614Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio614Ibena) -> u8 {
        Pio614Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio614Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio614Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio614Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio614Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio614Iiena {
        Pio614Iiena::from_bits(val)
    }
}
impl From<Pio614Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio614Iiena) -> u8 {
        Pio614Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio614Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio614Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio614Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio614Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio614Odena {
        Pio614Odena::from_bits(val)
    }
}
impl From<Pio614Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio614Odena) -> u8 {
        Pio614Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio614Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio614Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio614Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio614Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio614Pupdena {
        Pio614Pupdena::from_bits(val)
    }
}
impl From<Pio614Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio614Pupdena) -> u8 {
        Pio614Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio614Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio614Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio614Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio614Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio614Pupdsel {
        Pio614Pupdsel::from_bits(val)
    }
}
impl From<Pio614Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio614Pupdsel) -> u8 {
        Pio614Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio614Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio614Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio614Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio614Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio614Slewrate {
        Pio614Slewrate::from_bits(val)
    }
}
impl From<Pio614Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio614Slewrate) -> u8 {
        Pio614Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio615Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio615Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio615Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio615Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio615Amena {
        Pio615Amena::from_bits(val)
    }
}
impl From<Pio615Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio615Amena) -> u8 {
        Pio615Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio615Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio615Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio615Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio615Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio615Fsel {
        Pio615Fsel::from_bits(val)
    }
}
impl From<Pio615Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio615Fsel) -> u8 {
        Pio615Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio615Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio615Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio615Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio615Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio615Fulldrive {
        Pio615Fulldrive::from_bits(val)
    }
}
impl From<Pio615Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio615Fulldrive) -> u8 {
        Pio615Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio615Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio615Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio615Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio615Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio615Ibena {
        Pio615Ibena::from_bits(val)
    }
}
impl From<Pio615Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio615Ibena) -> u8 {
        Pio615Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio615Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio615Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio615Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio615Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio615Iiena {
        Pio615Iiena::from_bits(val)
    }
}
impl From<Pio615Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio615Iiena) -> u8 {
        Pio615Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio615Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio615Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio615Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio615Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio615Odena {
        Pio615Odena::from_bits(val)
    }
}
impl From<Pio615Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio615Odena) -> u8 {
        Pio615Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio615Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio615Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio615Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio615Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio615Pupdena {
        Pio615Pupdena::from_bits(val)
    }
}
impl From<Pio615Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio615Pupdena) -> u8 {
        Pio615Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio615Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio615Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio615Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio615Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio615Pupdsel {
        Pio615Pupdsel::from_bits(val)
    }
}
impl From<Pio615Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio615Pupdsel) -> u8 {
        Pio615Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio615Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio615Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio615Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio615Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio615Slewrate {
        Pio615Slewrate::from_bits(val)
    }
}
impl From<Pio615Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio615Slewrate) -> u8 {
        Pio615Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio616Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio616Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio616Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio616Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio616Amena {
        Pio616Amena::from_bits(val)
    }
}
impl From<Pio616Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio616Amena) -> u8 {
        Pio616Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio616Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio616Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio616Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio616Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio616Fsel {
        Pio616Fsel::from_bits(val)
    }
}
impl From<Pio616Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio616Fsel) -> u8 {
        Pio616Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio616Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio616Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio616Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio616Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio616Fulldrive {
        Pio616Fulldrive::from_bits(val)
    }
}
impl From<Pio616Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio616Fulldrive) -> u8 {
        Pio616Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio616Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio616Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio616Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio616Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio616Ibena {
        Pio616Ibena::from_bits(val)
    }
}
impl From<Pio616Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio616Ibena) -> u8 {
        Pio616Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio616Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio616Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio616Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio616Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio616Iiena {
        Pio616Iiena::from_bits(val)
    }
}
impl From<Pio616Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio616Iiena) -> u8 {
        Pio616Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio616Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio616Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio616Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio616Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio616Odena {
        Pio616Odena::from_bits(val)
    }
}
impl From<Pio616Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio616Odena) -> u8 {
        Pio616Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio616Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio616Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio616Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio616Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio616Pupdena {
        Pio616Pupdena::from_bits(val)
    }
}
impl From<Pio616Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio616Pupdena) -> u8 {
        Pio616Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio616Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio616Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio616Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio616Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio616Pupdsel {
        Pio616Pupdsel::from_bits(val)
    }
}
impl From<Pio616Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio616Pupdsel) -> u8 {
        Pio616Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio616Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio616Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio616Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio616Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio616Slewrate {
        Pio616Slewrate::from_bits(val)
    }
}
impl From<Pio616Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio616Slewrate) -> u8 {
        Pio616Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio617Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio617Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio617Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio617Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio617Amena {
        Pio617Amena::from_bits(val)
    }
}
impl From<Pio617Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio617Amena) -> u8 {
        Pio617Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio617Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio617Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio617Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio617Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio617Fsel {
        Pio617Fsel::from_bits(val)
    }
}
impl From<Pio617Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio617Fsel) -> u8 {
        Pio617Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio617Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio617Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio617Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio617Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio617Fulldrive {
        Pio617Fulldrive::from_bits(val)
    }
}
impl From<Pio617Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio617Fulldrive) -> u8 {
        Pio617Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio617Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio617Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio617Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio617Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio617Ibena {
        Pio617Ibena::from_bits(val)
    }
}
impl From<Pio617Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio617Ibena) -> u8 {
        Pio617Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio617Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio617Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio617Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio617Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio617Iiena {
        Pio617Iiena::from_bits(val)
    }
}
impl From<Pio617Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio617Iiena) -> u8 {
        Pio617Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio617Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio617Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio617Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio617Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio617Odena {
        Pio617Odena::from_bits(val)
    }
}
impl From<Pio617Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio617Odena) -> u8 {
        Pio617Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio617Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio617Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio617Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio617Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio617Pupdena {
        Pio617Pupdena::from_bits(val)
    }
}
impl From<Pio617Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio617Pupdena) -> u8 {
        Pio617Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio617Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio617Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio617Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio617Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio617Pupdsel {
        Pio617Pupdsel::from_bits(val)
    }
}
impl From<Pio617Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio617Pupdsel) -> u8 {
        Pio617Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio617Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio617Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio617Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio617Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio617Slewrate {
        Pio617Slewrate::from_bits(val)
    }
}
impl From<Pio617Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio617Slewrate) -> u8 {
        Pio617Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio618Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio618Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio618Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio618Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio618Amena {
        Pio618Amena::from_bits(val)
    }
}
impl From<Pio618Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio618Amena) -> u8 {
        Pio618Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio618Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio618Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio618Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio618Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio618Fsel {
        Pio618Fsel::from_bits(val)
    }
}
impl From<Pio618Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio618Fsel) -> u8 {
        Pio618Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio618Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio618Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio618Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio618Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio618Fulldrive {
        Pio618Fulldrive::from_bits(val)
    }
}
impl From<Pio618Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio618Fulldrive) -> u8 {
        Pio618Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio618Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio618Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio618Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio618Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio618Ibena {
        Pio618Ibena::from_bits(val)
    }
}
impl From<Pio618Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio618Ibena) -> u8 {
        Pio618Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio618Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio618Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio618Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio618Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio618Iiena {
        Pio618Iiena::from_bits(val)
    }
}
impl From<Pio618Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio618Iiena) -> u8 {
        Pio618Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio618Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio618Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio618Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio618Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio618Odena {
        Pio618Odena::from_bits(val)
    }
}
impl From<Pio618Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio618Odena) -> u8 {
        Pio618Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio618Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio618Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio618Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio618Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio618Pupdena {
        Pio618Pupdena::from_bits(val)
    }
}
impl From<Pio618Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio618Pupdena) -> u8 {
        Pio618Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio618Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio618Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio618Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio618Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio618Pupdsel {
        Pio618Pupdsel::from_bits(val)
    }
}
impl From<Pio618Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio618Pupdsel) -> u8 {
        Pio618Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio618Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio618Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio618Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio618Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio618Slewrate {
        Pio618Slewrate::from_bits(val)
    }
}
impl From<Pio618Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio618Slewrate) -> u8 {
        Pio618Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio619Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio619Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio619Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio619Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio619Amena {
        Pio619Amena::from_bits(val)
    }
}
impl From<Pio619Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio619Amena) -> u8 {
        Pio619Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio619Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio619Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio619Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio619Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio619Fsel {
        Pio619Fsel::from_bits(val)
    }
}
impl From<Pio619Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio619Fsel) -> u8 {
        Pio619Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio619Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio619Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio619Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio619Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio619Fulldrive {
        Pio619Fulldrive::from_bits(val)
    }
}
impl From<Pio619Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio619Fulldrive) -> u8 {
        Pio619Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio619Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio619Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio619Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio619Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio619Ibena {
        Pio619Ibena::from_bits(val)
    }
}
impl From<Pio619Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio619Ibena) -> u8 {
        Pio619Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio619Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio619Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio619Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio619Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio619Iiena {
        Pio619Iiena::from_bits(val)
    }
}
impl From<Pio619Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio619Iiena) -> u8 {
        Pio619Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio619Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio619Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio619Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio619Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio619Odena {
        Pio619Odena::from_bits(val)
    }
}
impl From<Pio619Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio619Odena) -> u8 {
        Pio619Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio619Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio619Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio619Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio619Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio619Pupdena {
        Pio619Pupdena::from_bits(val)
    }
}
impl From<Pio619Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio619Pupdena) -> u8 {
        Pio619Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio619Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio619Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio619Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio619Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio619Pupdsel {
        Pio619Pupdsel::from_bits(val)
    }
}
impl From<Pio619Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio619Pupdsel) -> u8 {
        Pio619Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio619Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio619Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio619Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio619Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio619Slewrate {
        Pio619Slewrate::from_bits(val)
    }
}
impl From<Pio619Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio619Slewrate) -> u8 {
        Pio619Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio61Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio61Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio61Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio61Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio61Amena {
        Pio61Amena::from_bits(val)
    }
}
impl From<Pio61Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio61Amena) -> u8 {
        Pio61Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio61Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio61Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio61Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio61Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio61Fsel {
        Pio61Fsel::from_bits(val)
    }
}
impl From<Pio61Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio61Fsel) -> u8 {
        Pio61Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio61Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio61Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio61Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio61Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio61Fulldrive {
        Pio61Fulldrive::from_bits(val)
    }
}
impl From<Pio61Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio61Fulldrive) -> u8 {
        Pio61Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio61Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio61Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio61Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio61Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio61Ibena {
        Pio61Ibena::from_bits(val)
    }
}
impl From<Pio61Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio61Ibena) -> u8 {
        Pio61Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio61Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio61Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio61Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio61Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio61Iiena {
        Pio61Iiena::from_bits(val)
    }
}
impl From<Pio61Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio61Iiena) -> u8 {
        Pio61Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio61Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio61Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio61Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio61Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio61Odena {
        Pio61Odena::from_bits(val)
    }
}
impl From<Pio61Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio61Odena) -> u8 {
        Pio61Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio61Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio61Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio61Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio61Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio61Pupdena {
        Pio61Pupdena::from_bits(val)
    }
}
impl From<Pio61Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio61Pupdena) -> u8 {
        Pio61Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio61Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio61Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio61Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio61Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio61Pupdsel {
        Pio61Pupdsel::from_bits(val)
    }
}
impl From<Pio61Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio61Pupdsel) -> u8 {
        Pio61Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio61Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio61Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio61Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio61Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio61Slewrate {
        Pio61Slewrate::from_bits(val)
    }
}
impl From<Pio61Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio61Slewrate) -> u8 {
        Pio61Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio620Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio620Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio620Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio620Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio620Amena {
        Pio620Amena::from_bits(val)
    }
}
impl From<Pio620Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio620Amena) -> u8 {
        Pio620Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio620Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio620Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio620Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio620Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio620Fsel {
        Pio620Fsel::from_bits(val)
    }
}
impl From<Pio620Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio620Fsel) -> u8 {
        Pio620Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio620Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio620Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio620Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio620Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio620Fulldrive {
        Pio620Fulldrive::from_bits(val)
    }
}
impl From<Pio620Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio620Fulldrive) -> u8 {
        Pio620Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio620Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio620Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio620Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio620Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio620Ibena {
        Pio620Ibena::from_bits(val)
    }
}
impl From<Pio620Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio620Ibena) -> u8 {
        Pio620Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio620Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio620Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio620Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio620Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio620Iiena {
        Pio620Iiena::from_bits(val)
    }
}
impl From<Pio620Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio620Iiena) -> u8 {
        Pio620Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio620Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio620Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio620Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio620Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio620Odena {
        Pio620Odena::from_bits(val)
    }
}
impl From<Pio620Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio620Odena) -> u8 {
        Pio620Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio620Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio620Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio620Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio620Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio620Pupdena {
        Pio620Pupdena::from_bits(val)
    }
}
impl From<Pio620Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio620Pupdena) -> u8 {
        Pio620Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio620Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio620Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio620Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio620Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio620Pupdsel {
        Pio620Pupdsel::from_bits(val)
    }
}
impl From<Pio620Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio620Pupdsel) -> u8 {
        Pio620Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio620Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio620Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio620Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio620Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio620Slewrate {
        Pio620Slewrate::from_bits(val)
    }
}
impl From<Pio620Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio620Slewrate) -> u8 {
        Pio620Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio621Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio621Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio621Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio621Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio621Amena {
        Pio621Amena::from_bits(val)
    }
}
impl From<Pio621Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio621Amena) -> u8 {
        Pio621Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio621Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio621Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio621Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio621Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio621Fsel {
        Pio621Fsel::from_bits(val)
    }
}
impl From<Pio621Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio621Fsel) -> u8 {
        Pio621Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio621Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio621Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio621Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio621Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio621Fulldrive {
        Pio621Fulldrive::from_bits(val)
    }
}
impl From<Pio621Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio621Fulldrive) -> u8 {
        Pio621Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio621Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio621Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio621Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio621Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio621Ibena {
        Pio621Ibena::from_bits(val)
    }
}
impl From<Pio621Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio621Ibena) -> u8 {
        Pio621Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio621Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio621Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio621Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio621Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio621Iiena {
        Pio621Iiena::from_bits(val)
    }
}
impl From<Pio621Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio621Iiena) -> u8 {
        Pio621Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio621Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio621Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio621Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio621Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio621Odena {
        Pio621Odena::from_bits(val)
    }
}
impl From<Pio621Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio621Odena) -> u8 {
        Pio621Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio621Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio621Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio621Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio621Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio621Pupdena {
        Pio621Pupdena::from_bits(val)
    }
}
impl From<Pio621Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio621Pupdena) -> u8 {
        Pio621Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio621Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio621Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio621Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio621Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio621Pupdsel {
        Pio621Pupdsel::from_bits(val)
    }
}
impl From<Pio621Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio621Pupdsel) -> u8 {
        Pio621Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio621Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio621Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio621Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio621Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio621Slewrate {
        Pio621Slewrate::from_bits(val)
    }
}
impl From<Pio621Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio621Slewrate) -> u8 {
        Pio621Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio622Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio622Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio622Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio622Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio622Amena {
        Pio622Amena::from_bits(val)
    }
}
impl From<Pio622Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio622Amena) -> u8 {
        Pio622Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio622Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio622Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio622Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio622Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio622Fsel {
        Pio622Fsel::from_bits(val)
    }
}
impl From<Pio622Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio622Fsel) -> u8 {
        Pio622Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio622Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio622Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio622Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio622Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio622Fulldrive {
        Pio622Fulldrive::from_bits(val)
    }
}
impl From<Pio622Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio622Fulldrive) -> u8 {
        Pio622Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio622Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio622Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio622Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio622Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio622Ibena {
        Pio622Ibena::from_bits(val)
    }
}
impl From<Pio622Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio622Ibena) -> u8 {
        Pio622Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio622Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio622Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio622Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio622Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio622Iiena {
        Pio622Iiena::from_bits(val)
    }
}
impl From<Pio622Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio622Iiena) -> u8 {
        Pio622Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio622Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio622Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio622Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio622Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio622Odena {
        Pio622Odena::from_bits(val)
    }
}
impl From<Pio622Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio622Odena) -> u8 {
        Pio622Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio622Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio622Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio622Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio622Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio622Pupdena {
        Pio622Pupdena::from_bits(val)
    }
}
impl From<Pio622Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio622Pupdena) -> u8 {
        Pio622Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio622Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio622Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio622Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio622Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio622Pupdsel {
        Pio622Pupdsel::from_bits(val)
    }
}
impl From<Pio622Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio622Pupdsel) -> u8 {
        Pio622Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio622Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio622Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio622Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio622Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio622Slewrate {
        Pio622Slewrate::from_bits(val)
    }
}
impl From<Pio622Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio622Slewrate) -> u8 {
        Pio622Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio623Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio623Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio623Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio623Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio623Amena {
        Pio623Amena::from_bits(val)
    }
}
impl From<Pio623Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio623Amena) -> u8 {
        Pio623Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio623Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio623Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio623Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio623Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio623Fsel {
        Pio623Fsel::from_bits(val)
    }
}
impl From<Pio623Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio623Fsel) -> u8 {
        Pio623Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio623Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio623Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio623Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio623Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio623Fulldrive {
        Pio623Fulldrive::from_bits(val)
    }
}
impl From<Pio623Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio623Fulldrive) -> u8 {
        Pio623Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio623Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio623Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio623Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio623Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio623Ibena {
        Pio623Ibena::from_bits(val)
    }
}
impl From<Pio623Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio623Ibena) -> u8 {
        Pio623Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio623Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio623Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio623Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio623Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio623Iiena {
        Pio623Iiena::from_bits(val)
    }
}
impl From<Pio623Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio623Iiena) -> u8 {
        Pio623Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio623Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio623Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio623Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio623Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio623Odena {
        Pio623Odena::from_bits(val)
    }
}
impl From<Pio623Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio623Odena) -> u8 {
        Pio623Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio623Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio623Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio623Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio623Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio623Pupdena {
        Pio623Pupdena::from_bits(val)
    }
}
impl From<Pio623Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio623Pupdena) -> u8 {
        Pio623Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio623Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio623Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio623Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio623Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio623Pupdsel {
        Pio623Pupdsel::from_bits(val)
    }
}
impl From<Pio623Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio623Pupdsel) -> u8 {
        Pio623Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio623Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio623Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio623Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio623Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio623Slewrate {
        Pio623Slewrate::from_bits(val)
    }
}
impl From<Pio623Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio623Slewrate) -> u8 {
        Pio623Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio624Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio624Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio624Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio624Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio624Amena {
        Pio624Amena::from_bits(val)
    }
}
impl From<Pio624Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio624Amena) -> u8 {
        Pio624Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio624Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio624Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio624Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio624Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio624Fsel {
        Pio624Fsel::from_bits(val)
    }
}
impl From<Pio624Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio624Fsel) -> u8 {
        Pio624Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio624Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio624Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio624Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio624Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio624Fulldrive {
        Pio624Fulldrive::from_bits(val)
    }
}
impl From<Pio624Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio624Fulldrive) -> u8 {
        Pio624Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio624Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio624Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio624Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio624Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio624Ibena {
        Pio624Ibena::from_bits(val)
    }
}
impl From<Pio624Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio624Ibena) -> u8 {
        Pio624Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio624Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio624Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio624Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio624Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio624Iiena {
        Pio624Iiena::from_bits(val)
    }
}
impl From<Pio624Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio624Iiena) -> u8 {
        Pio624Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio624Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio624Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio624Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio624Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio624Odena {
        Pio624Odena::from_bits(val)
    }
}
impl From<Pio624Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio624Odena) -> u8 {
        Pio624Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio624Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio624Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio624Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio624Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio624Pupdena {
        Pio624Pupdena::from_bits(val)
    }
}
impl From<Pio624Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio624Pupdena) -> u8 {
        Pio624Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio624Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio624Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio624Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio624Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio624Pupdsel {
        Pio624Pupdsel::from_bits(val)
    }
}
impl From<Pio624Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio624Pupdsel) -> u8 {
        Pio624Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio624Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio624Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio624Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio624Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio624Slewrate {
        Pio624Slewrate::from_bits(val)
    }
}
impl From<Pio624Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio624Slewrate) -> u8 {
        Pio624Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio625Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio625Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio625Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio625Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio625Amena {
        Pio625Amena::from_bits(val)
    }
}
impl From<Pio625Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio625Amena) -> u8 {
        Pio625Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio625Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio625Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio625Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio625Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio625Fsel {
        Pio625Fsel::from_bits(val)
    }
}
impl From<Pio625Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio625Fsel) -> u8 {
        Pio625Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio625Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio625Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio625Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio625Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio625Fulldrive {
        Pio625Fulldrive::from_bits(val)
    }
}
impl From<Pio625Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio625Fulldrive) -> u8 {
        Pio625Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio625Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio625Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio625Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio625Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio625Ibena {
        Pio625Ibena::from_bits(val)
    }
}
impl From<Pio625Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio625Ibena) -> u8 {
        Pio625Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio625Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio625Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio625Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio625Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio625Iiena {
        Pio625Iiena::from_bits(val)
    }
}
impl From<Pio625Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio625Iiena) -> u8 {
        Pio625Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio625Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio625Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio625Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio625Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio625Odena {
        Pio625Odena::from_bits(val)
    }
}
impl From<Pio625Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio625Odena) -> u8 {
        Pio625Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio625Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio625Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio625Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio625Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio625Pupdena {
        Pio625Pupdena::from_bits(val)
    }
}
impl From<Pio625Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio625Pupdena) -> u8 {
        Pio625Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio625Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio625Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio625Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio625Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio625Pupdsel {
        Pio625Pupdsel::from_bits(val)
    }
}
impl From<Pio625Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio625Pupdsel) -> u8 {
        Pio625Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio625Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio625Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio625Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio625Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio625Slewrate {
        Pio625Slewrate::from_bits(val)
    }
}
impl From<Pio625Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio625Slewrate) -> u8 {
        Pio625Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio626Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio626Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio626Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio626Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio626Amena {
        Pio626Amena::from_bits(val)
    }
}
impl From<Pio626Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio626Amena) -> u8 {
        Pio626Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio626Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio626Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio626Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio626Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio626Fsel {
        Pio626Fsel::from_bits(val)
    }
}
impl From<Pio626Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio626Fsel) -> u8 {
        Pio626Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio626Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio626Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio626Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio626Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio626Fulldrive {
        Pio626Fulldrive::from_bits(val)
    }
}
impl From<Pio626Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio626Fulldrive) -> u8 {
        Pio626Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio626Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio626Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio626Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio626Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio626Ibena {
        Pio626Ibena::from_bits(val)
    }
}
impl From<Pio626Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio626Ibena) -> u8 {
        Pio626Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio626Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio626Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio626Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio626Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio626Iiena {
        Pio626Iiena::from_bits(val)
    }
}
impl From<Pio626Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio626Iiena) -> u8 {
        Pio626Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio626Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio626Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio626Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio626Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio626Odena {
        Pio626Odena::from_bits(val)
    }
}
impl From<Pio626Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio626Odena) -> u8 {
        Pio626Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio626Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio626Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio626Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio626Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio626Pupdena {
        Pio626Pupdena::from_bits(val)
    }
}
impl From<Pio626Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio626Pupdena) -> u8 {
        Pio626Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio626Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio626Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio626Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio626Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio626Pupdsel {
        Pio626Pupdsel::from_bits(val)
    }
}
impl From<Pio626Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio626Pupdsel) -> u8 {
        Pio626Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio626Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio626Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio626Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio626Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio626Slewrate {
        Pio626Slewrate::from_bits(val)
    }
}
impl From<Pio626Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio626Slewrate) -> u8 {
        Pio626Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio627Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio627Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio627Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio627Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio627Amena {
        Pio627Amena::from_bits(val)
    }
}
impl From<Pio627Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio627Amena) -> u8 {
        Pio627Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio627Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio627Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio627Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio627Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio627Fsel {
        Pio627Fsel::from_bits(val)
    }
}
impl From<Pio627Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio627Fsel) -> u8 {
        Pio627Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio627Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio627Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio627Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio627Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio627Fulldrive {
        Pio627Fulldrive::from_bits(val)
    }
}
impl From<Pio627Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio627Fulldrive) -> u8 {
        Pio627Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio627Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio627Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio627Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio627Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio627Ibena {
        Pio627Ibena::from_bits(val)
    }
}
impl From<Pio627Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio627Ibena) -> u8 {
        Pio627Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio627Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio627Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio627Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio627Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio627Iiena {
        Pio627Iiena::from_bits(val)
    }
}
impl From<Pio627Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio627Iiena) -> u8 {
        Pio627Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio627Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio627Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio627Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio627Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio627Odena {
        Pio627Odena::from_bits(val)
    }
}
impl From<Pio627Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio627Odena) -> u8 {
        Pio627Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio627Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio627Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio627Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio627Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio627Pupdena {
        Pio627Pupdena::from_bits(val)
    }
}
impl From<Pio627Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio627Pupdena) -> u8 {
        Pio627Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio627Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio627Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio627Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio627Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio627Pupdsel {
        Pio627Pupdsel::from_bits(val)
    }
}
impl From<Pio627Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio627Pupdsel) -> u8 {
        Pio627Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio627Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio627Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio627Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio627Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio627Slewrate {
        Pio627Slewrate::from_bits(val)
    }
}
impl From<Pio627Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio627Slewrate) -> u8 {
        Pio627Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio628Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio628Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio628Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio628Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio628Amena {
        Pio628Amena::from_bits(val)
    }
}
impl From<Pio628Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio628Amena) -> u8 {
        Pio628Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio628Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio628Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio628Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio628Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio628Fsel {
        Pio628Fsel::from_bits(val)
    }
}
impl From<Pio628Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio628Fsel) -> u8 {
        Pio628Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio628Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio628Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio628Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio628Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio628Fulldrive {
        Pio628Fulldrive::from_bits(val)
    }
}
impl From<Pio628Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio628Fulldrive) -> u8 {
        Pio628Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio628Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio628Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio628Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio628Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio628Ibena {
        Pio628Ibena::from_bits(val)
    }
}
impl From<Pio628Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio628Ibena) -> u8 {
        Pio628Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio628Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio628Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio628Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio628Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio628Iiena {
        Pio628Iiena::from_bits(val)
    }
}
impl From<Pio628Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio628Iiena) -> u8 {
        Pio628Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio628Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio628Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio628Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio628Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio628Odena {
        Pio628Odena::from_bits(val)
    }
}
impl From<Pio628Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio628Odena) -> u8 {
        Pio628Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio628Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio628Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio628Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio628Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio628Pupdena {
        Pio628Pupdena::from_bits(val)
    }
}
impl From<Pio628Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio628Pupdena) -> u8 {
        Pio628Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio628Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio628Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio628Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio628Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio628Pupdsel {
        Pio628Pupdsel::from_bits(val)
    }
}
impl From<Pio628Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio628Pupdsel) -> u8 {
        Pio628Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio628Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio628Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio628Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio628Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio628Slewrate {
        Pio628Slewrate::from_bits(val)
    }
}
impl From<Pio628Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio628Slewrate) -> u8 {
        Pio628Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio629Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio629Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio629Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio629Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio629Amena {
        Pio629Amena::from_bits(val)
    }
}
impl From<Pio629Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio629Amena) -> u8 {
        Pio629Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio629Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio629Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio629Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio629Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio629Fsel {
        Pio629Fsel::from_bits(val)
    }
}
impl From<Pio629Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio629Fsel) -> u8 {
        Pio629Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio629Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio629Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio629Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio629Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio629Fulldrive {
        Pio629Fulldrive::from_bits(val)
    }
}
impl From<Pio629Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio629Fulldrive) -> u8 {
        Pio629Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio629Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio629Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio629Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio629Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio629Ibena {
        Pio629Ibena::from_bits(val)
    }
}
impl From<Pio629Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio629Ibena) -> u8 {
        Pio629Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio629Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio629Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio629Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio629Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio629Iiena {
        Pio629Iiena::from_bits(val)
    }
}
impl From<Pio629Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio629Iiena) -> u8 {
        Pio629Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio629Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio629Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio629Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio629Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio629Odena {
        Pio629Odena::from_bits(val)
    }
}
impl From<Pio629Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio629Odena) -> u8 {
        Pio629Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio629Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio629Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio629Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio629Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio629Pupdena {
        Pio629Pupdena::from_bits(val)
    }
}
impl From<Pio629Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio629Pupdena) -> u8 {
        Pio629Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio629Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio629Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio629Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio629Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio629Pupdsel {
        Pio629Pupdsel::from_bits(val)
    }
}
impl From<Pio629Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio629Pupdsel) -> u8 {
        Pio629Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio629Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio629Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio629Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio629Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio629Slewrate {
        Pio629Slewrate::from_bits(val)
    }
}
impl From<Pio629Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio629Slewrate) -> u8 {
        Pio629Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio62Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio62Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio62Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio62Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio62Amena {
        Pio62Amena::from_bits(val)
    }
}
impl From<Pio62Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio62Amena) -> u8 {
        Pio62Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio62Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio62Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio62Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio62Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio62Fsel {
        Pio62Fsel::from_bits(val)
    }
}
impl From<Pio62Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio62Fsel) -> u8 {
        Pio62Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio62Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio62Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio62Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio62Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio62Fulldrive {
        Pio62Fulldrive::from_bits(val)
    }
}
impl From<Pio62Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio62Fulldrive) -> u8 {
        Pio62Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio62Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio62Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio62Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio62Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio62Ibena {
        Pio62Ibena::from_bits(val)
    }
}
impl From<Pio62Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio62Ibena) -> u8 {
        Pio62Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio62Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio62Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio62Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio62Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio62Iiena {
        Pio62Iiena::from_bits(val)
    }
}
impl From<Pio62Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio62Iiena) -> u8 {
        Pio62Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio62Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio62Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio62Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio62Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio62Odena {
        Pio62Odena::from_bits(val)
    }
}
impl From<Pio62Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio62Odena) -> u8 {
        Pio62Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio62Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio62Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio62Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio62Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio62Pupdena {
        Pio62Pupdena::from_bits(val)
    }
}
impl From<Pio62Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio62Pupdena) -> u8 {
        Pio62Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio62Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio62Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio62Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio62Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio62Pupdsel {
        Pio62Pupdsel::from_bits(val)
    }
}
impl From<Pio62Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio62Pupdsel) -> u8 {
        Pio62Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio62Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio62Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio62Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio62Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio62Slewrate {
        Pio62Slewrate::from_bits(val)
    }
}
impl From<Pio62Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio62Slewrate) -> u8 {
        Pio62Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio630Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio630Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio630Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio630Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio630Amena {
        Pio630Amena::from_bits(val)
    }
}
impl From<Pio630Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio630Amena) -> u8 {
        Pio630Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio630Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio630Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio630Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio630Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio630Fsel {
        Pio630Fsel::from_bits(val)
    }
}
impl From<Pio630Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio630Fsel) -> u8 {
        Pio630Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio630Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio630Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio630Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio630Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio630Fulldrive {
        Pio630Fulldrive::from_bits(val)
    }
}
impl From<Pio630Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio630Fulldrive) -> u8 {
        Pio630Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio630Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio630Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio630Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio630Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio630Ibena {
        Pio630Ibena::from_bits(val)
    }
}
impl From<Pio630Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio630Ibena) -> u8 {
        Pio630Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio630Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio630Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio630Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio630Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio630Iiena {
        Pio630Iiena::from_bits(val)
    }
}
impl From<Pio630Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio630Iiena) -> u8 {
        Pio630Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio630Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio630Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio630Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio630Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio630Odena {
        Pio630Odena::from_bits(val)
    }
}
impl From<Pio630Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio630Odena) -> u8 {
        Pio630Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio630Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio630Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio630Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio630Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio630Pupdena {
        Pio630Pupdena::from_bits(val)
    }
}
impl From<Pio630Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio630Pupdena) -> u8 {
        Pio630Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio630Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio630Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio630Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio630Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio630Pupdsel {
        Pio630Pupdsel::from_bits(val)
    }
}
impl From<Pio630Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio630Pupdsel) -> u8 {
        Pio630Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio630Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio630Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio630Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio630Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio630Slewrate {
        Pio630Slewrate::from_bits(val)
    }
}
impl From<Pio630Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio630Slewrate) -> u8 {
        Pio630Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio631Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio631Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio631Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio631Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio631Amena {
        Pio631Amena::from_bits(val)
    }
}
impl From<Pio631Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio631Amena) -> u8 {
        Pio631Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio631Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio631Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio631Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio631Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio631Fsel {
        Pio631Fsel::from_bits(val)
    }
}
impl From<Pio631Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio631Fsel) -> u8 {
        Pio631Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio631Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio631Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio631Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio631Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio631Fulldrive {
        Pio631Fulldrive::from_bits(val)
    }
}
impl From<Pio631Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio631Fulldrive) -> u8 {
        Pio631Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio631Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio631Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio631Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio631Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio631Ibena {
        Pio631Ibena::from_bits(val)
    }
}
impl From<Pio631Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio631Ibena) -> u8 {
        Pio631Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio631Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio631Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio631Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio631Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio631Iiena {
        Pio631Iiena::from_bits(val)
    }
}
impl From<Pio631Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio631Iiena) -> u8 {
        Pio631Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio631Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio631Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio631Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio631Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio631Odena {
        Pio631Odena::from_bits(val)
    }
}
impl From<Pio631Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio631Odena) -> u8 {
        Pio631Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio631Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio631Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio631Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio631Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio631Pupdena {
        Pio631Pupdena::from_bits(val)
    }
}
impl From<Pio631Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio631Pupdena) -> u8 {
        Pio631Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio631Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio631Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio631Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio631Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio631Pupdsel {
        Pio631Pupdsel::from_bits(val)
    }
}
impl From<Pio631Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio631Pupdsel) -> u8 {
        Pio631Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio631Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio631Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio631Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio631Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio631Slewrate {
        Pio631Slewrate::from_bits(val)
    }
}
impl From<Pio631Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio631Slewrate) -> u8 {
        Pio631Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio63Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio63Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio63Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio63Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio63Amena {
        Pio63Amena::from_bits(val)
    }
}
impl From<Pio63Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio63Amena) -> u8 {
        Pio63Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio63Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio63Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio63Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio63Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio63Fsel {
        Pio63Fsel::from_bits(val)
    }
}
impl From<Pio63Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio63Fsel) -> u8 {
        Pio63Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio63Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio63Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio63Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio63Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio63Fulldrive {
        Pio63Fulldrive::from_bits(val)
    }
}
impl From<Pio63Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio63Fulldrive) -> u8 {
        Pio63Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio63Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio63Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio63Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio63Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio63Ibena {
        Pio63Ibena::from_bits(val)
    }
}
impl From<Pio63Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio63Ibena) -> u8 {
        Pio63Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio63Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio63Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio63Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio63Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio63Iiena {
        Pio63Iiena::from_bits(val)
    }
}
impl From<Pio63Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio63Iiena) -> u8 {
        Pio63Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio63Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio63Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio63Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio63Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio63Odena {
        Pio63Odena::from_bits(val)
    }
}
impl From<Pio63Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio63Odena) -> u8 {
        Pio63Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio63Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio63Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio63Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio63Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio63Pupdena {
        Pio63Pupdena::from_bits(val)
    }
}
impl From<Pio63Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio63Pupdena) -> u8 {
        Pio63Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio63Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio63Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio63Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio63Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio63Pupdsel {
        Pio63Pupdsel::from_bits(val)
    }
}
impl From<Pio63Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio63Pupdsel) -> u8 {
        Pio63Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio63Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio63Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio63Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio63Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio63Slewrate {
        Pio63Slewrate::from_bits(val)
    }
}
impl From<Pio63Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio63Slewrate) -> u8 {
        Pio63Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio64Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio64Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio64Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio64Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio64Amena {
        Pio64Amena::from_bits(val)
    }
}
impl From<Pio64Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio64Amena) -> u8 {
        Pio64Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio64Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio64Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio64Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio64Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio64Fsel {
        Pio64Fsel::from_bits(val)
    }
}
impl From<Pio64Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio64Fsel) -> u8 {
        Pio64Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio64Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio64Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio64Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio64Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio64Fulldrive {
        Pio64Fulldrive::from_bits(val)
    }
}
impl From<Pio64Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio64Fulldrive) -> u8 {
        Pio64Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio64Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio64Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio64Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio64Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio64Ibena {
        Pio64Ibena::from_bits(val)
    }
}
impl From<Pio64Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio64Ibena) -> u8 {
        Pio64Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio64Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio64Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio64Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio64Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio64Iiena {
        Pio64Iiena::from_bits(val)
    }
}
impl From<Pio64Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio64Iiena) -> u8 {
        Pio64Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio64Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio64Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio64Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio64Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio64Odena {
        Pio64Odena::from_bits(val)
    }
}
impl From<Pio64Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio64Odena) -> u8 {
        Pio64Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio64Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio64Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio64Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio64Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio64Pupdena {
        Pio64Pupdena::from_bits(val)
    }
}
impl From<Pio64Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio64Pupdena) -> u8 {
        Pio64Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio64Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio64Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio64Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio64Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio64Pupdsel {
        Pio64Pupdsel::from_bits(val)
    }
}
impl From<Pio64Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio64Pupdsel) -> u8 {
        Pio64Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio64Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio64Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio64Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio64Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio64Slewrate {
        Pio64Slewrate::from_bits(val)
    }
}
impl From<Pio64Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio64Slewrate) -> u8 {
        Pio64Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio65Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio65Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio65Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio65Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio65Amena {
        Pio65Amena::from_bits(val)
    }
}
impl From<Pio65Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio65Amena) -> u8 {
        Pio65Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio65Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio65Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio65Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio65Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio65Fsel {
        Pio65Fsel::from_bits(val)
    }
}
impl From<Pio65Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio65Fsel) -> u8 {
        Pio65Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio65Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio65Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio65Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio65Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio65Fulldrive {
        Pio65Fulldrive::from_bits(val)
    }
}
impl From<Pio65Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio65Fulldrive) -> u8 {
        Pio65Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio65Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio65Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio65Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio65Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio65Ibena {
        Pio65Ibena::from_bits(val)
    }
}
impl From<Pio65Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio65Ibena) -> u8 {
        Pio65Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio65Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio65Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio65Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio65Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio65Iiena {
        Pio65Iiena::from_bits(val)
    }
}
impl From<Pio65Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio65Iiena) -> u8 {
        Pio65Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio65Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio65Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio65Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio65Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio65Odena {
        Pio65Odena::from_bits(val)
    }
}
impl From<Pio65Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio65Odena) -> u8 {
        Pio65Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio65Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio65Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio65Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio65Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio65Pupdena {
        Pio65Pupdena::from_bits(val)
    }
}
impl From<Pio65Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio65Pupdena) -> u8 {
        Pio65Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio65Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio65Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio65Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio65Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio65Pupdsel {
        Pio65Pupdsel::from_bits(val)
    }
}
impl From<Pio65Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio65Pupdsel) -> u8 {
        Pio65Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio65Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio65Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio65Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio65Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio65Slewrate {
        Pio65Slewrate::from_bits(val)
    }
}
impl From<Pio65Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio65Slewrate) -> u8 {
        Pio65Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio66Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio66Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio66Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio66Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio66Amena {
        Pio66Amena::from_bits(val)
    }
}
impl From<Pio66Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio66Amena) -> u8 {
        Pio66Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio66Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio66Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio66Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio66Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio66Fsel {
        Pio66Fsel::from_bits(val)
    }
}
impl From<Pio66Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio66Fsel) -> u8 {
        Pio66Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio66Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio66Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio66Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio66Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio66Fulldrive {
        Pio66Fulldrive::from_bits(val)
    }
}
impl From<Pio66Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio66Fulldrive) -> u8 {
        Pio66Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio66Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio66Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio66Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio66Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio66Ibena {
        Pio66Ibena::from_bits(val)
    }
}
impl From<Pio66Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio66Ibena) -> u8 {
        Pio66Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio66Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio66Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio66Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio66Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio66Iiena {
        Pio66Iiena::from_bits(val)
    }
}
impl From<Pio66Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio66Iiena) -> u8 {
        Pio66Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio66Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio66Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio66Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio66Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio66Odena {
        Pio66Odena::from_bits(val)
    }
}
impl From<Pio66Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio66Odena) -> u8 {
        Pio66Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio66Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio66Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio66Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio66Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio66Pupdena {
        Pio66Pupdena::from_bits(val)
    }
}
impl From<Pio66Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio66Pupdena) -> u8 {
        Pio66Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio66Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio66Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio66Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio66Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio66Pupdsel {
        Pio66Pupdsel::from_bits(val)
    }
}
impl From<Pio66Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio66Pupdsel) -> u8 {
        Pio66Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio66Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio66Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio66Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio66Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio66Slewrate {
        Pio66Slewrate::from_bits(val)
    }
}
impl From<Pio66Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio66Slewrate) -> u8 {
        Pio66Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio67Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio67Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio67Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio67Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio67Amena {
        Pio67Amena::from_bits(val)
    }
}
impl From<Pio67Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio67Amena) -> u8 {
        Pio67Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio67Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio67Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio67Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio67Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio67Fsel {
        Pio67Fsel::from_bits(val)
    }
}
impl From<Pio67Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio67Fsel) -> u8 {
        Pio67Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio67Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio67Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio67Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio67Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio67Fulldrive {
        Pio67Fulldrive::from_bits(val)
    }
}
impl From<Pio67Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio67Fulldrive) -> u8 {
        Pio67Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio67Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio67Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio67Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio67Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio67Ibena {
        Pio67Ibena::from_bits(val)
    }
}
impl From<Pio67Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio67Ibena) -> u8 {
        Pio67Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio67Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio67Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio67Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio67Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio67Iiena {
        Pio67Iiena::from_bits(val)
    }
}
impl From<Pio67Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio67Iiena) -> u8 {
        Pio67Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio67Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio67Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio67Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio67Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio67Odena {
        Pio67Odena::from_bits(val)
    }
}
impl From<Pio67Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio67Odena) -> u8 {
        Pio67Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio67Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio67Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio67Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio67Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio67Pupdena {
        Pio67Pupdena::from_bits(val)
    }
}
impl From<Pio67Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio67Pupdena) -> u8 {
        Pio67Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio67Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio67Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio67Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio67Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio67Pupdsel {
        Pio67Pupdsel::from_bits(val)
    }
}
impl From<Pio67Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio67Pupdsel) -> u8 {
        Pio67Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio67Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio67Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio67Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio67Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio67Slewrate {
        Pio67Slewrate::from_bits(val)
    }
}
impl From<Pio67Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio67Slewrate) -> u8 {
        Pio67Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio68Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio68Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio68Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio68Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio68Amena {
        Pio68Amena::from_bits(val)
    }
}
impl From<Pio68Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio68Amena) -> u8 {
        Pio68Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio68Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio68Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio68Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio68Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio68Fsel {
        Pio68Fsel::from_bits(val)
    }
}
impl From<Pio68Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio68Fsel) -> u8 {
        Pio68Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio68Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio68Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio68Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio68Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio68Fulldrive {
        Pio68Fulldrive::from_bits(val)
    }
}
impl From<Pio68Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio68Fulldrive) -> u8 {
        Pio68Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio68Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio68Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio68Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio68Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio68Ibena {
        Pio68Ibena::from_bits(val)
    }
}
impl From<Pio68Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio68Ibena) -> u8 {
        Pio68Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio68Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio68Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio68Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio68Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio68Iiena {
        Pio68Iiena::from_bits(val)
    }
}
impl From<Pio68Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio68Iiena) -> u8 {
        Pio68Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio68Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio68Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio68Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio68Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio68Odena {
        Pio68Odena::from_bits(val)
    }
}
impl From<Pio68Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio68Odena) -> u8 {
        Pio68Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio68Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio68Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio68Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio68Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio68Pupdena {
        Pio68Pupdena::from_bits(val)
    }
}
impl From<Pio68Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio68Pupdena) -> u8 {
        Pio68Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio68Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio68Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio68Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio68Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio68Pupdsel {
        Pio68Pupdsel::from_bits(val)
    }
}
impl From<Pio68Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio68Pupdsel) -> u8 {
        Pio68Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio68Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio68Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio68Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio68Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio68Slewrate {
        Pio68Slewrate::from_bits(val)
    }
}
impl From<Pio68Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio68Slewrate) -> u8 {
        Pio68Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio69Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio69Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio69Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio69Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio69Amena {
        Pio69Amena::from_bits(val)
    }
}
impl From<Pio69Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio69Amena) -> u8 {
        Pio69Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio69Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio69Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio69Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio69Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio69Fsel {
        Pio69Fsel::from_bits(val)
    }
}
impl From<Pio69Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio69Fsel) -> u8 {
        Pio69Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio69Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio69Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio69Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio69Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio69Fulldrive {
        Pio69Fulldrive::from_bits(val)
    }
}
impl From<Pio69Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio69Fulldrive) -> u8 {
        Pio69Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio69Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio69Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio69Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio69Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio69Ibena {
        Pio69Ibena::from_bits(val)
    }
}
impl From<Pio69Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio69Ibena) -> u8 {
        Pio69Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio69Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio69Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio69Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio69Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio69Iiena {
        Pio69Iiena::from_bits(val)
    }
}
impl From<Pio69Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio69Iiena) -> u8 {
        Pio69Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio69Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio69Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio69Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio69Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio69Odena {
        Pio69Odena::from_bits(val)
    }
}
impl From<Pio69Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio69Odena) -> u8 {
        Pio69Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio69Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio69Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio69Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio69Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio69Pupdena {
        Pio69Pupdena::from_bits(val)
    }
}
impl From<Pio69Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio69Pupdena) -> u8 {
        Pio69Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio69Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio69Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio69Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio69Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio69Pupdsel {
        Pio69Pupdsel::from_bits(val)
    }
}
impl From<Pio69Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio69Pupdsel) -> u8 {
        Pio69Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio69Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio69Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio69Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio69Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio69Slewrate {
        Pio69Slewrate::from_bits(val)
    }
}
impl From<Pio69Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio69Slewrate) -> u8 {
        Pio69Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio70Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio70Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio70Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio70Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio70Amena {
        Pio70Amena::from_bits(val)
    }
}
impl From<Pio70Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio70Amena) -> u8 {
        Pio70Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio70Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio70Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio70Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio70Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio70Fsel {
        Pio70Fsel::from_bits(val)
    }
}
impl From<Pio70Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio70Fsel) -> u8 {
        Pio70Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio70Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio70Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio70Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio70Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio70Fulldrive {
        Pio70Fulldrive::from_bits(val)
    }
}
impl From<Pio70Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio70Fulldrive) -> u8 {
        Pio70Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio70Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio70Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio70Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio70Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio70Ibena {
        Pio70Ibena::from_bits(val)
    }
}
impl From<Pio70Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio70Ibena) -> u8 {
        Pio70Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio70Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio70Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio70Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio70Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio70Iiena {
        Pio70Iiena::from_bits(val)
    }
}
impl From<Pio70Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio70Iiena) -> u8 {
        Pio70Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio70Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio70Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio70Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio70Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio70Odena {
        Pio70Odena::from_bits(val)
    }
}
impl From<Pio70Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio70Odena) -> u8 {
        Pio70Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio70Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio70Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio70Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio70Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio70Pupdena {
        Pio70Pupdena::from_bits(val)
    }
}
impl From<Pio70Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio70Pupdena) -> u8 {
        Pio70Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio70Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio70Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio70Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio70Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio70Pupdsel {
        Pio70Pupdsel::from_bits(val)
    }
}
impl From<Pio70Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio70Pupdsel) -> u8 {
        Pio70Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio70Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio70Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio70Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio70Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio70Slewrate {
        Pio70Slewrate::from_bits(val)
    }
}
impl From<Pio70Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio70Slewrate) -> u8 {
        Pio70Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio710Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio710Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio710Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio710Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio710Amena {
        Pio710Amena::from_bits(val)
    }
}
impl From<Pio710Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio710Amena) -> u8 {
        Pio710Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio710Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio710Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio710Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio710Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio710Fsel {
        Pio710Fsel::from_bits(val)
    }
}
impl From<Pio710Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio710Fsel) -> u8 {
        Pio710Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio710Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio710Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio710Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio710Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio710Fulldrive {
        Pio710Fulldrive::from_bits(val)
    }
}
impl From<Pio710Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio710Fulldrive) -> u8 {
        Pio710Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio710Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio710Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio710Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio710Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio710Ibena {
        Pio710Ibena::from_bits(val)
    }
}
impl From<Pio710Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio710Ibena) -> u8 {
        Pio710Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio710Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio710Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio710Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio710Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio710Iiena {
        Pio710Iiena::from_bits(val)
    }
}
impl From<Pio710Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio710Iiena) -> u8 {
        Pio710Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio710Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio710Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio710Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio710Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio710Odena {
        Pio710Odena::from_bits(val)
    }
}
impl From<Pio710Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio710Odena) -> u8 {
        Pio710Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio710Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio710Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio710Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio710Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio710Pupdena {
        Pio710Pupdena::from_bits(val)
    }
}
impl From<Pio710Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio710Pupdena) -> u8 {
        Pio710Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio710Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio710Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio710Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio710Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio710Pupdsel {
        Pio710Pupdsel::from_bits(val)
    }
}
impl From<Pio710Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio710Pupdsel) -> u8 {
        Pio710Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio710Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio710Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio710Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio710Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio710Slewrate {
        Pio710Slewrate::from_bits(val)
    }
}
impl From<Pio710Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio710Slewrate) -> u8 {
        Pio710Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio711Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio711Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio711Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio711Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio711Amena {
        Pio711Amena::from_bits(val)
    }
}
impl From<Pio711Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio711Amena) -> u8 {
        Pio711Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio711Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio711Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio711Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio711Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio711Fsel {
        Pio711Fsel::from_bits(val)
    }
}
impl From<Pio711Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio711Fsel) -> u8 {
        Pio711Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio711Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio711Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio711Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio711Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio711Fulldrive {
        Pio711Fulldrive::from_bits(val)
    }
}
impl From<Pio711Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio711Fulldrive) -> u8 {
        Pio711Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio711Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio711Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio711Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio711Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio711Ibena {
        Pio711Ibena::from_bits(val)
    }
}
impl From<Pio711Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio711Ibena) -> u8 {
        Pio711Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio711Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio711Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio711Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio711Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio711Iiena {
        Pio711Iiena::from_bits(val)
    }
}
impl From<Pio711Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio711Iiena) -> u8 {
        Pio711Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio711Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio711Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio711Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio711Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio711Odena {
        Pio711Odena::from_bits(val)
    }
}
impl From<Pio711Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio711Odena) -> u8 {
        Pio711Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio711Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio711Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio711Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio711Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio711Pupdena {
        Pio711Pupdena::from_bits(val)
    }
}
impl From<Pio711Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio711Pupdena) -> u8 {
        Pio711Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio711Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio711Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio711Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio711Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio711Pupdsel {
        Pio711Pupdsel::from_bits(val)
    }
}
impl From<Pio711Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio711Pupdsel) -> u8 {
        Pio711Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio711Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio711Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio711Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio711Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio711Slewrate {
        Pio711Slewrate::from_bits(val)
    }
}
impl From<Pio711Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio711Slewrate) -> u8 {
        Pio711Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio712Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio712Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio712Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio712Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio712Amena {
        Pio712Amena::from_bits(val)
    }
}
impl From<Pio712Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio712Amena) -> u8 {
        Pio712Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio712Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio712Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio712Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio712Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio712Fsel {
        Pio712Fsel::from_bits(val)
    }
}
impl From<Pio712Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio712Fsel) -> u8 {
        Pio712Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio712Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio712Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio712Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio712Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio712Fulldrive {
        Pio712Fulldrive::from_bits(val)
    }
}
impl From<Pio712Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio712Fulldrive) -> u8 {
        Pio712Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio712Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio712Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio712Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio712Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio712Ibena {
        Pio712Ibena::from_bits(val)
    }
}
impl From<Pio712Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio712Ibena) -> u8 {
        Pio712Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio712Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio712Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio712Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio712Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio712Iiena {
        Pio712Iiena::from_bits(val)
    }
}
impl From<Pio712Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio712Iiena) -> u8 {
        Pio712Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio712Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio712Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio712Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio712Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio712Odena {
        Pio712Odena::from_bits(val)
    }
}
impl From<Pio712Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio712Odena) -> u8 {
        Pio712Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio712Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio712Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio712Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio712Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio712Pupdena {
        Pio712Pupdena::from_bits(val)
    }
}
impl From<Pio712Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio712Pupdena) -> u8 {
        Pio712Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio712Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio712Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio712Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio712Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio712Pupdsel {
        Pio712Pupdsel::from_bits(val)
    }
}
impl From<Pio712Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio712Pupdsel) -> u8 {
        Pio712Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio712Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio712Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio712Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio712Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio712Slewrate {
        Pio712Slewrate::from_bits(val)
    }
}
impl From<Pio712Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio712Slewrate) -> u8 {
        Pio712Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio713Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio713Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio713Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio713Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio713Amena {
        Pio713Amena::from_bits(val)
    }
}
impl From<Pio713Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio713Amena) -> u8 {
        Pio713Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio713Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio713Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio713Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio713Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio713Fsel {
        Pio713Fsel::from_bits(val)
    }
}
impl From<Pio713Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio713Fsel) -> u8 {
        Pio713Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio713Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio713Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio713Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio713Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio713Fulldrive {
        Pio713Fulldrive::from_bits(val)
    }
}
impl From<Pio713Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio713Fulldrive) -> u8 {
        Pio713Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio713Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio713Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio713Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio713Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio713Ibena {
        Pio713Ibena::from_bits(val)
    }
}
impl From<Pio713Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio713Ibena) -> u8 {
        Pio713Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio713Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio713Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio713Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio713Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio713Iiena {
        Pio713Iiena::from_bits(val)
    }
}
impl From<Pio713Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio713Iiena) -> u8 {
        Pio713Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio713Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio713Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio713Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio713Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio713Odena {
        Pio713Odena::from_bits(val)
    }
}
impl From<Pio713Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio713Odena) -> u8 {
        Pio713Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio713Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio713Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio713Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio713Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio713Pupdena {
        Pio713Pupdena::from_bits(val)
    }
}
impl From<Pio713Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio713Pupdena) -> u8 {
        Pio713Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio713Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio713Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio713Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio713Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio713Pupdsel {
        Pio713Pupdsel::from_bits(val)
    }
}
impl From<Pio713Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio713Pupdsel) -> u8 {
        Pio713Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio713Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio713Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio713Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio713Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio713Slewrate {
        Pio713Slewrate::from_bits(val)
    }
}
impl From<Pio713Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio713Slewrate) -> u8 {
        Pio713Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio714Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio714Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio714Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio714Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio714Amena {
        Pio714Amena::from_bits(val)
    }
}
impl From<Pio714Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio714Amena) -> u8 {
        Pio714Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio714Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio714Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio714Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio714Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio714Fsel {
        Pio714Fsel::from_bits(val)
    }
}
impl From<Pio714Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio714Fsel) -> u8 {
        Pio714Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio714Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio714Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio714Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio714Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio714Fulldrive {
        Pio714Fulldrive::from_bits(val)
    }
}
impl From<Pio714Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio714Fulldrive) -> u8 {
        Pio714Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio714Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio714Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio714Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio714Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio714Ibena {
        Pio714Ibena::from_bits(val)
    }
}
impl From<Pio714Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio714Ibena) -> u8 {
        Pio714Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio714Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio714Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio714Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio714Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio714Iiena {
        Pio714Iiena::from_bits(val)
    }
}
impl From<Pio714Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio714Iiena) -> u8 {
        Pio714Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio714Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio714Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio714Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio714Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio714Odena {
        Pio714Odena::from_bits(val)
    }
}
impl From<Pio714Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio714Odena) -> u8 {
        Pio714Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio714Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio714Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio714Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio714Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio714Pupdena {
        Pio714Pupdena::from_bits(val)
    }
}
impl From<Pio714Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio714Pupdena) -> u8 {
        Pio714Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio714Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio714Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio714Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio714Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio714Pupdsel {
        Pio714Pupdsel::from_bits(val)
    }
}
impl From<Pio714Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio714Pupdsel) -> u8 {
        Pio714Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio714Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio714Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio714Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio714Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio714Slewrate {
        Pio714Slewrate::from_bits(val)
    }
}
impl From<Pio714Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio714Slewrate) -> u8 {
        Pio714Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio715Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio715Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio715Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio715Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio715Amena {
        Pio715Amena::from_bits(val)
    }
}
impl From<Pio715Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio715Amena) -> u8 {
        Pio715Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio715Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio715Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio715Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio715Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio715Fsel {
        Pio715Fsel::from_bits(val)
    }
}
impl From<Pio715Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio715Fsel) -> u8 {
        Pio715Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio715Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio715Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio715Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio715Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio715Fulldrive {
        Pio715Fulldrive::from_bits(val)
    }
}
impl From<Pio715Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio715Fulldrive) -> u8 {
        Pio715Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio715Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio715Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio715Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio715Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio715Ibena {
        Pio715Ibena::from_bits(val)
    }
}
impl From<Pio715Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio715Ibena) -> u8 {
        Pio715Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio715Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio715Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio715Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio715Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio715Iiena {
        Pio715Iiena::from_bits(val)
    }
}
impl From<Pio715Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio715Iiena) -> u8 {
        Pio715Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio715Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio715Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio715Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio715Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio715Odena {
        Pio715Odena::from_bits(val)
    }
}
impl From<Pio715Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio715Odena) -> u8 {
        Pio715Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio715Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio715Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio715Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio715Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio715Pupdena {
        Pio715Pupdena::from_bits(val)
    }
}
impl From<Pio715Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio715Pupdena) -> u8 {
        Pio715Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio715Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio715Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio715Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio715Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio715Pupdsel {
        Pio715Pupdsel::from_bits(val)
    }
}
impl From<Pio715Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio715Pupdsel) -> u8 {
        Pio715Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio715Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio715Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio715Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio715Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio715Slewrate {
        Pio715Slewrate::from_bits(val)
    }
}
impl From<Pio715Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio715Slewrate) -> u8 {
        Pio715Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio716Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio716Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio716Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio716Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio716Amena {
        Pio716Amena::from_bits(val)
    }
}
impl From<Pio716Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio716Amena) -> u8 {
        Pio716Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio716Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio716Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio716Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio716Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio716Fsel {
        Pio716Fsel::from_bits(val)
    }
}
impl From<Pio716Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio716Fsel) -> u8 {
        Pio716Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio716Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio716Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio716Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio716Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio716Fulldrive {
        Pio716Fulldrive::from_bits(val)
    }
}
impl From<Pio716Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio716Fulldrive) -> u8 {
        Pio716Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio716Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio716Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio716Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio716Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio716Ibena {
        Pio716Ibena::from_bits(val)
    }
}
impl From<Pio716Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio716Ibena) -> u8 {
        Pio716Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio716Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio716Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio716Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio716Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio716Iiena {
        Pio716Iiena::from_bits(val)
    }
}
impl From<Pio716Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio716Iiena) -> u8 {
        Pio716Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio716Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio716Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio716Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio716Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio716Odena {
        Pio716Odena::from_bits(val)
    }
}
impl From<Pio716Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio716Odena) -> u8 {
        Pio716Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio716Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio716Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio716Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio716Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio716Pupdena {
        Pio716Pupdena::from_bits(val)
    }
}
impl From<Pio716Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio716Pupdena) -> u8 {
        Pio716Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio716Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio716Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio716Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio716Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio716Pupdsel {
        Pio716Pupdsel::from_bits(val)
    }
}
impl From<Pio716Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio716Pupdsel) -> u8 {
        Pio716Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio716Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio716Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio716Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio716Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio716Slewrate {
        Pio716Slewrate::from_bits(val)
    }
}
impl From<Pio716Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio716Slewrate) -> u8 {
        Pio716Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio717Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio717Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio717Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio717Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio717Amena {
        Pio717Amena::from_bits(val)
    }
}
impl From<Pio717Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio717Amena) -> u8 {
        Pio717Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio717Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio717Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio717Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio717Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio717Fsel {
        Pio717Fsel::from_bits(val)
    }
}
impl From<Pio717Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio717Fsel) -> u8 {
        Pio717Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio717Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio717Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio717Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio717Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio717Fulldrive {
        Pio717Fulldrive::from_bits(val)
    }
}
impl From<Pio717Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio717Fulldrive) -> u8 {
        Pio717Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio717Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio717Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio717Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio717Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio717Ibena {
        Pio717Ibena::from_bits(val)
    }
}
impl From<Pio717Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio717Ibena) -> u8 {
        Pio717Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio717Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio717Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio717Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio717Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio717Iiena {
        Pio717Iiena::from_bits(val)
    }
}
impl From<Pio717Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio717Iiena) -> u8 {
        Pio717Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio717Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio717Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio717Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio717Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio717Odena {
        Pio717Odena::from_bits(val)
    }
}
impl From<Pio717Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio717Odena) -> u8 {
        Pio717Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio717Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio717Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio717Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio717Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio717Pupdena {
        Pio717Pupdena::from_bits(val)
    }
}
impl From<Pio717Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio717Pupdena) -> u8 {
        Pio717Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio717Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio717Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio717Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio717Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio717Pupdsel {
        Pio717Pupdsel::from_bits(val)
    }
}
impl From<Pio717Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio717Pupdsel) -> u8 {
        Pio717Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio717Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio717Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio717Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio717Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio717Slewrate {
        Pio717Slewrate::from_bits(val)
    }
}
impl From<Pio717Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio717Slewrate) -> u8 {
        Pio717Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio718Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio718Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio718Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio718Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio718Amena {
        Pio718Amena::from_bits(val)
    }
}
impl From<Pio718Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio718Amena) -> u8 {
        Pio718Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio718Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio718Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio718Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio718Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio718Fsel {
        Pio718Fsel::from_bits(val)
    }
}
impl From<Pio718Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio718Fsel) -> u8 {
        Pio718Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio718Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio718Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio718Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio718Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio718Fulldrive {
        Pio718Fulldrive::from_bits(val)
    }
}
impl From<Pio718Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio718Fulldrive) -> u8 {
        Pio718Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio718Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio718Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio718Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio718Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio718Ibena {
        Pio718Ibena::from_bits(val)
    }
}
impl From<Pio718Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio718Ibena) -> u8 {
        Pio718Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio718Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio718Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio718Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio718Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio718Iiena {
        Pio718Iiena::from_bits(val)
    }
}
impl From<Pio718Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio718Iiena) -> u8 {
        Pio718Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio718Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio718Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio718Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio718Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio718Odena {
        Pio718Odena::from_bits(val)
    }
}
impl From<Pio718Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio718Odena) -> u8 {
        Pio718Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio718Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio718Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio718Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio718Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio718Pupdena {
        Pio718Pupdena::from_bits(val)
    }
}
impl From<Pio718Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio718Pupdena) -> u8 {
        Pio718Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio718Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio718Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio718Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio718Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio718Pupdsel {
        Pio718Pupdsel::from_bits(val)
    }
}
impl From<Pio718Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio718Pupdsel) -> u8 {
        Pio718Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio718Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio718Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio718Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio718Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio718Slewrate {
        Pio718Slewrate::from_bits(val)
    }
}
impl From<Pio718Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio718Slewrate) -> u8 {
        Pio718Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio719Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio719Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio719Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio719Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio719Amena {
        Pio719Amena::from_bits(val)
    }
}
impl From<Pio719Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio719Amena) -> u8 {
        Pio719Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio719Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio719Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio719Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio719Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio719Fsel {
        Pio719Fsel::from_bits(val)
    }
}
impl From<Pio719Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio719Fsel) -> u8 {
        Pio719Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio719Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio719Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio719Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio719Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio719Fulldrive {
        Pio719Fulldrive::from_bits(val)
    }
}
impl From<Pio719Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio719Fulldrive) -> u8 {
        Pio719Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio719Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio719Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio719Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio719Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio719Ibena {
        Pio719Ibena::from_bits(val)
    }
}
impl From<Pio719Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio719Ibena) -> u8 {
        Pio719Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio719Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio719Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio719Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio719Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio719Iiena {
        Pio719Iiena::from_bits(val)
    }
}
impl From<Pio719Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio719Iiena) -> u8 {
        Pio719Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio719Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio719Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio719Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio719Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio719Odena {
        Pio719Odena::from_bits(val)
    }
}
impl From<Pio719Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio719Odena) -> u8 {
        Pio719Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio719Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio719Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio719Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio719Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio719Pupdena {
        Pio719Pupdena::from_bits(val)
    }
}
impl From<Pio719Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio719Pupdena) -> u8 {
        Pio719Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio719Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio719Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio719Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio719Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio719Pupdsel {
        Pio719Pupdsel::from_bits(val)
    }
}
impl From<Pio719Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio719Pupdsel) -> u8 {
        Pio719Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio719Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio719Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio719Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio719Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio719Slewrate {
        Pio719Slewrate::from_bits(val)
    }
}
impl From<Pio719Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio719Slewrate) -> u8 {
        Pio719Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio71Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio71Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio71Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio71Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio71Amena {
        Pio71Amena::from_bits(val)
    }
}
impl From<Pio71Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio71Amena) -> u8 {
        Pio71Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio71Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio71Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio71Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio71Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio71Fsel {
        Pio71Fsel::from_bits(val)
    }
}
impl From<Pio71Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio71Fsel) -> u8 {
        Pio71Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio71Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio71Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio71Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio71Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio71Fulldrive {
        Pio71Fulldrive::from_bits(val)
    }
}
impl From<Pio71Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio71Fulldrive) -> u8 {
        Pio71Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio71Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio71Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio71Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio71Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio71Ibena {
        Pio71Ibena::from_bits(val)
    }
}
impl From<Pio71Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio71Ibena) -> u8 {
        Pio71Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio71Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio71Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio71Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio71Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio71Iiena {
        Pio71Iiena::from_bits(val)
    }
}
impl From<Pio71Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio71Iiena) -> u8 {
        Pio71Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio71Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio71Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio71Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio71Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio71Odena {
        Pio71Odena::from_bits(val)
    }
}
impl From<Pio71Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio71Odena) -> u8 {
        Pio71Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio71Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio71Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio71Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio71Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio71Pupdena {
        Pio71Pupdena::from_bits(val)
    }
}
impl From<Pio71Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio71Pupdena) -> u8 {
        Pio71Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio71Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio71Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio71Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio71Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio71Pupdsel {
        Pio71Pupdsel::from_bits(val)
    }
}
impl From<Pio71Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio71Pupdsel) -> u8 {
        Pio71Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio71Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio71Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio71Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio71Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio71Slewrate {
        Pio71Slewrate::from_bits(val)
    }
}
impl From<Pio71Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio71Slewrate) -> u8 {
        Pio71Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio720Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio720Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio720Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio720Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio720Amena {
        Pio720Amena::from_bits(val)
    }
}
impl From<Pio720Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio720Amena) -> u8 {
        Pio720Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio720Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio720Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio720Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio720Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio720Fsel {
        Pio720Fsel::from_bits(val)
    }
}
impl From<Pio720Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio720Fsel) -> u8 {
        Pio720Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio720Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio720Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio720Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio720Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio720Fulldrive {
        Pio720Fulldrive::from_bits(val)
    }
}
impl From<Pio720Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio720Fulldrive) -> u8 {
        Pio720Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio720Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio720Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio720Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio720Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio720Ibena {
        Pio720Ibena::from_bits(val)
    }
}
impl From<Pio720Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio720Ibena) -> u8 {
        Pio720Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio720Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio720Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio720Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio720Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio720Iiena {
        Pio720Iiena::from_bits(val)
    }
}
impl From<Pio720Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio720Iiena) -> u8 {
        Pio720Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio720Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio720Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio720Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio720Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio720Odena {
        Pio720Odena::from_bits(val)
    }
}
impl From<Pio720Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio720Odena) -> u8 {
        Pio720Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio720Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio720Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio720Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio720Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio720Pupdena {
        Pio720Pupdena::from_bits(val)
    }
}
impl From<Pio720Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio720Pupdena) -> u8 {
        Pio720Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio720Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio720Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio720Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio720Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio720Pupdsel {
        Pio720Pupdsel::from_bits(val)
    }
}
impl From<Pio720Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio720Pupdsel) -> u8 {
        Pio720Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio720Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio720Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio720Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio720Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio720Slewrate {
        Pio720Slewrate::from_bits(val)
    }
}
impl From<Pio720Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio720Slewrate) -> u8 {
        Pio720Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio721Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio721Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio721Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio721Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio721Amena {
        Pio721Amena::from_bits(val)
    }
}
impl From<Pio721Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio721Amena) -> u8 {
        Pio721Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio721Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio721Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio721Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio721Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio721Fsel {
        Pio721Fsel::from_bits(val)
    }
}
impl From<Pio721Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio721Fsel) -> u8 {
        Pio721Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio721Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio721Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio721Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio721Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio721Fulldrive {
        Pio721Fulldrive::from_bits(val)
    }
}
impl From<Pio721Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio721Fulldrive) -> u8 {
        Pio721Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio721Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio721Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio721Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio721Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio721Ibena {
        Pio721Ibena::from_bits(val)
    }
}
impl From<Pio721Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio721Ibena) -> u8 {
        Pio721Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio721Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio721Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio721Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio721Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio721Iiena {
        Pio721Iiena::from_bits(val)
    }
}
impl From<Pio721Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio721Iiena) -> u8 {
        Pio721Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio721Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio721Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio721Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio721Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio721Odena {
        Pio721Odena::from_bits(val)
    }
}
impl From<Pio721Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio721Odena) -> u8 {
        Pio721Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio721Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio721Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio721Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio721Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio721Pupdena {
        Pio721Pupdena::from_bits(val)
    }
}
impl From<Pio721Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio721Pupdena) -> u8 {
        Pio721Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio721Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio721Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio721Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio721Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio721Pupdsel {
        Pio721Pupdsel::from_bits(val)
    }
}
impl From<Pio721Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio721Pupdsel) -> u8 {
        Pio721Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio721Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio721Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio721Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio721Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio721Slewrate {
        Pio721Slewrate::from_bits(val)
    }
}
impl From<Pio721Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio721Slewrate) -> u8 {
        Pio721Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio722Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio722Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio722Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio722Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio722Amena {
        Pio722Amena::from_bits(val)
    }
}
impl From<Pio722Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio722Amena) -> u8 {
        Pio722Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio722Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio722Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio722Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio722Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio722Fsel {
        Pio722Fsel::from_bits(val)
    }
}
impl From<Pio722Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio722Fsel) -> u8 {
        Pio722Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio722Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio722Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio722Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio722Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio722Fulldrive {
        Pio722Fulldrive::from_bits(val)
    }
}
impl From<Pio722Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio722Fulldrive) -> u8 {
        Pio722Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio722Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio722Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio722Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio722Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio722Ibena {
        Pio722Ibena::from_bits(val)
    }
}
impl From<Pio722Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio722Ibena) -> u8 {
        Pio722Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio722Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio722Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio722Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio722Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio722Iiena {
        Pio722Iiena::from_bits(val)
    }
}
impl From<Pio722Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio722Iiena) -> u8 {
        Pio722Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio722Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio722Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio722Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio722Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio722Odena {
        Pio722Odena::from_bits(val)
    }
}
impl From<Pio722Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio722Odena) -> u8 {
        Pio722Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio722Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio722Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio722Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio722Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio722Pupdena {
        Pio722Pupdena::from_bits(val)
    }
}
impl From<Pio722Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio722Pupdena) -> u8 {
        Pio722Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio722Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio722Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio722Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio722Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio722Pupdsel {
        Pio722Pupdsel::from_bits(val)
    }
}
impl From<Pio722Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio722Pupdsel) -> u8 {
        Pio722Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio722Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio722Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio722Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio722Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio722Slewrate {
        Pio722Slewrate::from_bits(val)
    }
}
impl From<Pio722Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio722Slewrate) -> u8 {
        Pio722Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio723Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio723Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio723Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio723Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio723Amena {
        Pio723Amena::from_bits(val)
    }
}
impl From<Pio723Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio723Amena) -> u8 {
        Pio723Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio723Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio723Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio723Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio723Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio723Fsel {
        Pio723Fsel::from_bits(val)
    }
}
impl From<Pio723Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio723Fsel) -> u8 {
        Pio723Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio723Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio723Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio723Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio723Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio723Fulldrive {
        Pio723Fulldrive::from_bits(val)
    }
}
impl From<Pio723Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio723Fulldrive) -> u8 {
        Pio723Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio723Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio723Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio723Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio723Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio723Ibena {
        Pio723Ibena::from_bits(val)
    }
}
impl From<Pio723Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio723Ibena) -> u8 {
        Pio723Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio723Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio723Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio723Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio723Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio723Iiena {
        Pio723Iiena::from_bits(val)
    }
}
impl From<Pio723Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio723Iiena) -> u8 {
        Pio723Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio723Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio723Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio723Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio723Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio723Odena {
        Pio723Odena::from_bits(val)
    }
}
impl From<Pio723Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio723Odena) -> u8 {
        Pio723Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio723Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio723Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio723Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio723Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio723Pupdena {
        Pio723Pupdena::from_bits(val)
    }
}
impl From<Pio723Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio723Pupdena) -> u8 {
        Pio723Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio723Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio723Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio723Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio723Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio723Pupdsel {
        Pio723Pupdsel::from_bits(val)
    }
}
impl From<Pio723Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio723Pupdsel) -> u8 {
        Pio723Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio723Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio723Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio723Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio723Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio723Slewrate {
        Pio723Slewrate::from_bits(val)
    }
}
impl From<Pio723Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio723Slewrate) -> u8 {
        Pio723Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio724Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio724Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio724Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio724Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio724Amena {
        Pio724Amena::from_bits(val)
    }
}
impl From<Pio724Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio724Amena) -> u8 {
        Pio724Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio724Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio724Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio724Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio724Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio724Fsel {
        Pio724Fsel::from_bits(val)
    }
}
impl From<Pio724Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio724Fsel) -> u8 {
        Pio724Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio724Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio724Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio724Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio724Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio724Fulldrive {
        Pio724Fulldrive::from_bits(val)
    }
}
impl From<Pio724Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio724Fulldrive) -> u8 {
        Pio724Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio724Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio724Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio724Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio724Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio724Ibena {
        Pio724Ibena::from_bits(val)
    }
}
impl From<Pio724Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio724Ibena) -> u8 {
        Pio724Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio724Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio724Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio724Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio724Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio724Iiena {
        Pio724Iiena::from_bits(val)
    }
}
impl From<Pio724Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio724Iiena) -> u8 {
        Pio724Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio724Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio724Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio724Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio724Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio724Odena {
        Pio724Odena::from_bits(val)
    }
}
impl From<Pio724Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio724Odena) -> u8 {
        Pio724Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio724Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio724Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio724Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio724Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio724Pupdena {
        Pio724Pupdena::from_bits(val)
    }
}
impl From<Pio724Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio724Pupdena) -> u8 {
        Pio724Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio724Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio724Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio724Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio724Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio724Pupdsel {
        Pio724Pupdsel::from_bits(val)
    }
}
impl From<Pio724Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio724Pupdsel) -> u8 {
        Pio724Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio724Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio724Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio724Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio724Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio724Slewrate {
        Pio724Slewrate::from_bits(val)
    }
}
impl From<Pio724Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio724Slewrate) -> u8 {
        Pio724Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio725Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio725Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio725Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio725Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio725Amena {
        Pio725Amena::from_bits(val)
    }
}
impl From<Pio725Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio725Amena) -> u8 {
        Pio725Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio725Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio725Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio725Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio725Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio725Fsel {
        Pio725Fsel::from_bits(val)
    }
}
impl From<Pio725Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio725Fsel) -> u8 {
        Pio725Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio725Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio725Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio725Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio725Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio725Fulldrive {
        Pio725Fulldrive::from_bits(val)
    }
}
impl From<Pio725Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio725Fulldrive) -> u8 {
        Pio725Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio725Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio725Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio725Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio725Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio725Ibena {
        Pio725Ibena::from_bits(val)
    }
}
impl From<Pio725Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio725Ibena) -> u8 {
        Pio725Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio725Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio725Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio725Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio725Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio725Iiena {
        Pio725Iiena::from_bits(val)
    }
}
impl From<Pio725Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio725Iiena) -> u8 {
        Pio725Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio725Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio725Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio725Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio725Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio725Odena {
        Pio725Odena::from_bits(val)
    }
}
impl From<Pio725Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio725Odena) -> u8 {
        Pio725Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio725Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio725Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio725Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio725Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio725Pupdena {
        Pio725Pupdena::from_bits(val)
    }
}
impl From<Pio725Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio725Pupdena) -> u8 {
        Pio725Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio725Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio725Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio725Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio725Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio725Pupdsel {
        Pio725Pupdsel::from_bits(val)
    }
}
impl From<Pio725Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio725Pupdsel) -> u8 {
        Pio725Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio725Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio725Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio725Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio725Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio725Slewrate {
        Pio725Slewrate::from_bits(val)
    }
}
impl From<Pio725Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio725Slewrate) -> u8 {
        Pio725Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio726Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio726Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio726Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio726Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio726Amena {
        Pio726Amena::from_bits(val)
    }
}
impl From<Pio726Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio726Amena) -> u8 {
        Pio726Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio726Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio726Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio726Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio726Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio726Fsel {
        Pio726Fsel::from_bits(val)
    }
}
impl From<Pio726Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio726Fsel) -> u8 {
        Pio726Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio726Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio726Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio726Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio726Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio726Fulldrive {
        Pio726Fulldrive::from_bits(val)
    }
}
impl From<Pio726Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio726Fulldrive) -> u8 {
        Pio726Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio726Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio726Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio726Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio726Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio726Ibena {
        Pio726Ibena::from_bits(val)
    }
}
impl From<Pio726Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio726Ibena) -> u8 {
        Pio726Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio726Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio726Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio726Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio726Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio726Iiena {
        Pio726Iiena::from_bits(val)
    }
}
impl From<Pio726Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio726Iiena) -> u8 {
        Pio726Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio726Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio726Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio726Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio726Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio726Odena {
        Pio726Odena::from_bits(val)
    }
}
impl From<Pio726Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio726Odena) -> u8 {
        Pio726Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio726Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio726Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio726Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio726Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio726Pupdena {
        Pio726Pupdena::from_bits(val)
    }
}
impl From<Pio726Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio726Pupdena) -> u8 {
        Pio726Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio726Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio726Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio726Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio726Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio726Pupdsel {
        Pio726Pupdsel::from_bits(val)
    }
}
impl From<Pio726Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio726Pupdsel) -> u8 {
        Pio726Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio726Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio726Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio726Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio726Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio726Slewrate {
        Pio726Slewrate::from_bits(val)
    }
}
impl From<Pio726Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio726Slewrate) -> u8 {
        Pio726Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio727Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio727Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio727Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio727Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio727Amena {
        Pio727Amena::from_bits(val)
    }
}
impl From<Pio727Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio727Amena) -> u8 {
        Pio727Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio727Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio727Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio727Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio727Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio727Fsel {
        Pio727Fsel::from_bits(val)
    }
}
impl From<Pio727Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio727Fsel) -> u8 {
        Pio727Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio727Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio727Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio727Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio727Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio727Fulldrive {
        Pio727Fulldrive::from_bits(val)
    }
}
impl From<Pio727Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio727Fulldrive) -> u8 {
        Pio727Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio727Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio727Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio727Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio727Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio727Ibena {
        Pio727Ibena::from_bits(val)
    }
}
impl From<Pio727Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio727Ibena) -> u8 {
        Pio727Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio727Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio727Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio727Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio727Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio727Iiena {
        Pio727Iiena::from_bits(val)
    }
}
impl From<Pio727Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio727Iiena) -> u8 {
        Pio727Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio727Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio727Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio727Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio727Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio727Odena {
        Pio727Odena::from_bits(val)
    }
}
impl From<Pio727Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio727Odena) -> u8 {
        Pio727Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio727Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio727Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio727Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio727Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio727Pupdena {
        Pio727Pupdena::from_bits(val)
    }
}
impl From<Pio727Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio727Pupdena) -> u8 {
        Pio727Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio727Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio727Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio727Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio727Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio727Pupdsel {
        Pio727Pupdsel::from_bits(val)
    }
}
impl From<Pio727Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio727Pupdsel) -> u8 {
        Pio727Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio727Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio727Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio727Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio727Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio727Slewrate {
        Pio727Slewrate::from_bits(val)
    }
}
impl From<Pio727Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio727Slewrate) -> u8 {
        Pio727Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio728Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio728Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio728Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio728Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio728Amena {
        Pio728Amena::from_bits(val)
    }
}
impl From<Pio728Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio728Amena) -> u8 {
        Pio728Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio728Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio728Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio728Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio728Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio728Fsel {
        Pio728Fsel::from_bits(val)
    }
}
impl From<Pio728Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio728Fsel) -> u8 {
        Pio728Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio728Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio728Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio728Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio728Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio728Fulldrive {
        Pio728Fulldrive::from_bits(val)
    }
}
impl From<Pio728Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio728Fulldrive) -> u8 {
        Pio728Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio728Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio728Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio728Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio728Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio728Ibena {
        Pio728Ibena::from_bits(val)
    }
}
impl From<Pio728Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio728Ibena) -> u8 {
        Pio728Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio728Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio728Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio728Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio728Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio728Iiena {
        Pio728Iiena::from_bits(val)
    }
}
impl From<Pio728Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio728Iiena) -> u8 {
        Pio728Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio728Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio728Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio728Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio728Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio728Odena {
        Pio728Odena::from_bits(val)
    }
}
impl From<Pio728Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio728Odena) -> u8 {
        Pio728Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio728Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio728Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio728Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio728Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio728Pupdena {
        Pio728Pupdena::from_bits(val)
    }
}
impl From<Pio728Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio728Pupdena) -> u8 {
        Pio728Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio728Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio728Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio728Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio728Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio728Pupdsel {
        Pio728Pupdsel::from_bits(val)
    }
}
impl From<Pio728Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio728Pupdsel) -> u8 {
        Pio728Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio728Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio728Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio728Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio728Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio728Slewrate {
        Pio728Slewrate::from_bits(val)
    }
}
impl From<Pio728Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio728Slewrate) -> u8 {
        Pio728Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio729Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio729Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio729Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio729Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio729Amena {
        Pio729Amena::from_bits(val)
    }
}
impl From<Pio729Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio729Amena) -> u8 {
        Pio729Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio729Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio729Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio729Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio729Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio729Fsel {
        Pio729Fsel::from_bits(val)
    }
}
impl From<Pio729Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio729Fsel) -> u8 {
        Pio729Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio729Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio729Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio729Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio729Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio729Fulldrive {
        Pio729Fulldrive::from_bits(val)
    }
}
impl From<Pio729Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio729Fulldrive) -> u8 {
        Pio729Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio729Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio729Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio729Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio729Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio729Ibena {
        Pio729Ibena::from_bits(val)
    }
}
impl From<Pio729Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio729Ibena) -> u8 {
        Pio729Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio729Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio729Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio729Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio729Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio729Iiena {
        Pio729Iiena::from_bits(val)
    }
}
impl From<Pio729Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio729Iiena) -> u8 {
        Pio729Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio729Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio729Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio729Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio729Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio729Odena {
        Pio729Odena::from_bits(val)
    }
}
impl From<Pio729Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio729Odena) -> u8 {
        Pio729Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio729Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio729Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio729Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio729Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio729Pupdena {
        Pio729Pupdena::from_bits(val)
    }
}
impl From<Pio729Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio729Pupdena) -> u8 {
        Pio729Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio729Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio729Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio729Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio729Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio729Pupdsel {
        Pio729Pupdsel::from_bits(val)
    }
}
impl From<Pio729Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio729Pupdsel) -> u8 {
        Pio729Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio729Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio729Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio729Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio729Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio729Slewrate {
        Pio729Slewrate::from_bits(val)
    }
}
impl From<Pio729Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio729Slewrate) -> u8 {
        Pio729Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio72Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio72Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio72Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio72Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio72Amena {
        Pio72Amena::from_bits(val)
    }
}
impl From<Pio72Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio72Amena) -> u8 {
        Pio72Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio72Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio72Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio72Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio72Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio72Fsel {
        Pio72Fsel::from_bits(val)
    }
}
impl From<Pio72Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio72Fsel) -> u8 {
        Pio72Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio72Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio72Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio72Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio72Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio72Fulldrive {
        Pio72Fulldrive::from_bits(val)
    }
}
impl From<Pio72Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio72Fulldrive) -> u8 {
        Pio72Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio72Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio72Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio72Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio72Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio72Ibena {
        Pio72Ibena::from_bits(val)
    }
}
impl From<Pio72Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio72Ibena) -> u8 {
        Pio72Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio72Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio72Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio72Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio72Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio72Iiena {
        Pio72Iiena::from_bits(val)
    }
}
impl From<Pio72Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio72Iiena) -> u8 {
        Pio72Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio72Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio72Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio72Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio72Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio72Odena {
        Pio72Odena::from_bits(val)
    }
}
impl From<Pio72Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio72Odena) -> u8 {
        Pio72Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio72Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio72Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio72Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio72Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio72Pupdena {
        Pio72Pupdena::from_bits(val)
    }
}
impl From<Pio72Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio72Pupdena) -> u8 {
        Pio72Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio72Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio72Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio72Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio72Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio72Pupdsel {
        Pio72Pupdsel::from_bits(val)
    }
}
impl From<Pio72Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio72Pupdsel) -> u8 {
        Pio72Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio72Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio72Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio72Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio72Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio72Slewrate {
        Pio72Slewrate::from_bits(val)
    }
}
impl From<Pio72Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio72Slewrate) -> u8 {
        Pio72Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio730Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio730Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio730Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio730Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio730Amena {
        Pio730Amena::from_bits(val)
    }
}
impl From<Pio730Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio730Amena) -> u8 {
        Pio730Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio730Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio730Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio730Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio730Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio730Fsel {
        Pio730Fsel::from_bits(val)
    }
}
impl From<Pio730Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio730Fsel) -> u8 {
        Pio730Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio730Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio730Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio730Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio730Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio730Fulldrive {
        Pio730Fulldrive::from_bits(val)
    }
}
impl From<Pio730Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio730Fulldrive) -> u8 {
        Pio730Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio730Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio730Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio730Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio730Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio730Ibena {
        Pio730Ibena::from_bits(val)
    }
}
impl From<Pio730Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio730Ibena) -> u8 {
        Pio730Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio730Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio730Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio730Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio730Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio730Iiena {
        Pio730Iiena::from_bits(val)
    }
}
impl From<Pio730Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio730Iiena) -> u8 {
        Pio730Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio730Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio730Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio730Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio730Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio730Odena {
        Pio730Odena::from_bits(val)
    }
}
impl From<Pio730Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio730Odena) -> u8 {
        Pio730Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio730Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio730Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio730Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio730Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio730Pupdena {
        Pio730Pupdena::from_bits(val)
    }
}
impl From<Pio730Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio730Pupdena) -> u8 {
        Pio730Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio730Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio730Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio730Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio730Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio730Pupdsel {
        Pio730Pupdsel::from_bits(val)
    }
}
impl From<Pio730Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio730Pupdsel) -> u8 {
        Pio730Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio730Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio730Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio730Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio730Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio730Slewrate {
        Pio730Slewrate::from_bits(val)
    }
}
impl From<Pio730Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio730Slewrate) -> u8 {
        Pio730Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio731Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio731Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio731Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio731Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio731Amena {
        Pio731Amena::from_bits(val)
    }
}
impl From<Pio731Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio731Amena) -> u8 {
        Pio731Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio731Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio731Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio731Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio731Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio731Fsel {
        Pio731Fsel::from_bits(val)
    }
}
impl From<Pio731Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio731Fsel) -> u8 {
        Pio731Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio731Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio731Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio731Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio731Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio731Fulldrive {
        Pio731Fulldrive::from_bits(val)
    }
}
impl From<Pio731Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio731Fulldrive) -> u8 {
        Pio731Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio731Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio731Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio731Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio731Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio731Ibena {
        Pio731Ibena::from_bits(val)
    }
}
impl From<Pio731Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio731Ibena) -> u8 {
        Pio731Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio731Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio731Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio731Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio731Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio731Iiena {
        Pio731Iiena::from_bits(val)
    }
}
impl From<Pio731Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio731Iiena) -> u8 {
        Pio731Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio731Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio731Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio731Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio731Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio731Odena {
        Pio731Odena::from_bits(val)
    }
}
impl From<Pio731Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio731Odena) -> u8 {
        Pio731Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio731Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio731Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio731Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio731Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio731Pupdena {
        Pio731Pupdena::from_bits(val)
    }
}
impl From<Pio731Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio731Pupdena) -> u8 {
        Pio731Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio731Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio731Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio731Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio731Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio731Pupdsel {
        Pio731Pupdsel::from_bits(val)
    }
}
impl From<Pio731Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio731Pupdsel) -> u8 {
        Pio731Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio731Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio731Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio731Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio731Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio731Slewrate {
        Pio731Slewrate::from_bits(val)
    }
}
impl From<Pio731Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio731Slewrate) -> u8 {
        Pio731Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio73Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio73Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio73Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio73Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio73Amena {
        Pio73Amena::from_bits(val)
    }
}
impl From<Pio73Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio73Amena) -> u8 {
        Pio73Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio73Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio73Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio73Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio73Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio73Fsel {
        Pio73Fsel::from_bits(val)
    }
}
impl From<Pio73Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio73Fsel) -> u8 {
        Pio73Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio73Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio73Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio73Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio73Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio73Fulldrive {
        Pio73Fulldrive::from_bits(val)
    }
}
impl From<Pio73Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio73Fulldrive) -> u8 {
        Pio73Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio73Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio73Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio73Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio73Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio73Ibena {
        Pio73Ibena::from_bits(val)
    }
}
impl From<Pio73Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio73Ibena) -> u8 {
        Pio73Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio73Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio73Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio73Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio73Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio73Iiena {
        Pio73Iiena::from_bits(val)
    }
}
impl From<Pio73Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio73Iiena) -> u8 {
        Pio73Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio73Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio73Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio73Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio73Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio73Odena {
        Pio73Odena::from_bits(val)
    }
}
impl From<Pio73Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio73Odena) -> u8 {
        Pio73Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio73Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio73Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio73Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio73Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio73Pupdena {
        Pio73Pupdena::from_bits(val)
    }
}
impl From<Pio73Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio73Pupdena) -> u8 {
        Pio73Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio73Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio73Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio73Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio73Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio73Pupdsel {
        Pio73Pupdsel::from_bits(val)
    }
}
impl From<Pio73Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio73Pupdsel) -> u8 {
        Pio73Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio73Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio73Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio73Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio73Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio73Slewrate {
        Pio73Slewrate::from_bits(val)
    }
}
impl From<Pio73Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio73Slewrate) -> u8 {
        Pio73Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio74Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio74Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio74Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio74Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio74Amena {
        Pio74Amena::from_bits(val)
    }
}
impl From<Pio74Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio74Amena) -> u8 {
        Pio74Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio74Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio74Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio74Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio74Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio74Fsel {
        Pio74Fsel::from_bits(val)
    }
}
impl From<Pio74Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio74Fsel) -> u8 {
        Pio74Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio74Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio74Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio74Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio74Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio74Fulldrive {
        Pio74Fulldrive::from_bits(val)
    }
}
impl From<Pio74Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio74Fulldrive) -> u8 {
        Pio74Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio74Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio74Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio74Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio74Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio74Ibena {
        Pio74Ibena::from_bits(val)
    }
}
impl From<Pio74Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio74Ibena) -> u8 {
        Pio74Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio74Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio74Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio74Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio74Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio74Iiena {
        Pio74Iiena::from_bits(val)
    }
}
impl From<Pio74Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio74Iiena) -> u8 {
        Pio74Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio74Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio74Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio74Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio74Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio74Odena {
        Pio74Odena::from_bits(val)
    }
}
impl From<Pio74Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio74Odena) -> u8 {
        Pio74Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio74Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio74Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio74Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio74Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio74Pupdena {
        Pio74Pupdena::from_bits(val)
    }
}
impl From<Pio74Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio74Pupdena) -> u8 {
        Pio74Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio74Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio74Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio74Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio74Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio74Pupdsel {
        Pio74Pupdsel::from_bits(val)
    }
}
impl From<Pio74Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio74Pupdsel) -> u8 {
        Pio74Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio74Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio74Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio74Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio74Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio74Slewrate {
        Pio74Slewrate::from_bits(val)
    }
}
impl From<Pio74Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio74Slewrate) -> u8 {
        Pio74Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio75Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio75Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio75Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio75Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio75Amena {
        Pio75Amena::from_bits(val)
    }
}
impl From<Pio75Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio75Amena) -> u8 {
        Pio75Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio75Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio75Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio75Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio75Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio75Fsel {
        Pio75Fsel::from_bits(val)
    }
}
impl From<Pio75Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio75Fsel) -> u8 {
        Pio75Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio75Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio75Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio75Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio75Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio75Fulldrive {
        Pio75Fulldrive::from_bits(val)
    }
}
impl From<Pio75Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio75Fulldrive) -> u8 {
        Pio75Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio75Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio75Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio75Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio75Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio75Ibena {
        Pio75Ibena::from_bits(val)
    }
}
impl From<Pio75Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio75Ibena) -> u8 {
        Pio75Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio75Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio75Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio75Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio75Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio75Iiena {
        Pio75Iiena::from_bits(val)
    }
}
impl From<Pio75Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio75Iiena) -> u8 {
        Pio75Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio75Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio75Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio75Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio75Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio75Odena {
        Pio75Odena::from_bits(val)
    }
}
impl From<Pio75Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio75Odena) -> u8 {
        Pio75Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio75Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio75Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio75Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio75Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio75Pupdena {
        Pio75Pupdena::from_bits(val)
    }
}
impl From<Pio75Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio75Pupdena) -> u8 {
        Pio75Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio75Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio75Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio75Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio75Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio75Pupdsel {
        Pio75Pupdsel::from_bits(val)
    }
}
impl From<Pio75Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio75Pupdsel) -> u8 {
        Pio75Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio75Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio75Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio75Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio75Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio75Slewrate {
        Pio75Slewrate::from_bits(val)
    }
}
impl From<Pio75Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio75Slewrate) -> u8 {
        Pio75Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio76Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio76Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio76Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio76Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio76Amena {
        Pio76Amena::from_bits(val)
    }
}
impl From<Pio76Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio76Amena) -> u8 {
        Pio76Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio76Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio76Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio76Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio76Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio76Fsel {
        Pio76Fsel::from_bits(val)
    }
}
impl From<Pio76Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio76Fsel) -> u8 {
        Pio76Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio76Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio76Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio76Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio76Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio76Fulldrive {
        Pio76Fulldrive::from_bits(val)
    }
}
impl From<Pio76Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio76Fulldrive) -> u8 {
        Pio76Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio76Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio76Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio76Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio76Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio76Ibena {
        Pio76Ibena::from_bits(val)
    }
}
impl From<Pio76Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio76Ibena) -> u8 {
        Pio76Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio76Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio76Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio76Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio76Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio76Iiena {
        Pio76Iiena::from_bits(val)
    }
}
impl From<Pio76Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio76Iiena) -> u8 {
        Pio76Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio76Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio76Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio76Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio76Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio76Odena {
        Pio76Odena::from_bits(val)
    }
}
impl From<Pio76Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio76Odena) -> u8 {
        Pio76Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio76Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio76Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio76Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio76Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio76Pupdena {
        Pio76Pupdena::from_bits(val)
    }
}
impl From<Pio76Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio76Pupdena) -> u8 {
        Pio76Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio76Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio76Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio76Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio76Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio76Pupdsel {
        Pio76Pupdsel::from_bits(val)
    }
}
impl From<Pio76Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio76Pupdsel) -> u8 {
        Pio76Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio76Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio76Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio76Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio76Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio76Slewrate {
        Pio76Slewrate::from_bits(val)
    }
}
impl From<Pio76Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio76Slewrate) -> u8 {
        Pio76Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio77Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio77Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio77Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio77Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio77Amena {
        Pio77Amena::from_bits(val)
    }
}
impl From<Pio77Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio77Amena) -> u8 {
        Pio77Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio77Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio77Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio77Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio77Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio77Fsel {
        Pio77Fsel::from_bits(val)
    }
}
impl From<Pio77Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio77Fsel) -> u8 {
        Pio77Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio77Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio77Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio77Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio77Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio77Fulldrive {
        Pio77Fulldrive::from_bits(val)
    }
}
impl From<Pio77Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio77Fulldrive) -> u8 {
        Pio77Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio77Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio77Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio77Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio77Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio77Ibena {
        Pio77Ibena::from_bits(val)
    }
}
impl From<Pio77Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio77Ibena) -> u8 {
        Pio77Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio77Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio77Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio77Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio77Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio77Iiena {
        Pio77Iiena::from_bits(val)
    }
}
impl From<Pio77Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio77Iiena) -> u8 {
        Pio77Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio77Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio77Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio77Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio77Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio77Odena {
        Pio77Odena::from_bits(val)
    }
}
impl From<Pio77Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio77Odena) -> u8 {
        Pio77Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio77Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio77Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio77Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio77Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio77Pupdena {
        Pio77Pupdena::from_bits(val)
    }
}
impl From<Pio77Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio77Pupdena) -> u8 {
        Pio77Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio77Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio77Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio77Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio77Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio77Pupdsel {
        Pio77Pupdsel::from_bits(val)
    }
}
impl From<Pio77Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio77Pupdsel) -> u8 {
        Pio77Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio77Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio77Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio77Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio77Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio77Slewrate {
        Pio77Slewrate::from_bits(val)
    }
}
impl From<Pio77Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio77Slewrate) -> u8 {
        Pio77Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio78Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio78Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio78Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio78Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio78Amena {
        Pio78Amena::from_bits(val)
    }
}
impl From<Pio78Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio78Amena) -> u8 {
        Pio78Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio78Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio78Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio78Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio78Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio78Fsel {
        Pio78Fsel::from_bits(val)
    }
}
impl From<Pio78Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio78Fsel) -> u8 {
        Pio78Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio78Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio78Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio78Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio78Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio78Fulldrive {
        Pio78Fulldrive::from_bits(val)
    }
}
impl From<Pio78Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio78Fulldrive) -> u8 {
        Pio78Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio78Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio78Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio78Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio78Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio78Ibena {
        Pio78Ibena::from_bits(val)
    }
}
impl From<Pio78Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio78Ibena) -> u8 {
        Pio78Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio78Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio78Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio78Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio78Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio78Iiena {
        Pio78Iiena::from_bits(val)
    }
}
impl From<Pio78Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio78Iiena) -> u8 {
        Pio78Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio78Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio78Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio78Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio78Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio78Odena {
        Pio78Odena::from_bits(val)
    }
}
impl From<Pio78Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio78Odena) -> u8 {
        Pio78Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio78Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio78Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio78Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio78Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio78Pupdena {
        Pio78Pupdena::from_bits(val)
    }
}
impl From<Pio78Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio78Pupdena) -> u8 {
        Pio78Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio78Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio78Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio78Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio78Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio78Pupdsel {
        Pio78Pupdsel::from_bits(val)
    }
}
impl From<Pio78Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio78Pupdsel) -> u8 {
        Pio78Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio78Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio78Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio78Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio78Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio78Slewrate {
        Pio78Slewrate::from_bits(val)
    }
}
impl From<Pio78Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio78Slewrate) -> u8 {
        Pio78Slewrate::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio79Amena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio79Amena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio79Amena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio79Amena {
    #[inline(always)]
    fn from(val: u8) -> Pio79Amena {
        Pio79Amena::from_bits(val)
    }
}
impl From<Pio79Amena> for u8 {
    #[inline(always)]
    fn from(val: Pio79Amena) -> u8 {
        Pio79Amena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio79Fsel {
    #[doc = "Function 0."]
    FUNCTION_0 = 0x0,
    #[doc = "Function 1."]
    FUNCTION_1 = 0x01,
    #[doc = "Function 2."]
    FUNCTION_2 = 0x02,
    #[doc = "Function 3."]
    FUNCTION_3 = 0x03,
    #[doc = "Function 4."]
    FUNCTION_4 = 0x04,
    #[doc = "Function 5."]
    FUNCTION_5 = 0x05,
    #[doc = "Function 6."]
    FUNCTION_6 = 0x06,
    #[doc = "Function 7."]
    FUNCTION_7 = 0x07,
    #[doc = "Function 8."]
    FUNCTION_8 = 0x08,
    #[doc = "Function 9."]
    FUNCTION_9 = 0x09,
    #[doc = "Function 10."]
    FUNCTION_10 = 0x0a,
    #[doc = "Function 11."]
    FUNCTION_11 = 0x0b,
    #[doc = "Function 12."]
    FUNCTION_12 = 0x0c,
    #[doc = "Function 13."]
    FUNCTION_13 = 0x0d,
    #[doc = "Function 14."]
    FUNCTION_14 = 0x0e,
    #[doc = "Function 15."]
    FUNCTION_15 = 0x0f,
}
impl Pio79Fsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio79Fsel {
        unsafe { core::mem::transmute(val & 0x0f) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio79Fsel {
    #[inline(always)]
    fn from(val: u8) -> Pio79Fsel {
        Pio79Fsel::from_bits(val)
    }
}
impl From<Pio79Fsel> for u8 {
    #[inline(always)]
    fn from(val: Pio79Fsel) -> u8 {
        Pio79Fsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio79Fulldrive {
    #[doc = "Normal Drive."]
    NORMAL_DRIVE = 0x0,
    #[doc = "Full Drive."]
    FULL_DRIVE = 0x01,
}
impl Pio79Fulldrive {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio79Fulldrive {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio79Fulldrive {
    #[inline(always)]
    fn from(val: u8) -> Pio79Fulldrive {
        Pio79Fulldrive::from_bits(val)
    }
}
impl From<Pio79Fulldrive> for u8 {
    #[inline(always)]
    fn from(val: Pio79Fulldrive) -> u8 {
        Pio79Fulldrive::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio79Ibena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio79Ibena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio79Ibena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio79Ibena {
    #[inline(always)]
    fn from(val: u8) -> Pio79Ibena {
        Pio79Ibena::from_bits(val)
    }
}
impl From<Pio79Ibena> for u8 {
    #[inline(always)]
    fn from(val: Pio79Ibena) -> u8 {
        Pio79Ibena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio79Iiena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio79Iiena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio79Iiena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio79Iiena {
    #[inline(always)]
    fn from(val: u8) -> Pio79Iiena {
        Pio79Iiena::from_bits(val)
    }
}
impl From<Pio79Iiena> for u8 {
    #[inline(always)]
    fn from(val: Pio79Iiena) -> u8 {
        Pio79Iiena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio79Odena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio79Odena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio79Odena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio79Odena {
    #[inline(always)]
    fn from(val: u8) -> Pio79Odena {
        Pio79Odena::from_bits(val)
    }
}
impl From<Pio79Odena> for u8 {
    #[inline(always)]
    fn from(val: Pio79Odena) -> u8 {
        Pio79Odena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio79Pupdena {
    #[doc = "Disable."]
    DISABLED = 0x0,
    #[doc = "Enable."]
    ENABLED = 0x01,
}
impl Pio79Pupdena {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio79Pupdena {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio79Pupdena {
    #[inline(always)]
    fn from(val: u8) -> Pio79Pupdena {
        Pio79Pupdena::from_bits(val)
    }
}
impl From<Pio79Pupdena> for u8 {
    #[inline(always)]
    fn from(val: Pio79Pupdena) -> u8 {
        Pio79Pupdena::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio79Pupdsel {
    #[doc = "Pull-down."]
    PULL_DOWN = 0x0,
    #[doc = "Pull-up."]
    PULL_UP = 0x01,
}
impl Pio79Pupdsel {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio79Pupdsel {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio79Pupdsel {
    #[inline(always)]
    fn from(val: u8) -> Pio79Pupdsel {
        Pio79Pupdsel::from_bits(val)
    }
}
impl From<Pio79Pupdsel> for u8 {
    #[inline(always)]
    fn from(val: Pio79Pupdsel) -> u8 {
        Pio79Pupdsel::to_bits(val)
    }
}
#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd)]
pub enum Pio79Slewrate {
    #[doc = "Slew Rate is Normal."]
    NORMAL = 0x0,
    #[doc = "Slew Rate Slow."]
    SLOW = 0x01,
}
impl Pio79Slewrate {
    #[inline(always)]
    pub const fn from_bits(val: u8) -> Pio79Slewrate {
        unsafe { core::mem::transmute(val & 0x01) }
    }
    #[inline(always)]
    pub const fn to_bits(self) -> u8 {
        unsafe { core::mem::transmute(self) }
    }
}
impl From<u8> for Pio79Slewrate {
    #[inline(always)]
    fn from(val: u8) -> Pio79Slewrate {
        Pio79Slewrate::from_bits(val)
    }
}
impl From<Pio79Slewrate> for u8 {
    #[inline(always)]
    fn from(val: Pio79Slewrate) -> u8 {
        Pio79Slewrate::to_bits(val)
    }
}
